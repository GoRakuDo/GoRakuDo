---
// ArticleCard.astro - Reusable component for displaying tool article cards
// Designed for tool index pages with responsive card layout and design system integration
// Includes lazy loading optimization for performance

export interface Props {
  title: string
  description?: string
  slug: string
  tags?: string[]
  tool: string
  priority?: boolean // For above-the-fold content
}

const { title, description = "", slug, tags = [], tool, priority = false } = Astro.props

// Generate article URL with error handling
const generateArticleUrl = (tool: string, slug: string): string => {
  try {
    // Remove tool prefix from slug if present to avoid duplication
    const cleanSlug = slug.replace(new RegExp(`^${tool}/`), "")
    return `/tools/${tool}/${cleanSlug}`
  } catch (error) {
    console.warn("⚠️ Error generating article URL:", error)
    return `/tools/${tool}`
  }
}

// Safe data validation and fallbacks
const safeTitle =
  typeof title === "string" && title.trim() ? title.trim() : "Untitled Article"
const safeDescription = typeof description === "string" ? description.trim() : ""
const safeTags = Array.isArray(tags)
  ? tags.filter((tag) => typeof tag === "string" && tag.trim())
  : []
const articleUrl = generateArticleUrl(tool, slug)

// Limit tags display for better UX
const displayTags = safeTags.slice(0, 3)
const remainingTagsCount = safeTags.length - displayTags.length

// Lazy loading configuration
const loadingStrategy = priority ? "eager" : "lazy"
const fetchPriority = priority ? "high" : "low"
---

<!-- Article Card - Entire card is clickable with proper semantic structure -->
<a
  href={articleUrl}
  class={`article-card group block h-full text-decoration-none ${priority ? "loaded" : ""}`}
  title={`Read article: ${safeTitle}`}
  aria-label={`Read article: ${safeTitle}${safeDescription ? ` - ${safeDescription}` : ""}`}
  data-priority={priority ? "true" : undefined}>
  <article class="article-card-content">
    <!-- Card Header with Title -->
    <header class="article-card-header">
      <h3 class="article-card-title">
        {safeTitle}
      </h3>
    </header>

    <!-- Card Body with Description -->
    <div class="article-card-body">
      {safeDescription && <p class="article-card-description">{safeDescription}</p>}

      <!-- Tags Section -->
      {
        displayTags.length > 0 && (
          <div class="article-card-tags">
            {displayTags.map((tag) => (
              <span class="article-tag">#{tag}</span>
            ))}
            {remainingTagsCount > 0 && (
              <span class="article-tag article-tag-more">+{remainingTagsCount} more</span>
            )}
          </div>
        )
      }
    </div>

    <!-- Card Footer with Read More Indicator -->
    <footer class="article-card-footer">
      <span class="article-read-more"> Read Article </span>
      <svg
        class="article-arrow"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
        aria-hidden="true">
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M9 5l7 7-7 7"></path>
      </svg>
    </footer>
  </article>
</a>

<script>
  // Simplified lazy loading implementation for ArticleCard
  // Basic functionality without complex class structure to avoid TypeScript issues

  // Initialize when DOM is ready
  document.addEventListener("DOMContentLoaded", () => {
    // Find all article cards
    const articleCards = document.querySelectorAll(".article-card")

    articleCards.forEach((card) => {
      // Priority content loads immediately
      if (card.hasAttribute("data-priority")) {
        card.classList.add("loaded")
        return
      }

      // Setup basic lazy loading for non-priority content
      if ("IntersectionObserver" in window) {
        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                // Simple loading simulation
                card.classList.add("loading")
                setTimeout(
                  () => {
                    card.classList.remove("loading")
                    card.classList.add("loaded")
                    observer.disconnect()
                  },
                  Math.random() * 100 + 50
                )
              }
            })
          },
          {
            rootMargin: "50px",
            threshold: 0.1,
          }
        )

        observer.observe(card)
      } else {
        // Fallback for browsers without IntersectionObserver
        card.classList.add("loaded")
      }
    })
  })
</script>

<style>
  /* ========== ARTICLE CARD STYLES ========== */
  /* Using design system tokens from tools.css */

  .article-card {
    /* Base card styles using design tokens */
    background: var(--clr-accent-glow-faint);
    border: 1px solid var(--clr-accent-glow-medium);
    border-radius: var(--border-radius-card);
    padding: var(--spacing-6);
    display: block;
    height: 100%;
    min-height: 44px; /* AC 9: Touch Target Compliance */

    /* Performance optimization */
    will-change: transform, border-color, box-shadow;
    transition:
      transform var(--transition-speed) var(--transition-ease),
      border-color var(--transition-speed) var(--transition-ease),
      box-shadow var(--transition-speed) var(--transition-ease);
  }

  .article-card:hover {
    transform: translateY(-1px);
    border-color: var(--clr-accent-glow-strong);
    box-shadow: var(--shadow-lg-accent);
  }

  .article-card:focus-visible {
    outline: none;
    transform: translateY(-1px);
    border-color: var(--clr-accent-glow-strong);
    box-shadow:
      0 0 0 3px var(--clr-bg),
      0 0 0 5px var(--clr-accent);
  }

  /* Card Content Layout */
  .article-card-content {
    display: flex;
    flex-direction: column;
    height: 100%;
  }

  /* Card Header */
  .article-card-header {
    margin-bottom: var(--spacing-4);
  }

  .article-card-title {
    font-size: var(--fs-h3);
    font-weight: 600;
    margin: 0;
    color: var(--clr-text-primary);
    line-height: 1.4;
    transition: color var(--transition-speed) var(--transition-ease);
  }

  .article-card:hover .article-card-title {
    color: var(--clr-accent);
  }

  /* Card Body */
  .article-card-body {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    gap: var(--spacing-4);
  }

  /* Description */
  .article-card-description {
    color: var(--clr-text-muted);
    line-height: 1.6;
    font-size: var(--fs-sm);
    margin: 0;
    flex-grow: 1;
  }

  /* Tags */
  .article-card-tags {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-2);
  }

  .article-tag {
    font-size: var(--fs-xs);
    font-weight: 500;
    padding: var(--spacing-1) var(--spacing-2);
    border-radius: var(--border-radius-pill);
    background-color: var(--clr-accent-glow-medium);
    color: var(--clr-accent);
    border: 1px solid var(--clr-accent-glow-strong);
    white-space: nowrap;
  }

  .article-tag-more {
    opacity: 0.7;
  }

  /* Card Footer */
  .article-card-footer {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-top: var(--spacing-6);
    color: var(--clr-accent);
    font-size: var(--fs-sm);
    font-weight: 500;
    transition: color var(--transition-speed) var(--transition-ease);
  }

  .article-card:hover .article-card-footer {
    color: var(--clr-accent-dark);
  }

  .article-read-more {
    transition: color var(--transition-speed) var(--transition-ease);
  }

  .article-arrow {
    width: 1rem;
    height: 1rem;
    transition: transform var(--transition-speed) var(--transition-ease);
  }

  .article-card:hover .article-arrow {
    transform: translateX(4px);
  }

  /* ========== ACCESSIBILITY & RESPONSIVE ENHANCEMENTS ========== */

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .article-card {
      border-width: 2px;
    }

    .article-card-title {
      font-weight: 700;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .article-card,
    .article-card-title,
    .article-card-footer,
    .article-arrow {
      transition: none !important;
    }

    .article-card:hover,
    .article-card:focus-visible {
      transform: none !important;
    }
  }

  /* Focus enhancement for better accessibility */
  .article-card:focus-visible {
    box-shadow:
      0 0 0 3px var(--clr-bg),
      0 0 0 5px var(--clr-accent);
  }

  /* Enhanced touch targets for mobile */
  @media (hover: none) and (pointer: coarse) {
    .article-card {
      min-height: 48px;
    }

    .article-card-title {
      font-size: var(--fs-base);
    }
  }

  /* ========== LAZY LOADING STYLES ========== */

  /* Loading state */
  .article-card.loading {
    position: relative;
    overflow: hidden;
  }

  .article-card.loading::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      var(--clr-accent-glow-medium),
      transparent
    );
    animation: loading-shimmer 1.5s infinite;
    z-index: 1;
  }

  .article-card.loading > * {
    opacity: 0.7;
    pointer-events: none;
  }

  /* Loaded state */
  .article-card.loaded {
    animation: fade-in-loaded 0.3s ease-out;
  }

  /* Error state */
  .article-card.error {
    border-color: var(--clr-accent-glow-strong);
    background: rgba(239, 68, 68, 0.05);
  }

  .article-card.error::after {
    content: "⚠️ Content unavailable";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: var(--fs-sm);
    color: var(--clr-text-secondary);
    text-align: center;
    z-index: 2;
  }

  /* Loading shimmer animation */
  @keyframes loading-shimmer {
    0% {
      left: -100%;
    }
    100% {
      left: 100%;
    }
  }

  /* Fade in animation for loaded content */
  @keyframes fade-in-loaded {
    0% {
      opacity: 0;
      transform: translateY(5px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Priority content indicator (for debugging/performance monitoring) */
  .article-card[data-priority] {
    /* Add subtle indicator for priority content */
    position: relative;
  }

  .article-card[data-priority]::after {
    content: "";
    position: absolute;
    top: 8px;
    right: 8px;
    width: 6px;
    height: 6px;
    background: var(--clr-accent);
    border-radius: 50%;
    opacity: 0.7;
    z-index: 3;
  }

  /* Performance optimization - reduce animations for low-performance devices */
  @media (prefers-reduced-motion: reduce) {
    .article-card.loading::before {
      animation: none;
    }

    .article-card.loaded {
      animation: none;
    }
  }
</style>
