---
// ContentCard.astro - Reusable component for displaying content cards
// Supports different content types with AI-ready features and mind map integration

import {
  resolveContentPath,
  getCollectionMetadata,
} from "../../utils/content-path-resolver"

export interface Props {
  title: string
  description: string
  slug: string
  publishedDate: string
  readTime: number
  author: string
  difficulty: "beginner" | "intermediate" | "advanced"
  category: string
  tags: string[]
  featured: boolean
  mindMapBranch?: string // Optional - MindMap functionality deprecated
  understandingLevel: string
  learningStage: string
  aiMetadata?: {
    contentType?: string
    learningStage?: string
    complexityScore?: number
    estimatedStudyTime?: number
    primaryKeywords?: string[]
    searchIntent?: string
  }
}

const {
  title,
  description,
  slug,
  publishedDate,
  readTime,
  author,
  difficulty,
  category,
  tags,
  featured,
  mindMapBranch = "general", // Default value for backward compatibility
  understandingLevel,
  learningStage,
  aiMetadata,
} = Astro.props

// Dynamic content path resolution
const resolvedPath = resolveContentPath({ slug } as any)
const collectionMetadata = getCollectionMetadata("blog") // Default to blog for backward compatibility

// Format date
const formattedDate = new Date(publishedDate).toLocaleDateString("id-ID", {
  year: "numeric",
  month: "long",
  day: "numeric",
})

// Get difficulty color
const getDifficultyColor = (difficulty: string) => {
  switch (difficulty) {
    case "beginner":
      return "bg-green-500"
    case "intermediate":
      return "bg-yellow-500"
    case "advanced":
      return "bg-red-500"
    default:
      return "bg-gray-500"
  }
}

// Get mind map branch info - Updated for MindMap deprecation
const getBranchInfo = (branch: string) => {
  const branches = {
    "general": {
      name: "General Content",
      icon: "üìÑ",
      color: "bg-gray-500",
    },
    "landasan-filosofi": {
      name: "Landasan & Filosofi",
      icon: "üèõÔ∏è",
      color: "bg-purple-500",
    },
    "tahap-pembelajaran": {
      name: "Tahap Pembelajaran",
      icon: "üìö",
      color: "bg-blue-500",
    },
    "kerangka-pemahaman": {
      name: "Kerangka Pemahaman",
      icon: "üß†",
      color: "bg-green-500",
    },
    "tools-resource": {
      name: "Tools & Resource",
      icon: "üõ†Ô∏è",
      color: "bg-orange-500",
    },
    "strategi-tips": {
      name: "Strategi & Tips",
      icon: "üí°",
      color: "bg-pink-500",
    },
  }
  return (
    branches[branch as keyof typeof branches] || {
      name: branch,
      icon: "üìÑ",
      color: "bg-gray-500",
    }
  )
}

// Get understanding level info
const getLevelInfo = (level: string) => {
  const levels = {
    "tingkat-0": { name: "Level 0", desc: "Complete Beginner" },
    "tingkat-1": { name: "Level 1", desc: "Basic Understanding" },
    "tingkat-2": { name: "Level 2", desc: "Elementary" },
    "tingkat-3": { name: "Level 3", desc: "Intermediate" },
    "tingkat-4": { name: "Level 4", desc: "Upper Intermediate" },
    "tingkat-5": { name: "Level 5", desc: "Advanced" },
    "tingkat-6": { name: "Level 6", desc: "Near Native" },
  }
  return levels[level as keyof typeof levels] || { name: level, desc: "Unknown" }
}

// Get learning stage info
const getStageInfo = (stage: string) => {
  const stages = {
    pemanasan: { name: "Pemanasan", desc: "Warm-up Stage (1 Month)" },
    starter: { name: "Starter", desc: "Starter Stage (3-6 Months)" },
    normalisasi: {
      name: "Normalisasi",
      desc: "Normalization Stage (6-12 Months)",
    },
    kompeten: { name: "Kompeten", desc: "Competent Stage (Lifetime)" },
  }
  return stages[stage as keyof typeof stages] || { name: stage, desc: "Unknown" }
}

const branchInfo = getBranchInfo(mindMapBranch)
const levelInfo = getLevelInfo(understandingLevel)
const stageInfo = getStageInfo(learningStage)
---

<article
  class="content-card group relative overflow-hidden rounded-xl border border-gray-200 bg-white shadow-sm transition-all duration-300 hover:shadow-lg dark:border-gray-700 dark:bg-gray-800">
  <!-- Featured Badge -->
  {
    featured && (
      <div class="absolute right-4 top-4 z-10">
        <span class="inline-flex items-center rounded-full bg-gradient-to-r from-purple-500 to-pink-500 px-3 py-1 text-xs font-medium text-white">
          ‚≠ê Featured
        </span>
      </div>
    )
  }

  <!-- Card Header -->
  <div class="p-6">
    <!-- Mind Map Branch Badge -->
    <div class="mb-3 flex items-center gap-2">
      <span
        class={`inline-flex items-center rounded-full px-2 py-1 text-xs font-medium text-white ${branchInfo.color}`}>
        {branchInfo.icon}
        {branchInfo.name}
      </span>
      <span
        class={`inline-flex items-center rounded-full px-2 py-1 text-xs font-medium text-white ${getDifficultyColor(difficulty)}`}>
        {difficulty.charAt(0).toUpperCase() + difficulty.slice(1)}
      </span>
    </div>

    <!-- Title -->
    <h3
      class="mb-2 text-xl font-semibold text-gray-900 transition-colors group-hover:text-purple-600 dark:text-white dark:group-hover:text-purple-400">
      <a href={resolvedPath.path} class="block">
        {title}
      </a>
    </h3>

    <!-- Description -->
    <p class="mb-4 text-sm text-gray-600 dark:text-gray-300">
      {description}
    </p>

    <!-- Meta Information -->
    <div class="mb-4 space-y-2">
      <!-- Author and Date -->
      <div class="flex items-center gap-4 text-xs text-gray-500 dark:text-gray-400">
        <span class="flex items-center gap-1">
          <svg class="h-3 w-3" fill="currentColor" viewBox="0 0 20 20">
            <path
              fill-rule="evenodd"
              d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z"
              clip-rule="evenodd"></path>
          </svg>
          {author}
        </span>
        <span class="flex items-center gap-1">
          <svg class="h-3 w-3" fill="currentColor" viewBox="0 0 20 20">
            <path
              fill-rule="evenodd"
              d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z"
              clip-rule="evenodd"></path>
          </svg>
          {formattedDate}
        </span>
        <span class="flex items-center gap-1">
          <svg class="h-3 w-3" fill="currentColor" viewBox="0 0 20 20">
            <path
              fill-rule="evenodd"
              d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z"
              clip-rule="evenodd"></path>
          </svg>
          {readTime} min read
        </span>
      </div>

      <!-- Learning Information -->
      <div class="flex flex-wrap gap-2 text-xs">
        <span
          class="rounded bg-blue-100 px-2 py-1 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
          üìä {levelInfo.name}: {levelInfo.desc}
        </span>
        <span
          class="rounded bg-green-100 px-2 py-1 text-green-800 dark:bg-green-900 dark:text-green-200">
          üéØ {stageInfo.name}: {stageInfo.desc}
        </span>
      </div>
    </div>

    <!-- Tags -->
    {
      tags.length > 0 && (
        <div class="mb-4 flex flex-wrap gap-1">
          {tags.slice(0, 3).map((tag) => (
            <span class="rounded-full bg-gray-100 px-2 py-1 text-xs text-gray-600 dark:bg-gray-700 dark:text-gray-300">
              #{tag}
            </span>
          ))}
          {tags.length > 3 && (
            <span class="rounded-full bg-gray-100 px-2 py-1 text-xs text-gray-600 dark:bg-gray-700 dark:text-gray-300">
              +{tags.length - 3} more
            </span>
          )}
        </div>
      )
    }

    <!-- AI Metadata (if available) -->
    {
      aiMetadata && (
        <div class="mb-4 rounded-lg bg-purple-50 p-3 dark:bg-purple-900/20">
          <div class="flex items-center gap-2 text-xs text-purple-700 dark:text-purple-300">
            <svg class="h-3 w-3" fill="currentColor" viewBox="0 0 20 20">
              <path
                fill-rule="evenodd"
                d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z"
                clip-rule="evenodd"
              />
            </svg>
            AI-Optimized Content
          </div>
          <div class="mt-2 grid grid-cols-2 gap-2 text-xs">
            {aiMetadata.contentType && (
              <span class="text-purple-600 dark:text-purple-400">
                Type: {aiMetadata.contentType}
              </span>
            )}
            {aiMetadata.complexityScore && (
              <span class="text-purple-600 dark:text-purple-400">
                Complexity: {aiMetadata.complexityScore}/10
              </span>
            )}
            {aiMetadata.estimatedStudyTime && (
              <span class="text-purple-600 dark:text-purple-400">
                Study Time: {aiMetadata.estimatedStudyTime}min
              </span>
            )}
            {aiMetadata.searchIntent && (
              <span class="text-purple-600 dark:text-purple-400">
                Intent: {aiMetadata.searchIntent}
              </span>
            )}
          </div>
        </div>
      )
    }

    <!-- Read More Button -->
    <div class="flex items-center justify-between">
      <a
        href={resolvedPath.path}
        class="inline-flex items-center gap-2 rounded-lg bg-purple-600 px-4 py-2 text-sm font-medium text-white transition-colors hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800">
        Read More
        <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M9 5l7 7-7 7"></path>
        </svg>
      </a>

      <!-- Category -->
      <span class="text-xs text-gray-500 dark:text-gray-400">
        {category}
      </span>
    </div>
  </div>
</article>

<style>
  .content-card {
    transition: all 0.3s ease;
  }

  .content-card:hover {
    transform: translateY(-2px);
  }

  /* Dark mode adjustments */
  @media (prefers-color-scheme: dark) {
    .content-card {
      background: rgba(31, 41, 55, 0.8);
      border-color: rgba(75, 85, 99, 0.5);
    }
  }
</style>
