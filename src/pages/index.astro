---
import BaseLayout from '../layouts/BaseLayout.astro';

// Homepage specific components
import Hero from '../components/homepage/hero.astro';
import MissionSection from '../components/homepage/MissionSection.astro';
import FeaturesSection from '../components/homepage/FeaturesSection.astro';
import DocumentationPreviewSection from '../components/homepage/DocumentationPreviewSection.astro';

// Breadcrumb Schema
import { generateBreadcrumbSchema } from '../utils/breadcrumb-schema';

// CSSをインポート
import '../styles/pages/homepage.css';

// SEOデータと構造化データをJSONファイルからインポート
import indexData from './_index.json';

// 型安全なSEOデータ定義（Astroネイティブ）
interface SEOData {
  title: string;
  description: string;
  keywords: string[];
  pageType: 'website' | 'article';
  image?: string;
  author?: string;
  lang?: 'id' | 'ja'; // 言語設定を追加（BaseLayoutのPropsと一致）
}

const seoData: SEOData = indexData.seoData as SEOData;

// Homepage用のBreadcrumb Schema生成
const breadcrumbSchema = generateBreadcrumbSchema({
  items: [{ title: 'Home', url: '/', isActive: true }],
  siteUrl: String(Astro.site || 'https://gorakudo.org'),
});

// ホームページ固有のFAQ構造化データ
const faqSchema = {
  '@context': 'https://schema.org',
  '@type': 'FAQPage',
  mainEntity: indexData.homepageSpecificData.faq.map(
    faq =>
      ({
        '@type': 'Question',
        name: faq.question,
        acceptedAnswer: {
          '@type': 'Answer',
          text: faq.answer,
        },
      }) as const
  ),
} as const;
---

<BaseLayout
  title={seoData.title}
  description={seoData.description}
  keywords={seoData.keywords}
  pageType={seoData.pageType}
  lang={seoData.lang}
  breadcrumbSchema={breadcrumbSchema}
  faqSchema={faqSchema}
>
  <!-- 2025年SEO最適化: 技術的SEO要素 -->
  <link rel='canonical' href='https://gorakudo.org/' />
  <meta
    name='robots'
    content='index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1'
  />
  <meta
    name='googlebot'
    content='index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1'
  />
  <meta
    name='bingbot'
    content='index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1'
  />

  <!-- パフォーマンス最適化 -->
  <link rel='preconnect' href='https://fonts.googleapis.com' />
  <link rel='preconnect' href='https://fonts.gstatic.com' crossorigin />
  <link rel='dns-prefetch' href='https://discord.gg' />
  <link rel='dns-prefetch' href='https://github.com' />
  <link rel='dns-prefetch' href='https://www.youtube.com' />

  <!-- 重要なリソースのプリロード -->
  <!-- FullDC Logo.webp はSEOメタデータでのみ使用されるため、preloadを削除 -->

  <!-- セキュリティヘッダー -->
  <meta http-equiv='X-Content-Type-Options' content='nosniff' />
  <meta http-equiv='X-XSS-Protection' content='1; mode=block' />
  <meta
    http-equiv='Referrer-Policy'
    content='strict-origin-when-cross-origin'
  />

  <!-- Main Content -->
  <main
    class='main-content'
    style='background: transparent;'
    transition:name='main-content'
    role='main'
    aria-label='Konten utama GoRakuDo'
  >
    <!-- Hero Section -->
    <Hero
      missionId='mission'
      titleLine1={indexData.homepageSpecificData.heroTitle.line1}
      titleLine2={indexData.homepageSpecificData.heroTitle.line2}
    />

    <!-- Mission Section -->
    <MissionSection />

    <!-- Features Section -->
    <FeaturesSection />

    <!-- Documentation Preview Section -->
    <DocumentationPreviewSection />
  </main>

  <!-- Enhanced wave animation is now handled by WaveAnimation component -->
  <!-- <script fetchpriority="auto" is:inline src="/core/hompage-script.js"></script> -->

  <!-- 2025年SEO最適化: パフォーマンス最適化されたスクリプト -->
  <script>
    // 2025年SEO最適化: パフォーマンス監視
    if ('performance' in window && 'mark' in performance) {
      performance.mark('page-start');
    }

    // Stars animation is now integrated into WaveAnimation.astro
    // No separate import needed
    console.log('🎬 Animation modules integrated into WaveAnimation component');

    // 2025年SEO最適化: 最適化されたヒーローアニメーション
    const initHeroAnimation = () => {
      const heroContent = document.querySelector('#hero-content');
      if (heroContent) {
        // リクエストアニメーションフレームを使用してパフォーマンス向上
        requestAnimationFrame(() => {
          heroContent.classList.remove(
            'opacity-0',
            'translate-y-16',
            'scale-80',
            'blur-md'
          );
          console.log('✨ Hero content revealed smoothly');
        });
      }
    };

    // 2025年SEO最適化: 最適化されたイベントリスナー
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => {
        setTimeout(initHeroAnimation, 200);
      });
    } else {
      setTimeout(initHeroAnimation, 200);
    }

    // Global function cleanup - following Astro's static-first philosophy
    (window as any).goToPosts = function () {
      window.location.href = '/docs';
    };

    // 2025年SEO最適化: Core Web Vitals監視
    if ('web-vital' in window) {
      // Web Vitals monitoring would be implemented here
      console.log('📊 Core Web Vitals monitoring enabled');
    }
  </script>

  <!-- 2025年SEO最適化: 最適化されたIntersection Observer -->
  <script>
    // 2025年SEO最適化: パフォーマンス最適化されたIntersection Observer
    const initLazyLoading = () => {
      const lazyElements = document.querySelectorAll('[data-lazy]');

      if (lazyElements.length === 0) return;

      // 2025年SEO最適化: 最適化された設定
      const lazyObserver = new IntersectionObserver(
        entries => {
          entries.forEach((entry, index) => {
            if (entry.isIntersecting) {
              // 2025年SEO最適化: バッチ処理でパフォーマンス向上
              requestAnimationFrame(() => {
                const delay = Math.min(index * 100, 500); // 最大500msに制限

                setTimeout(() => {
                  entry.target.classList.add('loaded');
                  lazyObserver.unobserve(entry.target);
                }, delay);
              });
            }
          });
        },
        {
          // 2025年SEO最適化: 最適化された設定
          rootMargin: '100px 0px -5% 0px', // より早いトリガー
          threshold: [0.05, 0.1], // 複数の閾値でより柔軟な検知
        }
      );

      // 2025年SEO最適化: バッチ処理でオブザーバー登録
      lazyElements.forEach(el => lazyObserver.observe(el));
    };

    // 2025年SEO最適化: 最適化された初期化
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initLazyLoading);
    } else {
      initLazyLoading();
    }

    // 2025年SEO最適化: 最適化されたService Worker
    if ('serviceWorker' in navigator) {
      // 2025年SEO最適化: 最適化された初期化タイミング
      const initServiceWorker = () => {
        // Opt-in only: enable by setting localStorage.setItem('enable-sw','true')
        const enableSW = localStorage.getItem('enable-sw') === 'true';

        if (enableSW) {
          navigator.serviceWorker
            .register('/sw.js', {
              // 2025年SEO最適化: 最適化された設定
              scope: '/',
              updateViaCache: 'none', // 常に最新版を取得
            })
            .then(registration => {
              console.log('🔧 Service Worker registered:', registration.scope);

              // 2025年SEO最適化: 最適化された更新チェック
              registration.addEventListener('updatefound', () => {
                const installing = registration.installing;
                if (!installing) return;

                installing.addEventListener('statechange', () => {
                  if (installing.state === 'installed') {
                    if (navigator.serviceWorker.controller) {
                      console.log('🔄 New Service Worker available');
                      // 2025年SEO最適化: 自動更新の提案
                      if (
                        confirm(
                          '新しいバージョンが利用可能です。更新しますか？'
                        )
                      ) {
                        window.location.reload();
                      }
                    } else {
                      console.log('✅ Service Worker installed');
                    }
                  }
                });
              });
            })
            .catch(error => {
              console.log(
                '⚠️ Service Worker registration failed:',
                error?.message || error
              );
            });
        } else {
          // Disabled by default to avoid GH Pages cache/stale-content issues
          console.log(
            "🔧 Service Worker disabled (enable via localStorage 'enable-sw' = 'true')"
          );
        }
      };

      // 2025年SEO最適化: 最適化された初期化タイミング
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initServiceWorker);
      } else {
        initServiceWorker();
      }
    }
  </script>
</BaseLayout>
