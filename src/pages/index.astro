---
import BaseLayout from '../layouts/BaseLayout.astro';

// Homepage specific components
import Hero from '../components/homepage/hero.astro';
import MissionSection from '../components/homepage/MissionSection.astro';
import InvitationModal from '../components/common/InvitationModal.vue';
import FeaturesSection from '../components/homepage/FeaturesSection.astro';
import DocumentationPreviewSection from '../components/homepage/DocumentationPreviewSection.astro';

// CSSをインポート
import '../styles/pages/homepage.css';

// 型安全なSEOデータ定義（Astroネイティブ）
interface SEOData {
  title: string;
  description: string;
  keywords: string[];
  pageType: 'website' | 'article';
  image?: string;
  author?: string;
  lang?: 'id' | 'ja'; // 言語設定を追加（BaseLayoutのPropsと一致）
}

const seoData: SEOData = {
  title: 'GoRakuDo - Komunitas Immersion Bahasa Jepang',
  description:
    'Komunitas immersion bahasa Jepang terbesar di Indonesia. Belajar bahasa Jepang dengan metode immersion yang efektif bersama ribuan pembelajar',
  keywords: [
    'immersion',
    'bahasa jepang',
    'otodidak bahasa jepang',
    'indonesia',
  ],
  pageType: 'website',
  // デフォルト画像を使用（UnifiedSEOで設定済み: /img/FullDC Logo.webp）
  author: 'GoRakuDo Team',
  lang: 'id', // インドネシア語を明示的に指定（デフォルトは'id'だが、明示的に設定）
};
---

<BaseLayout
  title={seoData.title}
  description={seoData.description}
  keywords={seoData.keywords}
  pageType={seoData.pageType}
  lang={seoData.lang}
>
  <!-- Main Content -->
  <main
    class='main-content'
    role='main'
    style='background: transparent;'
    transition:name='main-content'
  >
    <!-- Hero Section -->
    <Hero
      missionId='mission'
      invitationModalId='invitationModal'
      titleLine1='Belajar Secara Alami,'
      titleLine2='Kuasai Layaknya Penutur Asli.'
    />

    <!-- Mission Section -->
    <MissionSection />

    <!-- Features Section -->
    <FeaturesSection />

    <!-- Documentation Preview Section -->
    <DocumentationPreviewSection />
  </main>

  <!-- Invitation Modal - Load only when needed -->
  <InvitationModal client:idle />

  <!-- Enhanced wave animation is now handled by WaveAnimation component -->
  <!-- <script fetchpriority="auto" is:inline src="/core/hompage-script.js"></script> -->

  <!-- Animation Modules Integration -->
  <script>
    // Stars animation is now integrated into WaveAnimation.astro
    // No separate import needed
    console.log('🎬 Animation modules integrated into WaveAnimation component');

    // Trigger hero animation after page loads
    window.addEventListener('load', () => {
      setTimeout(() => {
        const heroContent = document.querySelector('#hero-content');
        if (heroContent) {
          heroContent.classList.remove(
            'opacity-0',
            'translate-y-16',
            'scale-80',
            'blur-md'
          );
          console.log('✨ Hero content revealed smoothly');
        }
      }, 200); // Coordinate with hero component timing
    });
  </script>

  <!-- Performance monitoring removed -->
  <script>
    // Enhanced Intersection Observer with staggered animation
    const lazyElements = document.querySelectorAll('[data-lazy]');

    // Create observer with optimized settings
    const lazyObserver = new IntersectionObserver(
      entries => {
        entries.forEach((entry, index) => {
          if (entry.isIntersecting) {
            // Staggered animation with progressive delay
            const delay = index * 150; // 150ms delay between each section

            setTimeout(() => {
              entry.target.classList.add('loaded');
              lazyObserver.unobserve(entry.target);
            }, delay);
          }
        });
      },
      {
        // Optimize intersection detection
        rootMargin: '50px 0px -10% 0px', // Start animation slightly before element is fully visible
        threshold: 0.1, // Trigger when 10% of element is visible
      }
    );

    // Observe all lazy elements
    lazyElements.forEach(el => lazyObserver.observe(el));

    // Service Worker registration for caching (if available)
    if ('serviceWorker' in navigator) {
      window.addEventListener('load', () => {
        // Opt-in only: enable by setting localStorage.setItem('enable-sw','true')
        const enableSW = localStorage.getItem('enable-sw') === 'true';

        if (enableSW) {
          navigator.serviceWorker
            .register('/sw.js')
            .then(registration => {
              console.log('🔧 Service Worker registered:', registration.scope);

              // Check for updates
              registration.addEventListener('updatefound', () => {
                const installing = registration.installing;
                if (!installing) return;
                installing.addEventListener('statechange', () => {
                  if (
                    installing.state === 'installed' &&
                    navigator.serviceWorker.controller
                  ) {
                    console.log('🔄 New Service Worker available');
                  }
                });
              });
            })
            .catch(error => {
              console.log(
                '⚠️ Service Worker registration failed:',
                error?.message || error
              );
            });
        } else {
          // Disabled by default to avoid GH Pages cache/stale-content issues
          console.log(
            "🔧 Service Worker disabled (enable via localStorage 'enable-sw' = 'true')"
          );
        }
      });
    }
  </script>
</BaseLayout>
