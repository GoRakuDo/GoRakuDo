---
// ========== IMPORTS ==========
import BaseLayout from '../layouts/BaseLayout.astro';
import Hero from '../components/homepage/hero.astro';
import MissionSection from '../components/homepage/MissionSection.astro';
import FeaturesSection from '../components/homepage/FeaturesSection.astro';
import DocumentationPreviewSection from '../components/homepage/DocumentationPreviewSection.astro';
import { generateBreadcrumbSchema } from '../utils/breadcrumb-schema';
import indexData from '../data/seo/index.json';
import '../styles/pages/homepage.css';

// ========== SEO DATA ==========
interface SEOData {
  title: string;
  description: string;
  keywords: string[];
  pageType: 'website' | 'article';
  image?: string;
  author?: string;
  lang?: 'id' | 'ja';
}

const seoData: SEOData = indexData.seoData as SEOData;

// ========== STRUCTURED DATA ==========
const breadcrumbSchema = generateBreadcrumbSchema({
  items: [{ title: 'Home', url: '/', isActive: true }],
  siteUrl: String(Astro.site || 'https://gorakudo.org'),
});

const faqSchema = {
  '@context': 'https://schema.org' as const,
  '@type': 'FAQPage' as const,
  mainEntity: indexData.homepageSpecificData.faq.map(faq => ({
    '@type': 'Question' as const,
    name: faq.question,
    acceptedAnswer: {
      '@type': 'Answer' as const,
      text: faq.answer,
    },
  })),
};
---

<BaseLayout
  title={seoData.title}
  description={seoData.description}
  keywords={seoData.keywords}
  pageType={seoData.pageType}
  lang={seoData.lang}
  breadcrumbSchema={breadcrumbSchema}
  faqSchema={faqSchema}
>
  <!-- Main Content -->
  <main
    class='main-content'
    style='background: transparent;'
    transition:name='main-content'
    role='main'
    aria-label='Konten utama GoRakuDo'
  >
    <!-- Hero Section -->
    <Hero
      missionId='mission'
      titleLine1={indexData.homepageSpecificData.heroTitle.line1}
      titleLine2={indexData.homepageSpecificData.heroTitle.line2}
    />

    <!-- Mission Section -->
    <MissionSection />

    <!-- Features Section -->
    <FeaturesSection />

    <!-- Documentation Preview Section -->
    <DocumentationPreviewSection />
  </main>

  <!-- ========== SCRIPTS ========== -->
  <script>
    // Performance monitoring
    if ('performance' in window && 'mark' in performance) {
      performance.mark('page-start');
    }

    // Hero animation
    const initHeroAnimation = () => {
      const heroContent = document.querySelector('#hero-content');
      if (heroContent) {
        requestAnimationFrame(() => {
          heroContent.classList.remove(
            'opacity-0',
            'translate-y-16',
            'scale-80',
            'blur-md'
          );
        });
      }
    };

    // Global navigation
    (window as any).goToPosts = () => (window.location.href = '/docs');

    // Initialize on DOM ready
    const init = () => {
      setTimeout(initHeroAnimation, 200);
    };

    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', init);
    } else {
      init();
    }
  </script>

  <script>
    // Lazy loading
    const initLazyLoading = () => {
      const lazyElements = document.querySelectorAll('[data-lazy]');
      if (lazyElements.length === 0) return;

      const observer = new IntersectionObserver(
        entries => {
          entries.forEach((entry, index) => {
            if (entry.isIntersecting) {
              requestAnimationFrame(() => {
                const delay = Math.min(index * 100, 500);
                setTimeout(() => {
                  entry.target.classList.add('loaded');
                  observer.unobserve(entry.target);
                }, delay);
              });
            }
          });
        },
        { rootMargin: '100px 0px -5% 0px', threshold: [0.05, 0.1] }
      );

      lazyElements.forEach(el => observer.observe(el));
    };

    // Service Worker
    const initServiceWorker = () => {
      const enableSW = localStorage.getItem('enable-sw') === 'true';
      if (!enableSW) return;

      navigator.serviceWorker
        .register('/sw.js', { scope: '/', updateViaCache: 'none' })
        .then(registration => {
          registration.addEventListener('updatefound', () => {
            const installing = registration.installing;
            if (!installing) return;

            installing.addEventListener('statechange', () => {
              if (
                installing.state === 'installed' &&
                navigator.serviceWorker.controller
              ) {
                if (confirm('新しいバージョンが利用可能です。更新しますか？')) {
                  window.location.reload();
                }
              }
            });
          });
        })
        .catch(error =>
          console.log('Service Worker registration failed:', error)
        );
    };

    // Initialize
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => {
        initLazyLoading();
        if ('serviceWorker' in navigator) initServiceWorker();
      });
    } else {
      initLazyLoading();
      if ('serviceWorker' in navigator) initServiceWorker();
    }
  </script>
</BaseLayout>
