---
import BaseLayout from '../../layouts/BaseLayout.astro';
import ToolsGridSection from '../../components/tools/Tools-GridSection.astro';

// Breadcrumb Schema
import { generateBreadcrumbSchema } from '../../utils/breadcrumb-schema';

// Import CSS
import '../../styles/pages/tools/tools-index.css';

// Import data
import toolsData from '../../data/tools.json';

// ========== TYPE DEFINITIONS ==========
interface Tool {
  readonly id: string;
  readonly name: string;
  readonly description: string;
  readonly iconUrl: string;
  readonly color?: string;
  readonly link: string;
}

// Tools data - JSONファイルから読み込み
const tools: Tool[] = toolsData as Tool[];

// ========== TOOLS HEADER CONSTANTS & CONFIGURATION ==========
const STATS_CONFIG = {
  tools: {
    label: 'Tools Terpilih',
    suffix: '+',
  },
  free: {
    label: 'Gratis',
    value: '100%',
  },
  access: {
    label: 'Akses',
    value: '24/7',
  },
} as const;

const TITLE_CONFIG = {
  main: 'Tools & Aplikasi',
  accent: 'Pembelajaran Bahasa Jepang',
} as const;

const DESCRIPTION =
  'Pilih tool yang sesuai dengan tahap pembelajaran dan kebutuhan Anda. Setiap tool telah dipilih berdasarkan efektivitas dan kemudahan penggunaan.';

// ========== UTILITY FUNCTIONS ==========
const getToolsCount = (tools: Tool[]): number => tools.length;

const getStatsData = (toolsCount: number) => [
  {
    number: `${toolsCount}${STATS_CONFIG.tools.suffix}`,
    label: STATS_CONFIG.tools.label,
  },
  {
    number: STATS_CONFIG.free.value,
    label: STATS_CONFIG.free.label,
  },
  {
    number: STATS_CONFIG.access.value,
    label: STATS_CONFIG.access.label,
  },
];

// ========== OPTIMIZED DATA PROCESSING ==========
// メイン処理 - 一度だけ計算
const toolsCount = getToolsCount(tools);
const statsData = getStatsData(toolsCount);

// SEO data - Astroネイティブアプローチ（設定ファイル不要）
const seoData = {
  title: 'Alat Belajar Bahasa Jepang - GoRakuDo',
  description:
    'Alat bantu pembelajaran bahasa Jepang yang efektif untuk memperoleh kemahiran berbahasa Jepang. Utilitas pembelajaran terbaik di Indonesia',
  keywords: [
    'alat',
    'bantu',
    'pembelajaran',
    'bahasa',
    'jepang',
    'belajar',
    'efektif',
    'kemahiran',
    'utilitas',
    'learning',
  ],
  pageType: 'website' as const,
};

// Tools page用のBreadcrumb Schema生成
const breadcrumbSchema = generateBreadcrumbSchema({
  items: [
    { title: 'Home', url: '/', isActive: false },
    { title: 'Tools', url: '/tools', isActive: true },
  ],
  siteUrl: String(Astro.site || 'https://gorakudo.org'),
});
---

<BaseLayout
  title={seoData.title}
  description={seoData.description}
  keywords={seoData.keywords}
  pageType={seoData.pageType}
  lang='id'
  breadcrumbSchema={breadcrumbSchema}
>
  <!-- Astro Native Resource Preloading (0 JavaScript) -->
  <link rel='prefetch' href='/tools/anki' fetchpriority='low' />
  <link rel='prefetch' href='/tools/yomitan' fetchpriority='low' />
  <link rel='prefetch' href='/tools/migaku' fetchpriority='low' />
  <!-- Main Content -->
  <main
    class='main-content min-h-screen tools-layout-optimized'
    role='main'
    transition:name='main-content'
    aria-label='Japanese learning tools and applications'
  >
    <!-- Tools Header Section -->
    <section
      class='tools-header-section'
      aria-labelledby='tools-header-title'
      role='banner'
      transition:name='tools-header'
      itemscope
      itemtype='https://schema.org/WebPageElement'
    >
      <div class='tools-header-container'>
        <!-- Main Content -->
        <div class='tools-header-content'>
          <header class='tools-header-main'>
            <h2
              class='tools-header-title'
              id='tools-header-title'
              itemprop='headline'
            >
              <span class='tools-title-main'>{TITLE_CONFIG.main}</span>
              <span class='tools-title-accent'>{TITLE_CONFIG.accent}</span>
            </h2>

            <p class='tools-header-description' itemprop='description'>
              {DESCRIPTION}
            </p>
          </header>

          <!-- Stats Section -->
          <div
            class='tools-header-stats'
            role='region'
            aria-label='Tools statistics'
          >
            {
              statsData.map((stat, index) => (
                <>
                  <div
                    class='tools-stat-item'
                    itemprop='mainEntity'
                    itemscope
                    itemtype='https://schema.org/QuantitativeValue'
                  >
                    <span class='tools-stat-number' itemprop='value'>
                      {stat.number}
                    </span>
                    <span class='tools-stat-label' itemprop='name'>
                      {stat.label}
                    </span>
                  </div>
                  {index < statsData.length - 1 && (
                    <div class='tools-stat-divider' aria-hidden='true' />
                  )}
                </>
              ))
            }
          </div>
        </div>
      </div>
    </section>

    <!-- Tools Grid Section - 統合されたコンポーネント -->
    <ToolsGridSection tools={tools} />
  </main>
</BaseLayout>

<script>
  // ========== ASTRO NATIVE APPROACH (Minimal JavaScript) ==========
  // Performance-optimized with CSS-first approach

  // Minimal loading state management (CSS handles most animations)
  document.addEventListener('DOMContentLoaded', function () {
    // Apply page load animations with performance monitoring
    const mainContent = document.querySelector('.main-content');
    if (mainContent) {
      mainContent.classList.add('page-load-fade-in');
    }

    // Apply staggered animations to tool cards using CSS custom properties
    const toolCards = document.querySelectorAll('.tool-card');
    toolCards.forEach((card, index) => {
      (card as HTMLElement).style.setProperty(
        '--stagger-delay',
        `${index * 0.1}s`
      );
      card.classList.add('stagger-animation');
    });

    console.log('✅ Astro native loading states applied');
  });

  // Enhanced micro-interactions for better feedback
  document.addEventListener('DOMContentLoaded', function () {
    // Add micro-interactions ONLY to tools page elements (avoid navbar conflicts)
    const toolsPageElements = document.querySelectorAll(`
      .tool-card,
      .tools-section a,
      .tools-section button,
      .main-content a:not([href="/"]),
      .main-content button:not(.get-started-btn):not(.mobile-menu-btn)
    `);
    toolsPageElements.forEach(element => {
      element.classList.add('micro-interaction-scale');
    });

    // Tool card interactions simplified (keyboard navigation removed)

    console.log(
      '✅ Astro native micro-interactions and scroll reveals initialized'
    );
  });

  // REDESIGNED tool card interaction system
  document.addEventListener('DOMContentLoaded', () => {
    const toolCards = document.querySelectorAll('.tool-card');

    toolCards.forEach(card => {
      // Click/Tap feedback for all devices
      card.addEventListener('click', e => {
        e.preventDefault();

        // Add visual feedback
        card.classList.add('is-interacting');

        // Navigate after animation
        setTimeout(() => {
          card.classList.remove('is-interacting');
          window.location.href = (card as HTMLAnchorElement).href;
        }, 150);
      });

      // Click interaction only (keyboard navigation removed)
    });
  });

  // ========== TOOLS HEADER STATS ANIMATION ==========
  // パフォーマンス最適化: 統計アニメーション
  function optimizeStatsAnimation() {
    const statsItems = document.querySelectorAll(
      '.tools-stat-item'
    ) as NodeListOf<HTMLElement>;

    if ('IntersectionObserver' in window) {
      const statsObserver = new IntersectionObserver(
        entries => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              const element = entry.target as HTMLElement;
              element.style.opacity = '1';
              element.style.transform = 'translateY(0)';
              statsObserver.unobserve(entry.target);
            }
          });
        },
        {
          threshold: 0.1,
          rootMargin: '0px 0px -50px 0px',
        }
      );

      statsItems.forEach(item => {
        item.style.opacity = '0';
        item.style.transform = 'translateY(20px)';
        item.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
        statsObserver.observe(item);
      });
    }
  }

  // DOM読み込み完了後に実行
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', optimizeStatsAnimation);
  } else {
    optimizeStatsAnimation();
  }
</script>
