---
// ========== IMPORTS ==========
import BaseLayout from '../../layouts/BaseLayout.astro';
import ToolsGridSection from '../../components/tools/Tools-GridSection.astro';
import { CldImage } from 'astro-cloudinary';
import { generateBreadcrumbSchema } from '../../utils/breadcrumb-schema';
import toolsData from '../../data/tools.json';
import toolsSeoData from '../../data/seo/pages/tools.json';
import '../../styles/pages/tools/tools-index.css';

// ========== TYPE DEFINITIONS ==========
interface Tool {
  readonly id: string;
  readonly name: string;
  readonly description: string;
  readonly iconUrl: string;
  readonly color?: string;
  readonly link: string;
}

// ========== DATA & CONFIGURATION ==========
const tools: Tool[] = toolsData as Tool[];

const STATS_CONFIG = {
  tools: { label: 'Tools Terpilih', suffix: '+' },
  free: { label: 'Gratis', value: '100%' },
  access: { label: 'Akses', value: '24/7' },
} as const;

// ========== UTILITY FUNCTIONS ==========
const getStatsData = (toolsCount: number) => [
  {
    number: `${toolsCount}${STATS_CONFIG.tools.suffix}`,
    label: STATS_CONFIG.tools.label,
  },
  { number: STATS_CONFIG.free.value, label: STATS_CONFIG.free.label },
  { number: STATS_CONFIG.access.value, label: STATS_CONFIG.access.label },
];

// ========== PROCESSED DATA ==========
const toolsCount = tools.length;
const statsData = getStatsData(toolsCount);

// ========== IMAGE CONFIG ==========
const heroImageId = 'gorakudo-tools-tutorials_exzci4';
const heroImageUrl = `https://res.cloudinary.com/dbvd1cm7u/image/upload/${heroImageId}`;

// ========== SEO DATA WITH TEMPLATE REPLACEMENT ==========
// テンプレート変数置き換え関数
const replaceTemplateVars = (
  template: any,
  vars: Record<string, string>
): any => {
  if (typeof template === 'string') {
    return template.replace(
      /\{\{(\w+)\}\}/g,
      (_, key) => vars[key] || template
    );
  }
  if (Array.isArray(template))
    return template.map(item => replaceTemplateVars(item, vars));
  if (template && typeof template === 'object') {
    const result: any = {};
    for (const [key, value] of Object.entries(template)) {
      result[key] = replaceTemplateVars(value, vars);
    }
    return result;
  }
  return template;
};

const seoData = toolsSeoData.seoData;

const templateVars = {
  seoTitle: seoData.title,
  seoDescription: seoData.description,
};

const structuredData = replaceTemplateVars(
  toolsSeoData.structuredData,
  templateVars
);

// ========== STRUCTURED DATA ==========
const breadcrumbSchema = generateBreadcrumbSchema({
  items: toolsSeoData.breadcrumbData.items.map(item => ({
    title: item.title,
    url: item.url,
    isActive: item.isActive,
  })),
  siteUrl: String(Astro.site || 'https://gorakudo.org'),
});

const collectionPageSchema = {
  ...structuredData.collectionPage,
  url: String(Astro.site || 'https://gorakudo.org') + Astro.url.pathname,
};

const websiteSchema = {
  ...structuredData.website,
  url: String(Astro.site || 'https://gorakudo.org') + Astro.url.pathname,
};

// FAQ Schema is now handled by UnifiedSEO via toolsSeoData.structuredData.faq
---

<BaseLayout
  title={seoData.title}
  description={seoData.description}
  pageType={seoData.pageType as 'article' | 'website'}
  lang='id'
  ogImage={heroImageUrl}
  breadcrumbSchema={breadcrumbSchema}
  faqSchema={structuredData.faq}
  collectionPageSchema={collectionPageSchema}
  websiteSchema={websiteSchema}
>
  <!-- Main Content -->
  <main
    class='main-content min-h-screen tools-layout-optimized'
    role='main'
    transition:name='main-content'
    aria-label='Japanese learning tools and applications'
  >
    <!-- Tools Header Section -->
    <section
      class='tools-header-section'
      aria-labelledby='tools-header-title'
      role='banner'
      transition:name='tools-header'
      itemscope
      itemtype='https://schema.org/WebPageElement'
    >
      <div class='tools-header-container'>
        <!-- Main Content -->
        <div class='tools-header-content'>
          <!-- Left Content (Title + Description + Stats) -->
          <div class='tools-header-left'>
            <header class='tools-header-main'>
              <h2
                class='tools-header-title'
                id='tools-header-title'
                itemprop='headline'
              >
                Tutorial Tools & Aplikasi<wbr /> dalam Belajar Bahasa Jepang
              </h2>
            </header>

            <!-- Description and Stats Group -->
            <div class='tools-header-info-group'>
              <p class='tools-header-description' itemprop='description'>
                Tutorial berdasarkan Aplikasi dan Tools yang membantu kalian
                dengan mudah dalam Otodidak Bahasa Japang. Setiap tool telah
                dipilih berdasarkan efektivitas dan kemudahan penggunaan.
              </p>

              <!-- Stats Section -->
              <div
                class='tools-header-stats'
                role='region'
                aria-label='Tools statistics'
              >
                {
                  statsData.map((stat, index) => (
                    <>
                      <div
                        class='tools-stat-item'
                        itemprop='mainEntity'
                        itemscope
                        itemtype='https://schema.org/QuantitativeValue'
                      >
                        <span class='tools-stat-number' itemprop='value'>
                          {stat.number}
                        </span>
                        <span class='tools-stat-label' itemprop='name'>
                          {stat.label}
                        </span>
                      </div>
                      {index < statsData.length - 1 && (
                        <div class='tools-stat-divider' aria-hidden='true' />
                      )}
                    </>
                  ))
                }
              </div>
            </div>
          </div>

          <!-- Right Content (Hero Image) -->
          <div class='tools-header-right'>
            <div class='tools-hero-image-container'>
              <CldImage
                src={heroImageId}
                alt='Japanese Learning Tools and Applications - GoRakuDo'
                class='tools-hero-image'
                width={350}
                quality='auto'
                loading='eager'
                fetchpriority='high'
                sizes='(max-width: 640px) 300px, (max-width: 768px) 350px, (max-width: 1024px) 400px, 450px'
              />
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Tools Grid Section - 統合されたコンポーネント -->
    <ToolsGridSection tools={tools} />
  </main>
</BaseLayout>

<!-- ========== SCRIPTS ========== -->
<script>
  // Page animations
  const initPageAnimations = () => {
    const mainContent = document.querySelector('.main-content');
    if (mainContent) mainContent.classList.add('page-load-fade-in');

    const toolCards = document.querySelectorAll('.tool-card');
    toolCards.forEach((card, index) => {
      (card as HTMLElement).style.setProperty(
        '--stagger-delay',
        `${index * 0.1}s`
      );
      card.classList.add('stagger-animation');
    });
  };

  // Micro-interactions
  const initMicroInteractions = () => {
    const elements = document.querySelectorAll(`
        .tool-card,
        .tools-section a,
        .tools-section button,
        .main-content a:not([href="/"]),
        .main-content button:not(.get-started-btn):not(.mobile-menu-btn)
      `);
    elements.forEach(element =>
      element.classList.add('micro-interaction-scale')
    );
  };

  // Tool card interactions
  const initToolCardInteractions = () => {
    const toolCards = document.querySelectorAll('.tool-card');
    toolCards.forEach(card => {
      card.addEventListener('click', e => {
        e.preventDefault();
        card.classList.add('is-interacting');
        setTimeout(() => {
          card.classList.remove('is-interacting');
          window.location.href = (card as HTMLAnchorElement).href;
        }, 150);
      });
    });
  };

  // Stats animation
  const initStatsAnimation = () => {
    const statsItems = document.querySelectorAll(
      '.tools-stat-item'
    ) as NodeListOf<HTMLElement>;
    if (!('IntersectionObserver' in window)) return;

    const observer = new IntersectionObserver(
      entries => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const element = entry.target as HTMLElement;
            element.style.opacity = '1';
            element.style.transform = 'translateY(0)';
            observer.unobserve(entry.target);
          }
        });
      },
      { threshold: 0.1, rootMargin: '0px 0px -50px 0px' }
    );

    statsItems.forEach(item => {
      item.style.opacity = '0';
      item.style.transform = 'translateY(20px)';
      item.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
      observer.observe(item);
    });
  };

  // Lazy loading
  const initLazyLoading = () => {
    if (!('IntersectionObserver' in window)) return;

    const observer = new IntersectionObserver(
      (entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const img = entry.target as HTMLImageElement;
            if (img.dataset.src) {
              img.src = img.dataset.src;
              img.removeAttribute('data-src');
              observer.unobserve(img);
            }
          }
        });
      },
      { rootMargin: '50px 0px', threshold: 0.01 }
    );

    document
      .querySelectorAll('img[data-src]')
      .forEach(img => observer.observe(img));
  };

  // Initialize all
  const init = () => {
    initPageAnimations();
    initMicroInteractions();
    initToolCardInteractions();
    initStatsAnimation();
    initLazyLoading();
  };

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
</script>
