---
// Import required dependencies for tool articles
import { getCollection, type CollectionEntry } from 'astro:content';

import { logger } from '../../../utils/logging/console-logger';

// Generate static paths for all tool articles
export async function getStaticPaths() {
  const posts = await getCollection('tool-articles');

  return posts.map((post: CollectionEntry<'tool-articles'>) => {
    // Extract tool name from slug (first part before first slash)
    const slugParts = post.slug.split('/');
    const toolName = slugParts[0]; // e.g., "anki" from "anki/apa-itu-anki"
    const articleSlug = slugParts.slice(1).join('/'); // remaining path

    return {
      params: { tool: toolName, slug: articleSlug },
      props: { post },
    };
  });
}

// Get the post from props with type safety
const { post } = Astro.props as { post: CollectionEntry<'tool-articles'> };

// Security: Validate and sanitize URL parameters
const params = Astro.params as { tool: string; slug: string };
const toolName = params.tool;
const articleSlug = params.slug;

// Prevent path traversal attacks
if (
  toolName?.includes('..') ||
  toolName?.includes('/') ||
  articleSlug?.includes('..') ||
  articleSlug?.includes('//')
) {
  logger.log(
    `Security: Path traversal attempt detected: ${toolName}, ${articleSlug}`,
    'warning'
  );
  return Astro.redirect('/404', 301);
}

// Validate tool name against whitelist (defense in depth)
const validTools = ['anki', 'migaku', 'yomitan'];
if (!validTools.includes(toolName)) {
  logger.log(`Security: Invalid tool name requested: ${toolName}`, 'warning');
  return Astro.redirect('/tools', 301);
}

// Sanitize slug to prevent XSS through URL manipulation
const sanitizedSlug = articleSlug?.replace(/[<>\"'&]/g, '');
if (sanitizedSlug !== articleSlug) {
  logger.log(
    `Security: XSS attempt detected in slug: ${articleSlug}`,
    'warning'
  );
  return Astro.redirect('/404', 301);
}

// Error handling pattern - redirect to 404 if post not found
if (!post) {
  logger.log(`Tool article not found: ${toolName}, ${articleSlug}`, 'warning');
  return Astro.redirect('/404', 301);
}

// Render the content
const { Content } = await post.render();

// Tag validation and error handling
const hasValidTags =
  post.data.tags && Array.isArray(post.data.tags) && post.data.tags.length > 0;
const tagValidationStatus = hasValidTags ? 'valid' : 'invalid';

// Log successful route access with validation status
console.log('‚úÖ Tool article accessed:', {
  tool: toolName,
  slug: articleSlug,
  title: post.data.title,
  tagValidationStatus: tagValidationStatus,
  timestamp: new Date().toISOString(),
});
---

<!-- Article Header -->
<header class='mb-8' role='banner'>
  <h1 class='text-3xl font-bold text-foreground mb-4 sm:text-4xl lg:text-5xl'>
    {post.data.title}
  </h1>
  <p class='text-muted-foreground text-lg mb-4'>
    {post.data.description}
  </p>
  <div
    class='flex items-center gap-4 text-muted-foreground text-sm'
    role='contentinfo'
  >
    <time datetime={post.data.publishedDate}>
      Published: {new Date(post.data.publishedDate).toLocaleDateString('id-ID')}
    </time>
    {
      hasValidTags ? (
        <nav class='flex gap-2 flex-wrap' aria-label='Article tags'>
          {post.data.tags.map(tag => (
            <span class='bg-primary/20 text-primary px-2 py-1 rounded text-xs border border-primary/30'>
              {tag}
            </span>
          ))}
        </nav>
      ) : (
        <span class='tag-warning' role='alert'>
          No tags assigned - article may not appear in tool indexes
        </span>
      )
    }
  </div>
</header>

<!-- Article Content with Error Handling -->
<main class='article-content' id='main-content' role='main'>
  {
    hasValidTags ? (
      <article>
        <Content />
      </article>
    ) : (
      <div class='fallback-content' role='alert'>
        <p class='text-warning mb-4'>
          This article is missing proper tag categorization. Content may not
          appear in tool indexes.
        </p>
        <article>
          <Content />
        </article>
      </div>
    )
  }
</main>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Performance monitoring
    console.log('üìä Article Page Performance:');
    console.log('  üéØ Article loaded successfully');
    console.log('  üè∑Ô∏è Tag validation status:', '{tagValidationStatus}');
    console.log('  üìÑ Title:', '{post.data.title}');

    // Accessibility enhancements
    const articleContent = document.querySelector('.article-content');
    if (articleContent) {
      // Add skip link for screen readers
      const skipLink = document.createElement('a');
      skipLink.href = '#main-content';
      skipLink.className =
        'sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-primary text-primary-foreground px-4 py-2 rounded z-50';
      skipLink.textContent = 'Skip to main content';
      document.body.insertBefore(skipLink, document.body.firstChild);

      // Add proper ARIA labels for images
      const images = articleContent.querySelectorAll(
        'img:not([alt])'
      ) as NodeListOf<HTMLImageElement>;
      images.forEach(img => {
        img.alt = 'Article illustration';
      });

      // Validate heading hierarchy
      const headings = articleContent.querySelectorAll(
        'h1, h2, h3, h4, h5, h6'
      );
      let lastLevel = 0;
      headings.forEach(heading => {
        const level = parseInt(heading.tagName.charAt(1));
        if (level - lastLevel > 1) {
          console.warn(
            `‚ö†Ô∏è Accessibility: Heading level skipped from h${lastLevel} to h${level}`
          );
        }
        lastLevel = level;
      });

      // Basic contrast validation
      const textElements = articleContent.querySelectorAll('p, span, div');
      textElements.forEach(element => {
        const computedStyle = window.getComputedStyle(element);
        const color = computedStyle.color;
        const backgroundColor = computedStyle.backgroundColor;

        if (
          color === 'rgb(255, 255, 255)' &&
          backgroundColor === 'rgba(0, 0, 0, 0)'
        ) {
          console.log('‚úÖ Accessibility: Good contrast detected on element');
        }
      });
    }
  });
</script>
