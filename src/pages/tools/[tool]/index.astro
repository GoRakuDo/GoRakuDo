---
// ========== OPTIMIZED TOOL INDEX PAGE ==========
// Architect Optimization: Performance-first, Astro-native approach
// Purpose: Display all articles for a specific tool category with optimal performance
// File: src/pages/tools/[tool]/index.astro

// Import required dependencies
import { getCollection, type CollectionEntry } from "astro:content";
import { readdir } from "fs/promises";
import { join } from "path";
import ToolArticleLayout from "../../../layouts/ToolArticleLayout.astro";
import Breadcrumb from "../../../components/public-components/Breadcrumb.astro";
import ComponentHeader from "../../../components/tools/ComponentHeader.astro";
import type { ToolName } from "../../../utils/content/breadcrumb-utils";

// ========== STATIC PATH GENERATION ==========
// Optimized static path generation with minimal overhead
export async function getStaticPaths() {
  try {
    const toolArticlesPath = join(process.cwd(), "src/content/tool-articles");
    const entries = await readdir(toolArticlesPath, { withFileTypes: true });
    
    const validTools = ["anki", "migaku", "yomitan"];
    const toolDirectories = entries
      .filter(entry => entry.isDirectory() && validTools.includes(entry.name))
      .map(entry => entry.name);

    return toolDirectories.map(tool => ({
      params: { tool },
      props: { toolName: tool }
    }));

  } catch (error) {
    // Fallback to predefined tools if directory scan fails
    return ["anki", "migaku", "yomitan"].map(tool => ({
      params: { tool },
      props: { toolName: tool }
    }));
  }
}

// ========== COMPONENT LOGIC ==========
// Get tool parameter with validation
const { tool } = Astro.params as { tool: string };

if (!tool) {
  return Astro.redirect("/tools", 301);
}

const validTools = ["anki", "migaku", "yomitan"];
if (!validTools.includes(tool)) {
  return Astro.redirect("/tools", 301);
}

// Fetch and filter articles efficiently
const articles = await getCollection("tool-articles");
const toolArticles = articles.filter(article => 
  article.data.tags?.includes(tool)
);

const hasArticles = toolArticles.length > 0;

---

<ToolArticleLayout
  title={`${tool.charAt(0).toUpperCase() + tool.slice(1)} - GoRakuDo`}
  description={`All articles and guides for ${tool} tool`}
  lang="id">

  <!-- Component HEADER - Based on Wireframe Analysis -->
  <ComponentHeader 
    tool={tool} 
    articleCount={toolArticles.length}
  />

  <!-- Optimized Navigation -->
  <div class="tool-navigation-wrapper">
    <Breadcrumb
      currentPath={`/tools/${tool}`}
      showHome={true}
      variant="compact"
      theme="auto"
      orientation="horizontal"
      showIcons={true}
      ariaLabel="Tool navigation breadcrumb"
      className="tool-breadcrumb"
    />
  </div>

  <!-- Enhanced Main Content with Modern Layout -->
  <main class="tool-main-content">
    {hasArticles ? (
      <div class="articles-section">
        
        <!-- Optimized Articles Grid -->
        <div class="articles-grid-wireframe">
          {toolArticles.map((article, index) => {
            const articleSlug = article.slug || article.id;
            const articleTitle = article.data.title || `Article ${article.id}`;
            const articleDescription = article.data.description || "";
            const articleTags = article.data.tags || [];
            const isFeatured = index === 0;

            return (
              <div class={`article-card-wireframe ${isFeatured ? 'featured' : ''}`}>
                <!-- Visual Section -->
                <div class="card-visual-section">
                  <div class="mobile-device-mockup">
                    <div class="device-screen">
                      <div class="screen-content">
                        <div class="screen-icon">
                          <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                          </svg>
                        </div>
                        <div class="screen-text">
                          <p class="screen-title">Place your best screen here.</p>
                          <p class="screen-subtitle">Or just leave the rest of the mobile device here.</p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                
                <!-- Content Section -->
                <div class="card-content-section">
                  <div class="card-meta">
                    <span class="card-date">2019 - present</span>
                  </div>
                  <h3 class="card-title">{articleTitle}</h3>
                  <p class="card-description">{articleDescription}</p>
                  <div class="card-tags">
                    {articleTags.slice(0, 3).map((tag) => (
                      <span class="card-tag">#{tag}</span>
                    ))}
                  </div>
                  <a href={`/tools/${tool}/${articleSlug}`} class="card-cta">
                    Try it out
                    <svg class="cta-arrow" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/>
                    </svg>
                  </a>
                </div>
                
                {isFeatured && (
                  <div class="featured-badge-wireframe">
                    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"/>
                    </svg>
                    Featured
                  </div>
                )}
              </div>
            );
          })}
        </div>

      </div>
    ) : (
      <!-- Optimized Empty State -->
      <div class="empty-state">
        <div class="empty-state-content">
          <div class="empty-state-icon">
            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
            </svg>
          </div>
          <h2 class="empty-state-title">No Articles Yet</h2>
          <p class="empty-state-description">
            We're working on creating amazing content for {tool}. 
            Check back soon for comprehensive guides and tutorials!
          </p>
          <div class="empty-state-actions">
            <a href="/tools" class="empty-state-btn primary">
              <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
              </svg>
              Browse Other Tools
            </a>
            <a href="/contact" class="empty-state-btn secondary">
              <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
              </svg>
              Request Content
            </a>
          </div>
        </div>
      </div>
    )}
  </main>
</ToolArticleLayout>
