---
// ========== OPTIMIZED TOOL INDEX PAGE ==========
// Architect Optimization: Performance-first, Astro-native approach
// Purpose: Display all articles for a specific tool category with optimal performance
// File: src/pages/tools/[tool]/index.astro

// Import required dependencies
import { getCollection, type CollectionEntry } from 'astro:content';
import ArticleLayout from '../../../layouts/ArticleLayout.astro';
import ToolIdContentGrid from '../../../components/tools/Tool-IdContentGrid.astro';
import Breadcrumb from '../../../components/public-components/Breadcrumb.astro';
import ToolSearchPopover from '../../../components/tools/Tool-SearchPopover.astro';
import ToolIdHeader from '../../../components/tools/Tool-IdHeader.astro';

// Import tool-specific styles
import '../../../styles/pages/tools/[tool]/Tool-IdIndex.css';

// ========== OPTIMIZED TOOL DISCOVERY ==========
// Single function for tool discovery with caching
async function getValidToolsFromCollection() {
  try {
    const articles = await getCollection('tool-articles');
    const toolNames = new Set<string>();

    articles.forEach((article: CollectionEntry<'tool-articles'>) => {
      if (article.data.toolName) {
        toolNames.add(article.data.toolName.toLowerCase());
      }
    });

    return Array.from(toolNames).sort();
  } catch (error) {
    console.error('Failed to load tools from collection:', error);
    return [];
  }
}

// ========== STATIC PATH GENERATION ==========
export async function getStaticPaths() {
  const getValidToolsFromCollection = async () => {
    try {
      const articles = await getCollection('tool-articles');
      const toolNames = new Set<string>();

      articles.forEach((article: CollectionEntry<'tool-articles'>) => {
        if (article.data.toolName) {
          toolNames.add(article.data.toolName.toLowerCase());
        }
      });

      return Array.from(toolNames).sort();
    } catch (error) {
      console.error('Failed to load tools from collection:', error);
      return [];
    }
  };

  const validTools = await getValidToolsFromCollection();
  return validTools.length === 0
    ? []
    : validTools.map(tool => ({
        params: { tool },
        props: { toolName: tool },
      }));
}

// ========== COMPONENT LOGIC ==========
const { tool } = Astro.params as { tool: string };

// Early validation and redirect
if (!tool) return Astro.redirect('/tools', 301);

// Get tools and validate
const validTools = await getValidToolsFromCollection();
if (validTools.length === 0 || !validTools.includes(tool.toLowerCase())) {
  return Astro.redirect('/tools', 301);
}

// Fetch and filter articles
const articles = await getCollection('tool-articles');
const toolArticles = articles.filter(
  (article: CollectionEntry<'tool-articles'>) =>
    article.data.toolName?.toLowerCase() === tool.toLowerCase()
);

// ========== CENTRALIZED DATA MANAGEMENT ==========
// All data processing centralized here for maximum efficiency and maintainability

// Tool configuration mapping
const toolConfigs = {
  anki: {
    iconPath: '/icon/anki-icon-240.webp',
    description:
      'Anki adalah aplikasi flashcard yang sangat powerful untuk menghafal kosakata bahasa Jepang. Dengan sistem spaced repetition, Anki membantu Anda mengingat kata-kata dengan lebih efektif dan efisien.',
  },
  migaku: {
    iconPath: '/icon/migaku-icon-240.webp',
    description:
      'Migaku adalah platform pembelajaran bahasa Jepang yang komprehensif dengan fokus pada immersion learning. Pelajari bahasa Jepang melalui konten asli seperti anime, manga, dan drama dengan bantuan AI.',
  },
  yomitan: {
    iconPath: '/icon/yomitan-icon-240.webp',
    description:
      'Yomitan adalah browser extension yang memudahkan membaca teks bahasa Jepang. Dengan hover dictionary dan furigana generation, Yomitan membuat proses pembelajaran menjadi lebih interaktif dan menyenangkan.',
  },
} as const;

// Centralized data processing
const toolConfig = toolConfigs[
  tool.toLowerCase() as keyof typeof toolConfigs
] || {
  iconPath: '/icon/yomitan-icon-240.webp',
  description: `Comprehensive learning resources and guides for mastering ${tool}. From beginner basics to advanced techniques, everything you need to succeed.`,
};

const formattedToolName = tool.charAt(0).toUpperCase() + tool.slice(1);
const currentYear = new Date(
  articles[0]?.data.publishedDate || new Date()
).getFullYear();

// ========== PROCESSED ARTICLE DATA ==========
// Pre-process all article data for components
const processedArticles = toolArticles.map(
  (article: CollectionEntry<'tool-articles'>, index: number) => {
    // Article slug processing
    const articleSlug =
      article.slug?.split('/').slice(1).join('/') || article.id;

    // Article title processing
    const articleTitle =
      article.data.title || `Complete ${formattedToolName} Guide`;

    // Article description processing
    const articleDescription =
      article.data.description ||
      `Master ${tool} with our comprehensive guide. Learn essential techniques, best practices, and advanced tips.`;

    // Article tags processing
    const DEFAULT_TAGS = ['guide', 'tutorial'];
    const articleTags = article.data.tags?.length
      ? article.data.tags
      : [tool, ...DEFAULT_TAGS];
    const displayTags = articleTags.slice(0, 3); // Max 3 tags for display

    // Article date processing
    const DATE_LOCALE = 'id-ID';
    const publishedDate = article.data.publishedDate
      ? new Date(article.data.publishedDate).toLocaleDateString(DATE_LOCALE)
      : new Date().toLocaleDateString(DATE_LOCALE);

    // Article image processing
    const articleImage =
      article.data.featuredImage || article.data.image || null;
    const hasImage = Boolean(articleImage?.trim());

    return {
      slug: articleSlug,
      title: articleTitle,
      description: articleDescription,
      tags: displayTags,
      publishedDate,
      image: articleImage,
      hasImage,
      originalArticle: article,
      index,
    };
  }
);

// ========== HEADER DATA ==========
// Pre-processed header data
const headerData = {
  tool,
  articleCount: toolArticles.length,
  title: `Apa itu ${formattedToolName} ?`,
  description: toolConfig.description,
  iconPath: toolConfig.iconPath,
  formattedToolName,
  currentYear,
};

// ========== CONTENT GRID DATA ==========
// Pre-processed content grid data
const contentGridData = {
  hasArticles: toolArticles.length > 0,
  toolArticles: processedArticles,
  tool,
  formattedToolName,
};
---

<ArticleLayout
  title={`${formattedToolName} - GoRakuDo`}
  description={`All articles and guides for ${tool} tool`}
  lang='id'
>
  <ToolIdHeader
    slot='articles-header'
    tool={tool}
    articleCount={headerData.articleCount}
    title={headerData.title}
    description={headerData.description}
    iconPath={headerData.iconPath}
    formattedToolName={headerData.formattedToolName}
    currentYear={headerData.currentYear}
  />

  <Breadcrumb
    slot='breadcrumb'
    currentPath={`/tools/${tool}`}
    showHome={true}
    variant='compact'
    orientation='horizontal'
    showIcons={true}
    ariaLabel='Tool navigation breadcrumb'
  />

  <ToolSearchPopover
    slot='search'
    buttonStyle='rounded'
    placeholder={`Search ${formattedToolName} articles...`}
    searchAction={`/search?tool=${tool}`}
    className='tool-search-popover'
    toolFilter={tool}
  />

  <ToolIdContentGrid
    hasArticles={contentGridData.hasArticles}
    toolArticles={contentGridData.toolArticles}
    tool={contentGridData.tool}
    formattedToolName={contentGridData.formattedToolName}
  />
</ArticleLayout>
