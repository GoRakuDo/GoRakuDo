---
// ========== IMPORTS ==========
import ArticleLayout from '../../layouts/ArticleLayout.astro';
import Breadcrumb from '../../components/common/Breadcrumb.astro';
import PageHeader from '../../components/ui/PageHeader.astro';
import PostsGrid from '../../components/docs/PostsGrid.astro';
import Pagination from '../../components/common/Pagination/Pagination.astro';
import SearchPopover from '../../components/common/SearchPopover.astro';
import { getDocsPageData } from '../../utils/docs-config';
import { generateBreadcrumbSchema } from '../../utils/breadcrumb-schema';
import docsSeoData from '../../data/seo/pages/docs.json';
import '../../styles/pages/docs/docs-index.css';

// ========== QUERY PARAMETER REDIRECT ==========
const queryPage = Astro.url.searchParams.get('page');
if (queryPage && parseInt(queryPage) > 1) {
  return Astro.redirect(`/docs/page-${queryPage}`, 301);
}

// ========== GET PAGE DATA ==========
const { transformedPosts, totalPages, totalPosts, seoConfig, structuredData } =
  await getDocsPageData(1);

// ========== HEADER IMAGE CONFIG ==========
const headerImageId = 'gorakudo-docs_nmobpw';
const headerImageUrl = `https://res.cloudinary.com/dbvd1cm7u/image/upload/${headerImageId}`;

// ========== SEO DATA ==========
const seoData = {
  ...docsSeoData.seoData,
  title: docsSeoData.seoData.title,
  description: docsSeoData.seoData.description,
  keywords: docsSeoData.seoData.keywords,
  author: docsSeoData.seoData.author,
  imageSrc: headerImageUrl,
  ogImage: headerImageUrl,
  twitterImage: headerImageUrl,
  pageType: docsSeoData.seoData.pageType as 'website' | 'article',
  lang: docsSeoData.seoData.lang as 'id' | 'ja',
};

// ========== STRUCTURED DATA ==========
const breadcrumbSchema = generateBreadcrumbSchema({
  items: docsSeoData.breadcrumbData.items.map((item, index) => ({
    title: item.name,
    url: item.url,
    isActive: index === docsSeoData.breadcrumbData.items.length - 1,
  })),
  siteUrl: String(Astro.site || 'https://gorakudo.org'),
});

const faqSchema = {
  ...docsSeoData.structuredData.faq,
  '@context': 'https://schema.org' as const,
  '@type': 'FAQPage' as const,
  mainEntity: docsSeoData.structuredData.faq.mainEntity.map(item => ({
    ...item,
    '@type': 'Question' as const,
    acceptedAnswer: { ...item.acceptedAnswer, '@type': 'Answer' as const },
  })),
};

const collectionPageSchema = {
  ...docsSeoData.structuredData.collectionPage,
  mainEntity: {
    ...docsSeoData.structuredData.collectionPage.mainEntity,
    numberOfItems: totalPosts,
    itemListElement: transformedPosts.map((post, index) => ({
      '@type': 'ListItem',
      position: index + 1,
      name: post.title,
      description: post.description,
      url: post.url,
      datePublished: post.publishedDate,
      author: { '@type': 'Organization', name: 'GoRakuDo Team' },
    })),
  },
};
---

<!-- ========== UNIFIED TEMPLATE ========== -->
<ArticleLayout
  title={seoData.title}
  description={seoData.description}
  tags={seoData.keywords}
  lang={seoData.lang}
  author={seoData.author}
  publishedDate={new Date().toISOString()}
  breadcrumbSchema={breadcrumbSchema}
  collectionPageSchema={collectionPageSchema}
  faqSchema={faqSchema}
>
  <!-- ページヘッダー -->
  <PageHeader
    slot='articles-header'
    title='Dokumentasi Metodologi Immersion'
    description='Dokumentasi yang kami buat untuk membantu kalian untuk menguasai Bahasa Jepang, secara natural layaknya Penutur Asli Jepang. Yang berdasarkan "Linguistik Modern".'
    imageSrc={headerImageId}
    imageAlt='Artikel Metodologi Immersion Belajar Bahasa Jepang - GoRakuDo'
    imageWidth={350}
    loading='eager'
    fetchpriority='high'
  />

  <!-- ブレッドクラム -->
  <Breadcrumb
    slot='breadcrumb'
    currentPath='/docs'
    showHome={true}
    showIcons={true}
    ariaLabel='Navigasi breadcrumb untuk halaman dokumentasi'
  />

  <!-- 検索セクション -->
  <SearchPopover
    slot='search'
    buttonStyle='rounded'
    placeholder='Search documentation...'
    searchAction='/search'
    className='docs-search-popover'
    searchCollections='docs'
  />

  <!-- メインコンテンツ -->
  {
    totalPosts > 0 ? (
      <PostsGrid posts={transformedPosts} />
    ) : (
      <div class='empty-state'>
        <h2>Maaf, belum ada artikel yang dipublikasikan.</h2>
        <p>
          Saat ini kami sendang menyusun dokumentasi ini. Silakan Refresh F5 dan
          tunggu beberapa saat.
        </p>
      </div>
    )
  }

  <!-- ページネーション -->
  {
    totalPages > 1 && totalPosts > 0 && (
      <Pagination
        slot='pagination'
        currentPage={1}
        totalPages={totalPages}
        baseUrl='/docs'
        showPageInfo={true}
      />
    )
  }
</ArticleLayout>

<!-- ========== SCRIPTS ========== -->
<script>
  // Lazy loading
  const initLazyLoading = () => {
    if (!('IntersectionObserver' in window)) return;

    const imageObserver = new IntersectionObserver(
      (entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const img = entry.target as HTMLImageElement;
            if (img.dataset.src) {
              img.src = img.dataset.src;
              img.removeAttribute('data-src');
              observer.unobserve(img);
            }
          }
        });
      },
      { rootMargin: '50px 0px', threshold: 0.01 }
    );

    document
      .querySelectorAll('img[data-src]')
      .forEach(img => imageObserver.observe(img));
  };

  // Initialize all
  const init = () => {
    initLazyLoading();
  };

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
</script>
