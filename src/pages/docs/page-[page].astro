---
// ========== PAGINATION PAGE (SEO 2025 Optimized) ==========
import ArticleLayout from '../../layouts/ArticleLayout.astro';
import Breadcrumb from '../../components/common/Breadcrumb.astro';
import PostsHeader from '../../components/docs/PostsHeader.astro';
import PostsGrid from '../../components/docs/PostsGrid.astro';
import Pagination from '../../components/common/Pagination/Pagination.astro';
import { getDocsPageData, POSTS_PER_PAGE } from '../../utils/docs-config';
import {
  validatePageNumber,
  shouldRedirectToFirstPage,
} from '../../components/common/Pagination/pagination';

// Breadcrumb Schema
import { generateBreadcrumbSchema } from '../../utils/breadcrumb-schema';

// SEO Data
import docsSeoData from './_docs-seo.json';

// スタイルインポート
import '../../styles/pages/docs/docs-index.css';

// ========== STATIC PATH GENERATION ==========
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
  const allPosts = await getCollection(
    'docs',
    ({ data }) =>
      data.status === 'published' &&
      data.publishedDate &&
      new Date(data.publishedDate) <= new Date()
  );

  const totalPages = Math.ceil(allPosts.length / POSTS_PER_PAGE);

  return Array.from({ length: totalPages }, (_, i) => ({
    params: { page: (i + 1).toString() },
    props: {
      totalPosts: allPosts.length,
      totalPages,
    },
  }));
}

// ========== PAGE PARAMETERS & VALIDATION ==========
const { page } = Astro.params;
const { totalPosts, totalPages } = Astro.props;
const currentPage = validatePageNumber(page);

// ページ番号の検証とリダイレクト
if (currentPage === 1) {
  return Astro.redirect('/docs', 301);
}

if (shouldRedirectToFirstPage(currentPage, totalPages)) {
  return Astro.redirect(`/docs/page-${totalPages}`, 301);
}

// ========== GET PAGE DATA ==========
const { transformedPosts, seoConfig, structuredData } =
  await getDocsPageData(currentPage);

// ========== SEO DATA OPTIMIZATION ==========
// Use optimized SEO data from JSON with pagination
const seoData = {
  ...docsSeoData.seoData,
  title: `${docsSeoData.seoData.title} - Page ${currentPage}`,
  description: `${docsSeoData.seoData.description} Halaman ${currentPage} dari dokumentasi lengkap.`,
  keywords: [
    ...docsSeoData.seoData.keywords,
    `halaman ${currentPage}`,
    `page ${currentPage}`,
  ],
  author: docsSeoData.seoData.author,
  pageType: docsSeoData.seoData.pageType as 'website' | 'article',
  lang: docsSeoData.seoData.lang as 'id' | 'ja',
};

// ========== BREADCRUMB SCHEMA ==========
// Docs pagination page用のBreadcrumb Schema生成
const breadcrumbSchema = generateBreadcrumbSchema({
  items: [
    { title: 'Home', url: '/', isActive: false },
    { title: 'Documentation', url: '/docs', isActive: false },
    {
      title: `Page ${currentPage}`,
      url: `/docs/page-${currentPage}`,
      isActive: true,
    },
  ],
  siteUrl: String(Astro.site || 'https://gorakudo.org'),
});

// ========== FAQ SCHEMA ==========
// FAQ構造化データを生成
const faqSchema = {
  ...docsSeoData.structuredData.faq,
  '@context': 'https://schema.org' as const,
  '@type': 'FAQPage' as const,
  mainEntity: docsSeoData.structuredData.faq.mainEntity.map(item => ({
    ...item,
    '@type': 'Question' as const,
    acceptedAnswer: {
      ...item.acceptedAnswer,
      '@type': 'Answer' as const,
    },
  })),
};

// ========== COLLECTION PAGE SCHEMA ==========
// CollectionPage構造化データを動的に生成
const collectionPageSchema = {
  ...docsSeoData.structuredData.collectionPage,
  name: `${docsSeoData.structuredData.collectionPage.name} - Page ${currentPage}`,
  url: `/docs/page-${currentPage}`,
  mainEntity: {
    ...docsSeoData.structuredData.collectionPage.mainEntity,
    numberOfItems: transformedPosts.length,
    itemListElement: transformedPosts.map((post, index) => ({
      '@type': 'ListItem',
      position: index + 1,
      name: post.title,
      description: post.description,
      url: post.url,
      datePublished: post.publishedDate,
      author: {
        '@type': 'Organization',
        name: 'GoRakuDo Team',
      },
    })),
  },
};
---

<!-- ========== UNIFIED TEMPLATE (Same as Index) ========== -->
<ArticleLayout
  title={seoData.title}
  description={seoData.description}
  tags={seoData.keywords}
  lang={seoData.lang}
  author={seoData.author}
  publishedDate={new Date().toISOString()}
  breadcrumbSchema={breadcrumbSchema}
>
  <!-- 2025 SEO Optimization: Technical SEO -->
  <link rel='canonical' href={`${Astro.site}/docs/page-${currentPage}`} />
  <meta
    name='robots'
    content='index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1'
  />
  <meta
    name='googlebot'
    content='index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1'
  />
  <meta
    name='bingbot'
    content='index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1'
  />

  <!-- Performance Optimization -->
  <link rel='preconnect' href='https://fonts.googleapis.com' />
  <link rel='preconnect' href='https://fonts.gstatic.com' crossorigin />
  <link rel='dns-prefetch' href='//github.com' />

  <!-- Critical Resource Preloading -->
  <link rel='preload' href='/styles/pages/docs/docs-index.css' as='style' />

  <!-- Security Headers -->
  <meta http-equiv='X-Content-Type-Options' content='nosniff' />
  <meta http-equiv='X-XSS-Protection' content='1; mode=block' />

  <!-- Structured Data: CollectionPage -->
  <script
    type='application/ld+json'
    set:html={JSON.stringify(collectionPageSchema)}
  />

  <!-- Structured Data: FAQ -->
  <script type='application/ld+json' set:html={JSON.stringify(faqSchema)} />

  <!-- ページネーション用のメタタグ -->
  {
    currentPage > 1 && (
      <meta name='robots' content='noindex, follow' slot='head' />
    )
  }
  {
    currentPage < totalPages && (
      <link
        rel='next'
        href={`https://gorakudo.org/docs/page-${currentPage + 1}`}
        slot='head'
      />
    )
  }
  {
    currentPage > 1 && (
      <link
        rel='prev'
        href={
          currentPage === 2
            ? 'https://gorakudo.org/docs'
            : `https://gorakudo.org/docs/page-${currentPage - 1}`
        }
        slot='head'
      />
    )
  }

  <!-- ページヘッダー -->
  <PostsHeader
    slot='articles-header'
    title={seoData.title}
    description={seoData.description}
  />

  <!-- ブレッドクラム -->
  <Breadcrumb
    slot='breadcrumb'
    currentPath={`/docs/page-${currentPage}`}
    showHome={true}
    showIcons={true}
    ariaLabel='Navigasi breadcrumb untuk halaman dokumentasi'
  />

  <!-- 検索セクション（将来の拡張用） -->
  <div slot='search'>
    <!-- Search component can be added here if needed -->
  </div>

  <!-- メインコンテンツ -->
  {
    totalPosts > 0 ? (
      <PostsGrid posts={transformedPosts} />
    ) : (
      <div class='empty-state'>
        <h2>記事が見つかりません</h2>
        <p>
          現在、公開されている記事がありません。しばらくしてから再度お試しください。
        </p>
      </div>
    )
  }

  <!-- ページネーション -->
  {
    totalPages > 1 && totalPosts > 0 && (
      <Pagination
        slot='pagination'
        currentPage={currentPage}
        totalPages={totalPages}
        baseUrl='/docs'
        showPageInfo={true}
      />
    )
  }
</ArticleLayout>

<script>
  // ========== 2025 SEO OPTIMIZATION: PERFORMANCE MONITORING ==========
  // Core Web Vitals monitoring (simplified for 2025)
  function monitorCoreWebVitals() {
    // Basic performance monitoring without external dependencies
    if ('performance' in window && 'PerformanceObserver' in window) {
      try {
        const observer = new PerformanceObserver(list => {
          list.getEntries().forEach(entry => {
            if (entry.entryType === 'largest-contentful-paint') {
              console.log('LCP:', entry.startTime);
            } else if (entry.entryType === 'first-input') {
              const fidEntry = entry as any;
              console.log('FID:', fidEntry.processingStart - entry.startTime);
            } else if (entry.entryType === 'layout-shift') {
              const clsEntry = entry as any;
              console.log('CLS:', clsEntry.value);
            }
          });
        });

        observer.observe({
          entryTypes: [
            'largest-contentful-paint',
            'first-input',
            'layout-shift',
          ],
        });
      } catch (error) {
        console.log('Performance monitoring not available:', error);
      }
    }
  }

  // Intersection Observer for lazy loading optimization
  function optimizeLazyLoading() {
    if ('IntersectionObserver' in window) {
      const imageObserver = new IntersectionObserver(
        (entries, observer) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              const img = entry.target as HTMLImageElement;
              if (img.dataset.src) {
                img.src = img.dataset.src;
                img.removeAttribute('data-src');
                observer.unobserve(img);
              }
            }
          });
        },
        {
          rootMargin: '50px 0px',
          threshold: 0.01,
        }
      );

      document.querySelectorAll('img[data-src]').forEach(img => {
        imageObserver.observe(img);
      });
    }
  }

  // Service Worker registration for caching
  function registerServiceWorker() {
    if ('serviceWorker' in navigator) {
      window.addEventListener('load', () => {
        navigator.serviceWorker
          .register('/sw.js', {
            scope: '/',
            updateViaCache: 'none',
          })
          .then(registration => {
            console.log('SW registered: ', registration);

            // Check for updates
            registration.addEventListener('updatefound', () => {
              const newWorker = registration.installing;
              if (newWorker) {
                newWorker.addEventListener('statechange', () => {
                  if (
                    newWorker.state === 'installed' &&
                    navigator.serviceWorker.controller
                  ) {
                    // New content is available, ask user to refresh
                    if (confirm('New content available! Refresh to update?')) {
                      window.location.reload();
                    }
                  }
                });
              }
            });
          })
          .catch(registrationError => {
            console.log('SW registration failed: ', registrationError);
          });
      });
    }
  }

  // Initialize all optimizations
  document.addEventListener('DOMContentLoaded', () => {
    monitorCoreWebVitals();
    optimizeLazyLoading();
    registerServiceWorker();
  });
</script>
