---
// ========== IMPORTS ==========
import { getCollection, type CollectionEntry } from 'astro:content';
import ArticleLayout from '../../layouts/ArticleLayout.astro';
import Breadcrumb from '../../components/common/Breadcrumb.astro';
import PageHeader from '../../components/ui/PageHeader.astro';
import PostsGrid from '../../components/docs/PostsGrid.astro';
import Pagination from '../../components/common/Pagination/Pagination.astro';
import {
  calculatePagination,
  transformPostData,
  validatePageNumber,
  shouldRedirectToFirstPage,
} from '../../components/common/Pagination/pagination';
import { getVisibleDocs } from '../../utils/content/PostStatus-Filter';
import { generateBreadcrumbSchema } from '../../utils/breadcrumb-schema';
import docsSeoData from '../../data/seo/pages/docs.json';
import '../../styles/pages/docs/docs-index.css';

// ========== STATIC PATH GENERATION ==========
export async function getStaticPaths() {
  const POSTS_PER_PAGE = 6;
  const allPosts = await getCollection(
    'docs',
    ({ data }) =>
      data.status === 'published' &&
      data.publishedDate &&
      new Date(data.publishedDate) <= new Date()
  );

  const totalPages = Math.ceil(allPosts.length / POSTS_PER_PAGE);

  return Array.from({ length: totalPages }, (_, i) => ({
    params: { page: (i + 1).toString() },
    props: { totalPosts: allPosts.length, totalPages },
  }));
}

// ========== PAGE PARAMETERS & VALIDATION ==========
const { page } = Astro.params;
const { totalPosts, totalPages } = Astro.props;
const currentPage = validatePageNumber(page);

if (currentPage === 1) return Astro.redirect('/docs', 301);
if (shouldRedirectToFirstPage(currentPage, totalPages)) {
  return Astro.redirect(`/docs/page-${totalPages}`, 301);
}

// ========== GET PAGE DATA (Inlined) ==========
const POSTS_PER_PAGE = 6;

const allPosts = await getCollection('docs');
const visiblePosts = getVisibleDocs(allPosts);
const sortedPosts = visiblePosts
  .filter(
    (post: CollectionEntry<'docs'>) =>
      post.data.publishedDate && new Date(post.data.publishedDate) <= new Date()
  )
  .sort(
    (a: CollectionEntry<'docs'>, b: CollectionEntry<'docs'>) =>
      new Date(b.data.publishedDate).getTime() -
      new Date(a.data.publishedDate).getTime()
  );

const { paginatedItems } = calculatePagination(sortedPosts, {
  postsPerPage: POSTS_PER_PAGE,
  currentPage,
  totalPosts: sortedPosts.length,
});

const transformedPosts = paginatedItems.map(post =>
  transformPostData(post, '/docs')
);

// ========== SEO DATA ==========
// SEOデータはJSONファイルから読み込み

// ========== HEADER IMAGE CONFIG ==========
const headerImageId = 'gorakudo-docs_nmobpw';
const headerImageUrl = `https://res.cloudinary.com/dbvd1cm7u/image/upload/${headerImageId}`;

// ========== PROCESSED SEO DATA ==========
const seoData = {
  ...docsSeoData.seoData,
  title: `${docsSeoData.seoData.title} - Page ${currentPage}`,
  description: `${docsSeoData.seoData.description} Halaman ${currentPage} dari dokumentasi lengkap.`,
  author: docsSeoData.seoData.author,
  imageSrc: headerImageUrl,
  ogImage: headerImageUrl,
  twitterImage: headerImageUrl,
  pageType: docsSeoData.seoData.pageType as 'website' | 'article',
  lang: docsSeoData.seoData.lang as 'id' | 'ja',
};

// ========== STRUCTURED DATA ==========
const breadcrumbSchema = generateBreadcrumbSchema({
  items: [
    { title: 'Home', url: '/', isActive: false },
    { title: 'Documentation', url: '/docs', isActive: false },
    {
      title: `Page ${currentPage}`,
      url: `/docs/page-${currentPage}`,
      isActive: true,
    },
  ],
  siteUrl: String(Astro.site || 'https://gorakudo.org'),
});

const faqSchema = {
  ...docsSeoData.structuredData.faq,
  '@context': 'https://schema.org' as const,
  '@type': 'FAQPage' as const,
  mainEntity: docsSeoData.structuredData.faq.mainEntity.map(item => ({
    ...item,
    '@type': 'Question' as const,
    acceptedAnswer: { ...item.acceptedAnswer, '@type': 'Answer' as const },
  })),
};

const collectionPageSchema = {
  ...docsSeoData.structuredData.collectionPage,
  name: `${docsSeoData.structuredData.collectionPage.name} - Page ${currentPage}`,
  url: String(Astro.site || 'https://gorakudo.org') + Astro.url.pathname,
  mainEntity: {
    ...docsSeoData.structuredData.collectionPage.mainEntity,
    numberOfItems: transformedPosts.length,
    itemListElement: transformedPosts.map((post, index) => ({
      '@type': 'ListItem',
      position: index + 1,
      name: post.title,
      description: post.description,
      url: post.url,
      datePublished: post.publishedDate,
      author: { '@type': 'Organization', name: 'GoRakuDo Team' },
    })),
  },
};
---

<!-- ========== UNIFIED TEMPLATE (Same as Index) ========== -->
<ArticleLayout
  title={seoData.title}
  description={seoData.description}
  lang={seoData.lang}
  author={seoData.author}
  publishedDate={new Date().toISOString()}
  currentPage={currentPage}
  totalPages={totalPages}
  baseUrl='/docs'
  breadcrumbSchema={breadcrumbSchema}
  collectionPageSchema={collectionPageSchema}
  faqSchema={faqSchema}
>
  <!-- ページヘッダー -->
  <PageHeader
    slot='articles-header'
    title='Dokumentasi Metodologi Immersion'
    description='Dokumentasi yang kami buat untuk membantu kalian untuk menguasai Bahasa Jepang, secara natural layaknya Penutur Asli Jepang. Yang berdasarkan "Linguistik Modern".'
    imageSrc={headerImageId}
    imageAlt='Asrtikel Metodologi Immersion Belajar Bahasa Jepang - GoRakuDo'
    imageWidth={350}
    loading='eager'
    fetchpriority='high'
  />

  <!-- ブレッドクラム -->
  <Breadcrumb
    slot='breadcrumb'
    currentPath={`/docs/page-${currentPage}`}
    showHome={true}
    showIcons={true}
    ariaLabel='Navigasi breadcrumb untuk halaman dokumentasi'
  />

  <!-- 検索セクション（将来の拡張用） -->
  <div slot='search'>
    <!-- Search component can be added here if needed -->
  </div>

  <!-- メインコンテンツ -->
  {
    totalPosts > 0 ? (
      <PostsGrid posts={transformedPosts} />
    ) : (
      <div class='empty-state'>
        <h2>Maaf, belum ada artikel yang dipublikasikan.</h2>
        <p>
          Saat ini kami sendang menyusun dokumentasi ini. Silakan Refresh F5 dan
          tunggu beberapa saat.
        </p>
      </div>
    )
  }

  <!-- ページネーション -->
  {
    totalPages > 1 && totalPosts > 0 && (
      <Pagination
        slot='pagination'
        currentPage={currentPage}
        totalPages={totalPages}
        baseUrl='/docs'
        showPageInfo={true}
      />
    )
  }
</ArticleLayout>

<!-- ========== SCRIPTS ========== -->
<script>
  // Lazy loading
  const initLazyLoading = () => {
    if (!('IntersectionObserver' in window)) return;

    const imageObserver = new IntersectionObserver(
      (entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const img = entry.target as HTMLImageElement;
            if (img.dataset.src) {
              img.src = img.dataset.src;
              img.removeAttribute('data-src');
              observer.unobserve(img);
            }
          }
        });
      },
      { rootMargin: '50px 0px', threshold: 0.01 }
    );

    document
      .querySelectorAll('img[data-src]')
      .forEach(img => imageObserver.observe(img));
  };

  // Initialize all
  const init = () => {
    initLazyLoading();
  };

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
</script>
