---
// ========== IMPORTS ==========
import { getCollection, type CollectionEntry } from 'astro:content';
import PostLayout from '../../layouts/PostLayout.astro';
import Breadcrumb from '../../components/common/Breadcrumb.astro';
import { resolvePath, getCollectionInfo } from '../../utils/collections';
import { getVisibleDocs } from '../../utils/content/PostStatus-Filter';
import docsArticleTemplate from '../../data/seo/pages/docs-article-template.json';
import '../../styles/layouts/PostLayout.css';

// ========== STATIC PATH GENERATION ==========
export async function getStaticPaths() {
  const allPosts = await getCollection('docs');
  const visiblePosts = getVisibleDocs(allPosts);

  return visiblePosts.map((post: CollectionEntry<'docs'>) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

// ========== COMPONENT LOGIC ==========
const { post } = Astro.props as { post: CollectionEntry<'docs'> };
const { slug } = Astro.params;

// Redirect pagination slugs
if (slug && String(slug).startsWith('page-')) {
  const pageNumber = String(slug).replace('page-', '');
    return Astro.redirect(`/docs/page-${pageNumber}`, 301);
}

// Error handling
if (!post) return Astro.redirect('/docs?error=post-not-found');

// ========== CONTENT PROCESSING ==========
const { Content, headings } = await post.render();
const tocHeadings = headings.filter(
  (heading: { depth: number }) => heading.depth >= 2 && heading.depth <= 3
);

// articleContentのheadingsを更新（後で実行）

// ========== PATH & METADATA ==========
const resolvedPath = { path: resolvePath('docs', post.slug) };
const collectionMetadata = getCollectionInfo('docs');

// ========== ARTICLE CONTENT EXTRACTION ==========
// 記事の内容を抽出（SEO最適化用）
let articleContent = {
  title: post.data.title || '',
  description: post.data.description || '',
  tags: post.data.tags || [],
  categories: post.data.categories || [],
  headings: [], // 後で設定
  content: post.body || '',
  publishedDate: post.data.publishedDate || '',
  author: post.data.author || 'GoRakuDo Team',
};

// ========== SEO DATA OPTIMIZATION ==========
// Phase 2: メタタグ最適化 - 検索意図に合わせたタイトル・説明文・キーワード

// テンプレート変数置換関数（SEO最適化用）
const replaceTemplateVariables = (template, variables) => {
  if (typeof template === 'string') {
    return template.replace(
      /\{\{(\w+)\}\}/g,
      (match, key) => variables[key] || match
    );
  } else if (Array.isArray(template)) {
    return template.map(item => replaceTemplateVariables(item, variables));
  } else if (template && typeof template === 'object') {
    const result = {};
    for (const [key, value] of Object.entries(template)) {
      result[key] = replaceTemplateVariables(value, variables);
    }
    return result;
  }
  return template;
};

// テンプレートベースのタイトル生成
const generateTemplateBasedTitle = (post, articleType) => {
  // フォールバック用のタイトル生成
  if (!docsArticleTemplate || !docsArticleTemplate.seoOptimization) {
    const baseTitle = post.data.title || post.slug;
    switch (articleType) {
      case 'tutorial':
        return `${baseTitle} - Panduan Lengkap | GoRakuDo Pembelajaran Bahasa Jepang`;
      case 'guide':
        return `${baseTitle} - Panduan Praktis | GoRakuDo Pembelajaran Bahasa Jepang`;
      case 'setup':
        return `${baseTitle} - Panduan Setup | GoRakuDo Pembelajaran Bahasa Jepang`;
      default:
        return `${baseTitle} - Panduan Pembelajaran Bahasa Jepang | GoRakuDo`;
    }
  }

  const titleTemplate =
    docsArticleTemplate.seoOptimization.titleTemplates[articleType] ||
    docsArticleTemplate.seoOptimization.titleTemplates.general;

  return replaceTemplateVariables(titleTemplate, {
    articleTitle: post.data.title || post.slug,
  });
};

// テンプレートベースの説明文生成
const generateTemplateBasedDescription = (post, articleType) => {
  // フォールバック用の説明文生成
  if (!docsArticleTemplate || !docsArticleTemplate.seoOptimization) {
    const baseDescription = post.data.description || '';
    const difficulty = post.data.difficulty || 'intermediate';
    const tags = post.data.tags || [];

    const tagKeywords = tags.slice(0, 3).join(', ');
    const difficultyText =
      difficulty === 'beginner'
        ? 'untuk Pemula'
        : difficulty === 'advanced'
          ? 'untuk Tingkat Lanjut'
          : 'untuk Menengah';

    return `Pelajari ${tagKeywords} secara efektif. ${baseDescription || 'Panduan komprehensif'} yang direkomendasikan untuk ${difficultyText} pembelajaran bahasa Jepang. Kuasai bahasa Jepang secara efisien dengan GoRakuDo.`;
  }

  const descriptionTemplate =
    docsArticleTemplate.seoOptimization.descriptionTemplates[articleType] ||
    docsArticleTemplate.seoOptimization.descriptionTemplates.general;

  const tags = post.data.tags || [];
  const difficulty = post.data.difficulty || 'intermediate';

  // タグに基づく追加キーワード
  const tagKeywords = tags.slice(0, 3).join(', ');

  // 難易度テキストを取得
  const difficultyText =
    docsArticleTemplate.seoOptimization.difficultyTexts[difficulty] ||
    docsArticleTemplate.seoOptimization.difficultyTexts.intermediate;

  return replaceTemplateVariables(descriptionTemplate, {
    tagKeywords: tagKeywords,
    difficultyText: difficultyText,
    articleDescription: post.data.description || 'Panduan komprehensif',
  });
};

// テンプレートベースのキーワード生成
const generateTemplateBasedKeywords = (post, articleType) => {
  const baseTags = post.data.tags || [];
  const difficulty = post.data.difficulty || 'intermediate';
  const categories = post.data.categories || [];

  // フォールバック用のキーワード生成
  if (!docsArticleTemplate || !docsArticleTemplate.seoOptimization) {
    const baseKeywords = [
      'Pembelajaran Bahasa Jepang',
      'GoRakuDo',
      'Bahasa Jepang',
      'Panduan Pembelajaran',
    ];
    const typeKeywords = {
      tutorial: [
        'Tutorial',
        'Langkah Demi Langkah',
        'untuk Pemula',
        'Panduan Lengkap',
      ],
      guide: ['Panduan', 'Praktis', 'Metode', 'Teknik'],
      setup: ['Setup', 'Instalasi', 'Konfigurasi', 'Konfigurasi Awal'],
      general: ['Pembelajaran', 'Belajar', 'Peningkatan', 'Tips'],
    };
    const difficultyKeywords = {
      beginner: ['Pemula', 'Dasar', 'Awal', 'Mudah'],
      intermediate: ['Menengah', 'Praktis', 'Lanjutan'],
      advanced: ['Mahir', 'Expert', 'Profesional', 'Tingkat Tinggi'],
    };

    return [
      ...baseKeywords,
      ...(typeKeywords[articleType] || typeKeywords.general),
      ...(difficultyKeywords[difficulty] || []),
      ...baseTags,
    ]
      .filter((keyword, index, array) => array.indexOf(keyword) === index)
      .slice(0, 15);
  }

  // テンプレートからキーワードを取得
  const baseKeywords = docsArticleTemplate.seoOptimization.baseKeywords;
  const typeKeywords =
    docsArticleTemplate.seoOptimization.typeKeywords[articleType] ||
    docsArticleTemplate.seoOptimization.typeKeywords.general;
  const difficultyKeywords =
    docsArticleTemplate.seoOptimization.difficultyKeywords[difficulty] || [];

  // カテゴリ別キーワード
  const categoryKeywords = categories
    .map(cat => {
      const categoryKey = cat.toLowerCase();
      return (
        docsArticleTemplate.seoOptimization.categoryKeywords[categoryKey] || [
          cat,
        ]
      );
    })
    .flat();

  // すべてのキーワードを統合
  return [
    ...baseKeywords,
    ...typeKeywords,
    ...difficultyKeywords,
    ...categoryKeywords,
    ...baseTags,
  ]
    .filter((keyword, index, array) => array.indexOf(keyword) === index) // 重複削除
    .slice(0, 15); // 最大15個のキーワード
};

// 記事の種類を判定（SEO最適化用）
const getArticleType = (tags, categories) => {
  if (
    tags.some(tag => ['tutorial', 'setup', 'guide'].includes(tag.toLowerCase()))
  ) {
    return 'tutorial';
  }
  if (categories.some(cat => cat.toLowerCase().includes('tutorial'))) {
    return 'tutorial';
  }
  if (tags.some(tag => ['guide', 'howto'].includes(tag.toLowerCase()))) {
    return 'guide';
  }
  return 'general';
};

// 記事タイプを取得（SEO最適化用）
const seoArticleType = getArticleType(
  post.data.tags || [],
  post.data.categories || []
);

// テンプレートベースの最適化されたSEOデータ
const seoData = {
  title: generateTemplateBasedTitle(post, seoArticleType),
  description: generateTemplateBasedDescription(post, seoArticleType),
  keywords: generateTemplateBasedKeywords(post, seoArticleType),
  articleType: seoArticleType,
  learningStage: post.data.difficulty || 'intermediate',
  searchIntent:
    seoArticleType === 'tutorial' ? 'instructional' : 'informational',
  publishedDate: post.data.publishedDate,
  modifiedDate: post.data.publishedDate,
  isDraft: post.data.isDraft || false,
};

// ========== CLIENT DATA ==========
const postData = {
  title: post.data.title,
  description: post.data.description,
  resolvedPath: resolvedPath.path,
};

// ========== BREADCRUMB CONFIGURATION ==========
const breadcrumbConfig = {
  currentPath: resolvedPath.path,
  showHome: true,
  showIcons: true,
  ariaLabel: 'Documentation navigation breadcrumb',
};

// ========== DYNAMIC STRUCTURED DATA GENERATION ==========
// 0スクリプト（JS/TSなし）で直接実装 + テンプレート連携

// articleContentのheadingsを更新
articleContent.headings = tocHeadings;
const articleUrl = `https://gorakudo.org${resolvedPath.path}`;
const articleImage =
  post.data.featuredImage || 'https://gorakudo.org/img/FullDC Logo.webp';

// テンプレート変数の準備
const templateVariables = {
  articleTitle: articleContent.title,
  articleDescription: articleContent.description,
  articleUrl,
  articleImage,
};

// テンプレートベースの動的FAQ生成
const generateTemplateBasedFAQ = (content, articleType) => {
  // テンプレートからFAQテンプレートを取得
  const faqTemplate =
    docsArticleTemplate.faqTemplates[articleType] ||
    docsArticleTemplate.faqTemplates.general;

  // テンプレート変数を準備（まず基本変数で置換）
  const baseVariables = {
    ...templateVariables,
  };

  // FAQテンプレートの質問と回答を基本変数で置換
  const processedFaqTemplate = {
    faqQuestion1: replaceTemplateVariables(
      faqTemplate.faqQuestion1,
      baseVariables
    ),
    faqAnswer1: replaceTemplateVariables(faqTemplate.faqAnswer1, baseVariables),
    faqQuestion2: replaceTemplateVariables(
      faqTemplate.faqQuestion2,
      baseVariables
    ),
    faqAnswer2: replaceTemplateVariables(faqTemplate.faqAnswer2, baseVariables),
    faqQuestion3: replaceTemplateVariables(
      faqTemplate.faqQuestion3,
      baseVariables
    ),
    faqAnswer3: replaceTemplateVariables(faqTemplate.faqAnswer3, baseVariables),
  };

  // 最終的なFAQ変数を準備
  const faqVariables = {
    ...baseVariables,
    ...processedFaqTemplate,
  };

  // テンプレートを置換してFAQ Schemaを生成
  const faqSchema = replaceTemplateVariables(
    docsArticleTemplate.structuredData.faq,
    faqVariables
  );

  return faqSchema.mainEntity;
};

// テンプレートベースの動的HowTo生成
const generateTemplateBasedHowTo = (content, articleType) => {
  // チュートリアル記事でない場合はnullを返す
  const isTutorial =
    content.categories.some(
      cat =>
        cat.toLowerCase().includes('tutorial') ||
        cat.toLowerCase().includes('guide')
    ) ||
    content.tags.some(tag =>
      ['tutorial', 'guide', 'howto', 'setup'].includes(tag.toLowerCase())
    );

  if (!isTutorial) return null;

  // テンプレートからHowToテンプレートを取得
  const howToTemplate =
    docsArticleTemplate.howToTemplates[articleType] ||
    docsArticleTemplate.howToTemplates.tutorial;

  // 基本変数を準備
  const baseVariables = {
    ...templateVariables,
  };

  // HowToテンプレートの各項目を基本変数で置換
  const processedHowToTemplate = {
    howToTitle: replaceTemplateVariables(
      howToTemplate.howToTitle,
      baseVariables
    ),
    howToDescription: replaceTemplateVariables(
      howToTemplate.howToDescription,
      baseVariables
    ),
    howToImage: replaceTemplateVariables(
      howToTemplate.howToImage,
      baseVariables
    ),
    howToTotalTime: howToTemplate.howToTotalTime,
    howToSupply1: howToTemplate.howToSupply1,
    howToSupply2: howToTemplate.howToSupply2,
    howToTool1: howToTemplate.howToTool1,
    howToStep1Name: howToTemplate.howToStep1Name,
    howToStep1Text: howToTemplate.howToStep1Text,
    howToStep1Url: replaceTemplateVariables(
      howToTemplate.howToStep1Url,
      baseVariables
    ),
    howToStep2Name: howToTemplate.howToStep2Name,
    howToStep2Text: howToTemplate.howToStep2Text,
    howToStep2Url: replaceTemplateVariables(
      howToTemplate.howToStep2Url,
      baseVariables
    ),
    howToStep3Name: howToTemplate.howToStep3Name,
    howToStep3Text: howToTemplate.howToStep3Text,
    howToStep3Url: replaceTemplateVariables(
      howToTemplate.howToStep3Url,
      baseVariables
    ),
  };

  // 最終的なHowTo変数を準備
  const howToVariables = {
    ...baseVariables,
    ...processedHowToTemplate,
  };

  // テンプレートを置換してHowTo Schemaを生成
  const howToSchema = replaceTemplateVariables(
    docsArticleTemplate.structuredData.howTo,
    howToVariables
  );

  return howToSchema;
};

// テンプレートベースのSchema生成
const faqSchema = {
  '@context': 'https://schema.org' as const,
  '@type': 'FAQPage' as const,
  mainEntity: generateTemplateBasedFAQ(articleContent, seoArticleType),
};

// HowTo Schema生成（チュートリアル記事の場合）
const howToSchema = generateTemplateBasedHowTo(articleContent, seoArticleType);

// テンプレートベースのBreadcrumb Schema生成
const breadcrumbSchema = replaceTemplateVariables(
  docsArticleTemplate.structuredData.breadcrumb,
  templateVariables
);
---

<PostLayout
  title={seoData.title}
  description={seoData.description}
  publishedDate={seoData.publishedDate}
  lang='id'
  author={post.data.author || 'GoRakuDo Team'}
  tags={seoData.keywords}
  post={post}
  collectionMetadata={collectionMetadata}
  headings={tocHeadings}
  postActions={true}
  breadcrumbConfig={breadcrumbConfig}
  breadcrumbSchema={breadcrumbSchema as any}
  faqSchema={faqSchema}
  howToSchema={howToSchema}
  featuredImage={post.data.featuredImage}
>
  <!-- Breadcrumb Slot -->
  <Breadcrumb
    slot='breadcrumb'
    {post}
    currentPath={breadcrumbConfig.currentPath}
    showHome={breadcrumbConfig.showHome}
    showIcons={breadcrumbConfig.showIcons}
    ariaLabel={breadcrumbConfig.ariaLabel}
  />

  <!-- Header Slot -->
  <header slot='header' class='content-header'>
    <h1>{post.data.title}</h1>

    {
      (post.data.publishedDate || post.data.author) && (
        <div class='content-meta' aria-label='Post metadata'>
          <time class='content-date' datetime={seoData.publishedDate}>
            {new Date(seoData.publishedDate).toLocaleDateString('ja-JP', {
              year: 'numeric',
              month: 'long',
              day: 'numeric',
            })}
          </time>
          <span class='content-author'>
            by {post.data.author || 'GoRakuDo Team'}
          </span>
        </div>
      )
    }

    {
      post.data.tags && post.data.tags.length > 0 ? (
        <nav
          class='flex gap-2 flex-wrap mt-4 justify-center sm:justify-start'
          aria-label='Article tags'
        >
          {post.data.tags.map((tag: string) => (
            <span class='bg-primary/20 text-primary px-2 py-1 rounded text-xs border border-primary/30'>
              {tag}
            </span>
          ))}
        </nav>
      ) : (
        <div class='tag-warning mt-4' role='alert'>
          <span class='text-warning text-sm'>
            Belum ada tag yang ditetapkan
          </span>
        </div>
      )
    }
  </header>

  <!-- Content Slot -->
  <div slot='content'>
    <Content />
  </div>

  <!-- Actions Slot -->
  <footer slot='actions' class='content-actions'>
    <div class='action-buttons'>
      <a
        href={collectionMetadata.basePath}
        class='back-to-docs'
        aria-label={`Back to ${collectionMetadata.displayName}`}
      >
        <svg
          width='16'
          height='16'
          viewBox='0 0 24 24'
          fill='none'
          stroke='currentColor'
          stroke-width='2'
          stroke-linecap='round'
          stroke-linejoin='round'
          aria-hidden='true'
        >
          <path d='M19 12H5M12 19l-7-7 7-7'></path>
        </svg>
        Back to {collectionMetadata.displayName}
      </a>

      <div class='share-buttons'>
        <button
          class='share-btn'
          onclick='sharePost()'
          aria-label='Share this post'
        >
          <svg
            width='16'
            height='16'
            viewBox='0 0 24 24'
            fill='none'
            stroke='currentColor'
            stroke-width='2'
            stroke-linecap='round'
            stroke-linejoin='round'
            aria-hidden='true'
          >
            <path d='M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8'></path>
            <polyline points='16,6 12,2 8,6'></polyline>
            <line x1='12' y1='2' x2='12' y2='15'></line>
          </svg>
          Share
        </button>
      </div>
    </div>
  </footer>
</PostLayout>

<!-- ========== SCRIPTS ========== -->
<script is:inline define:vars={{ postData }}>
  // Share functionality
  const sharePost = () => {
    const shareUrl = postData?.resolvedPath
      ? `${window.location.origin}${postData.resolvedPath}`
      : window.location.href;

    if (navigator.share) {
      navigator.share({
        title: postData?.title || 'GoRakuDo Post',
        text: postData?.description || 'Check out this post from GoRakuDo',
        url: shareUrl,
      });
    } else {
      navigator.clipboard.writeText(shareUrl).then(() => {
        alert('Link berhasil disalin ke clipboard!');
      });
    }
  };

  // Make sharePost globally accessible
  window.sharePost = sharePost;
</script>
