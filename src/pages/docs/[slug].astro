---
// ========== IMPORTS ==========
import { getCollection, type CollectionEntry } from 'astro:content';
import PostLayout from '../../layouts/PostLayout.astro';
import Breadcrumb from '../../components/common/Breadcrumb.astro';
import FAQ from '../../components/ui/FAQ.astro';
import { resolvePath, getCollectionInfo } from '../../utils/collections';
import { getVisibleDocs } from '../../utils/content/PostStatus-Filter';
import { generateBreadcrumbSchema } from '../../utils/breadcrumb-schema';
import docsArticleTemplate from '../../data/seo/pages/docs-article-template.json';
import { CldImage } from 'astro-cloudinary';
import { buildCloudinaryUrl } from '../../utils/cloudinary';

// ========== STATIC PATH GENERATION ==========
export async function getStaticPaths() {
  const allPosts = await getCollection('docs');
  const visiblePosts = getVisibleDocs(allPosts);

  return visiblePosts.map((post: CollectionEntry<'docs'>) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

// ========== COMPONENT LOGIC ==========
const { post } = Astro.props as { post: CollectionEntry<'docs'> };
const { slug } = Astro.params;

// Redirect pagination slugs
if (slug && String(slug).startsWith('page-')) {
  const pageNumber = String(slug).replace('page-', '');
  return Astro.redirect(`/docs/page-${pageNumber}`, 301);
}

// Error handling
if (!post) return Astro.redirect('/docs?error=post-not-found');

// ========== CONTENT PROCESSING ==========
const { Content, headings } = await post.render();
const tocHeadings = headings.filter(
  (heading: { depth: number }) => heading.depth >= 2 && heading.depth <= 3
);

// articleContentのheadingsを更新（後で実行）

// ========== PATH & METADATA ==========
const resolvedPath = { path: resolvePath('docs', post.slug) };
const collectionMetadata = getCollectionInfo('docs');

// ========== ARTICLE CONTENT EXTRACTION ==========
// 記事の内容を抽出（SEO最適化用）
let articleContent = {
  title: post.data.title || '',
  description: post.data.description || '',
  tags: post.data.tags || [],
  categories: post.data.categories || [],
  headings: [], // 後で設定
  content: post.body || '',
  publishedDate: post.data.publishedDate || '',
  author: post.data.author || 'GoRakuDo Team',
};

// ========== SEO DATA OPTIMIZATION ==========
// Phase 2: メタタグ最適化 - 検索意図に合わせたタイトル・説明文・キーワード

// テンプレート変数置換関数（SEO最適化用）
const replaceTemplateVariables = (template, variables) => {
  if (typeof template === 'string') {
    return template.replace(
      /\{\{(\w+)\}\}/g,
      (match, key) => variables[key] || match
    );
  } else if (Array.isArray(template)) {
    return template.map(item => replaceTemplateVariables(item, variables));
  } else if (template && typeof template === 'object') {
    const result = {};
    for (const [key, value] of Object.entries(template)) {
      result[key] = replaceTemplateVariables(value, variables);
    }
    return result;
  }
  return template;
};

// シンプルなタイトル生成: MDXフロントマターのまま
const generateTemplateBasedTitle = post => {
  const articleTitle = post.data.title || post.slug;
  return `${articleTitle} ・ GoRakuDo`;
};

// シンプルな説明文生成: MDXフロントマターのまま
const generateTemplateBasedDescription = post => post.data.description || '';

// シンプルなキーワード生成: baseKeywords + mdxKeywords + baseTags
const generateTemplateBasedKeywords = post => {
  const mdxKeywords = post.data.keywords || [];
  const baseTags = post.data.tags || [];
  const baseKeywords = docsArticleTemplate?.seoOptimization?.baseKeywords || [];
  return [...baseKeywords, ...mdxKeywords, ...baseTags]
    .filter((kw, i, arr) => arr.indexOf(kw) === i)
    .slice(0, 15);
};

// シンプルなSEOデータ生成
const seoData = {
  title: generateTemplateBasedTitle(post),
  description: generateTemplateBasedDescription(post),
  keywords: generateTemplateBasedKeywords(post),
  publishedDate: post.data.publishedDate,
  modifiedDate: post.data.publishedDate,
  isDraft: post.data.isDraft || false,
};

// ========== CLIENT DATA ==========
const postData = {
  title: post.data.title,
  description: post.data.description,
  resolvedPath: resolvedPath.path,
};

// ========== BREADCRUMB CONFIGURATION ==========
const breadcrumbConfig = {
  currentPath: resolvedPath.path,
  showHome: true,
  showIcons: true,
  ariaLabel: 'Documentation navigation breadcrumb',
};

// ========== DYNAMIC STRUCTURED DATA GENERATION ==========
// 0スクリプト（JS/TSなし）で直接実装 + テンプレート連携

// articleContentのheadingsを更新
articleContent.headings = tocHeadings;
const articleUrl = resolvedPath.path; // 相対パス（breadcrumb用）
const articleImage = post.data.featuredImage
  ? buildCloudinaryUrl(post.data.featuredImage)
  : 'https://gorakudo.org/img/gorakudo-immerison.png';

// テンプレート変数の準備
const templateVariables = {
  articleTitle: articleContent.title,
  articleDescription: articleContent.description,
  articleUrl,
  articleImage,
};

// テンプレートベースのBreadcrumb Schema生成
const breadcrumbData = replaceTemplateVariables(
  docsArticleTemplate.breadcrumbData,
  templateVariables
);

const breadcrumbSchema = generateBreadcrumbSchema({
  items: breadcrumbData.items.map((item: any, index: number) => ({
    title: item.name,
    url: item.url,
    isActive: index === breadcrumbData.items.length - 1,
  })),
  siteUrl: String(Astro.site || 'https://gorakudo.org'),
});

// ========== FAQ SCHEMA GENERATION ==========
const faqSchema =
  post.data.faq && post.data.faq.length > 0
    ? {
        '@context': 'https://schema.org',
        '@type': 'FAQPage',
        mainEntity: post.data.faq.map(
          (item: { question: string; answer: string }) => ({
            '@type': 'Question',
            name: item.question,
            acceptedAnswer: {
              '@type': 'Answer',
              text: item.answer.replace(/<[^>]*>/g, ''), // Strip HTML untuk schema
            },
          })
        ),
      }
    : null;
---

<PostLayout
  title={seoData.title}
  description={seoData.description}
  publishedDate={seoData.publishedDate}
  lang='id'
  author={post.data.author || 'GoRakuDo Team'}
  tags={seoData.keywords}
  post={post}
  collectionMetadata={collectionMetadata}
  headings={tocHeadings}
  postActions={true}
  breadcrumbConfig={breadcrumbConfig}
  breadcrumbSchema={breadcrumbSchema as any}
  faqSchema={faqSchema as any}
  featuredImage={post.data.featuredImage}
  learningResourceType={post.data.learningResourceType}
  educationalLevel={post.data.educationalLevel}
  about={post.data.about}
  mentions={post.data.mentions}
  citation={post.data.citation}
>
  <!-- Breadcrumb Slot -->
  <Breadcrumb
    slot='breadcrumb'
    {post}
    currentPath={breadcrumbConfig.currentPath}
    showHome={breadcrumbConfig.showHome}
    showIcons={breadcrumbConfig.showIcons}
    ariaLabel={breadcrumbConfig.ariaLabel}
  />

  <!-- Header Slot -->
  <header slot='header' class='content-header'>
    <h1>{post.data.title}</h1>

    {
      (post.data.publishedDate || post.data.author) && (
        <div class='content-meta' aria-label='Post metadata'>
          <time class='content-date' datetime={seoData.publishedDate}>
            {new Date(seoData.publishedDate).toLocaleDateString('ja-JP', {
              year: 'numeric',
              month: 'long',
              day: 'numeric',
            })}
          </time>
          <span class='content-author'>
            by {post.data.author || 'GoRakuDo Team'}
          </span>
        </div>
      )
    }

    {
      post.data.tags && post.data.tags.length > 0 ? (
        <nav
          class='flex gap-2 flex-wrap mt-4 justify-center sm:justify-start'
          aria-label='Article tags'
        >
          {post.data.tags.map((tag: string) => (
            <span class='bg-primary/20 text-primary px-2 py-1 rounded text-xs border border-primary/30'>
              {tag}
            </span>
          ))}
        </nav>
      ) : (
        <div class='tag-warning mt-4' role='alert'>
          <span class='text-warning text-sm'>
            Belum ada tag yang ditetapkan
          </span>
        </div>
      )
    }
  </header>

  <!-- Featured Image Slot -->
  {
    post.data.featuredImage && (
      <div slot='featured-image' class='featured-image-container mt-6'>
        <CldImage
          src={post.data.featuredImage}
          alt={post.data.title}
          class='featured-image-thumbnail'
          loading='eager'
          width={800}
          quality='auto'
          format='auto'
        />
      </div>
    )
  }

  <!-- Content Slot -->
  <div slot='content'>
    <Content />

    <!-- FAQ Section (if exists) - 記事コンテンツ内に配置 -->
    {
      post.data.faq && post.data.faq.length > 0 && (
        <div class='article-faq-section'>
          <FAQ
            items={post.data.faq}
            title='❓ FAQ: Pertanyaan yang Sering Muncul'
            className='article-faq'
          />
        </div>
      )
    }
  </div>

  <!-- Actions Slot -->
  <footer slot='actions' class='content-actions'>
    <div class='action-buttons'>
      <a
        href={collectionMetadata.basePath}
        class='back-to-docs'
        aria-label={`Back to ${collectionMetadata.displayName}`}
      >
        <svg
          width='16'
          height='16'
          viewBox='0 0 24 24'
          fill='none'
          stroke='currentColor'
          stroke-width='2'
          stroke-linecap='round'
          stroke-linejoin='round'
          aria-hidden='true'
        >
          <path d='M19 12H5M12 19l-7-7 7-7'></path>
        </svg>
        Back to {collectionMetadata.displayName}
      </a>

      <div class='share-buttons'>
        <button
          class='share-btn'
          onclick='sharePost()'
          aria-label='Share this post'
        >
          <svg
            width='16'
            height='16'
            viewBox='0 0 24 24'
            fill='none'
            stroke='currentColor'
            stroke-width='2'
            stroke-linecap='round'
            stroke-linejoin='round'
            aria-hidden='true'
          >
            <path d='M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8'></path>
            <polyline points='16,6 12,2 8,6'></polyline>
            <line x1='12' y1='2' x2='12' y2='15'></line>
          </svg>
          Share
        </button>
      </div>
    </div>
  </footer>
</PostLayout>

<!-- ========== SCRIPTS ========== -->
<script is:inline define:vars={{ postData }}>
  // Share functionality
  const sharePost = () => {
    const shareUrl = postData?.resolvedPath
      ? `${window.location.origin}${postData.resolvedPath}`
      : window.location.href;

    if (navigator.share) {
      navigator.share({
        title: postData?.title || 'GoRakuDo Post',
        text: postData?.description || 'Check out this post from GoRakuDo',
        url: shareUrl,
      });
    } else {
      navigator.clipboard.writeText(shareUrl).then(() => {
        alert('Link berhasil disalin ke clipboard!');
      });
    }
  };

  // Make sharePost globally accessible
  window.sharePost = sharePost;
</script>
