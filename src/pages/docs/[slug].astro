---
import PostLayout from '../../layouts/PostLayout.astro';
import Breadcrumb from '../../components/common/Breadcrumb.astro';

// Import content page styles with Tailwind v4 optimization
import '../../styles/layouts/PostLayout.css';

import { getCollection, type CollectionEntry } from 'astro:content';
import { resolvePath, getCollectionInfo } from '../../utils/collections';
import { getMergedDates } from '../../utils/content/cc-Auto-FileDates';
import { getVisibleDocs } from '../../utils/content/PostStatus-Filter';

// Breadcrumb Schema
import { generateBreadcrumbSchema } from '../../utils/breadcrumb-schema';

// Generate static paths for all docs posts
export async function getStaticPaths() {
  const allPosts = await getCollection('docs');
  const visiblePosts = getVisibleDocs(allPosts);

  return visiblePosts.map((post: CollectionEntry<'docs'>) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

// Get the post from props with explicit type casting
const { post } = Astro.props as { post: CollectionEntry<'docs'> };

// Check if slug starts with 'page-' and redirect to pagination
const { slug } = Astro.params;
if (slug) {
  const slugStr = String(slug);
  if (slugStr.startsWith('page-')) {
    const pageNumber = slugStr.replace('page-', '');
    return Astro.redirect(`/docs/page-${pageNumber}`, 301);
  }
}

// Smart error handling - redirect to docs listing if post not found
if (!post) {
  return Astro.redirect('/docs?error=post-not-found');
}

// Render the post content
const { Content, headings } = await post.render();

// Filter headings for TOC (h2-h3 levels work best for navigation)
const tocHeadings = headings.filter(
  (heading: { depth: number }) => heading.depth >= 2 && heading.depth <= 3
);

// Dynamic content path resolution for SEO
const resolvedPath = { path: resolvePath('docs', post.slug) };
const collectionMetadata = getCollectionInfo('docs');

// ファイルの作成日・更新日を自動取得（ユーティリティ使用）
const fileDates = getMergedDates(
  { slug: post.slug, collection: 'docs' },
  post.data.publishedDate,
  post.data.updatedDate
);

// Dynamic SEO data based on document content (フロントマター完全対応 + 自動日付)
const seoData = {
  title: post.data.title || `Documentation - ${post.slug}`,
  description:
    post.data.description ||
    `Learn about ${post.slug} in GoRakuDo documentation`,
  keywords: post.data.tags || ['documentation', post.slug, 'guide'], // ✅ tagsフィールドを使用
  articleType: 'guide',
  learningStage: post.data.difficulty || 'intermediate', // ✅ difficultyフィールドを使用
  searchIntent: 'informational',
  // フロントマターの日付があれば使用、なければファイルシステムの日付を使用
  publishedDate: fileDates.publishedDate,
  modifiedDate: fileDates.updatedDate,
  isDraft: post.data.isDraft || false,
};

// Prepare minimal data for client-side scripts
const postData = {
  title: post.data.title,
  description: post.data.description,
  resolvedPath: resolvedPath.path,
};

// Breadcrumb configuration
const breadcrumbConfig = {
  currentPath: resolvedPath.path,
  showHome: true,
  showIcons: true,
  ariaLabel: 'Documentation navigation breadcrumb',
};

// ========== BREADCRUMB SCHEMA ==========
// Docs article page用のBreadcrumb Schema生成
const breadcrumbSchema = generateBreadcrumbSchema({
  items: [
    { title: 'Home', url: '/', isActive: false },
    { title: 'Documentation', url: '/docs', isActive: false },
    { title: post.data.title, url: resolvedPath.path, isActive: true },
  ],
  siteUrl: String(Astro.site || 'https://gorakudo.org'),
});
---

<PostLayout
  title={seoData.title}
  description={seoData.description}
  publishedDate={seoData.publishedDate}
  lang='ja'
  author={post.data.author || 'GoRakuDo Team'}
  tags={seoData.keywords}
  post={post}
  collectionMetadata={collectionMetadata}
  headings={tocHeadings}
  postActions={true}
  breadcrumbConfig={breadcrumbConfig}
  breadcrumbSchema={breadcrumbSchema}
  featuredImage={post.data.featuredImage}
>
  <!-- Breadcrumb Slot -->
  <Breadcrumb
    slot='breadcrumb'
    {post}
    currentPath={breadcrumbConfig.currentPath}
    showHome={breadcrumbConfig.showHome}
    showIcons={breadcrumbConfig.showIcons}
    ariaLabel={breadcrumbConfig.ariaLabel}
  />

  <!-- Header Slot -->
  <header slot='header' class='content-header mt-8'>
    <h1>{post.data.title}</h1>

    {
      (post.data.publishedDate || post.data.author) && (
        <div class='content-meta' aria-label='Post metadata'>
          <time class='content-date' datetime={seoData.publishedDate}>
            {new Date(seoData.publishedDate).toLocaleDateString('ja-JP', {
              year: 'numeric',
              month: 'long',
              day: 'numeric',
            })}
          </time>
          <span class='content-author'>
            by {post.data.author || 'GoRakuDo Team'}
          </span>
        </div>
      )
    }

    {
      post.data.difficulty && (
        <div class='content-tags'>
          <span
            class={`difficulty-badge difficulty-${post.data.difficulty}`}
            aria-label={`Difficulty level: ${post.data.difficulty}`}
          >
            {post.data.difficulty}
          </span>
        </div>
      )
    }
  </header>

  <!-- Content Slot -->
  <article
    slot='content'
    class='prose prose-invert max-w-none content-main'
    id='contentMain'
    aria-label='Post content'
  >
    <Content />
  </article>

  <!-- Actions Slot -->
  <footer slot='actions' class='content-actions'>
    <div class='action-buttons'>
      <a
        href={collectionMetadata.basePath}
        class='back-to-docs'
        aria-label={`Back to ${collectionMetadata.displayName}`}
      >
        <svg
          width='16'
          height='16'
          viewBox='0 0 24 24'
          fill='none'
          stroke='currentColor'
          stroke-width='2'
          stroke-linecap='round'
          stroke-linejoin='round'
          aria-hidden='true'
        >
          <path d='M19 12H5M12 19l-7-7 7-7'></path>
        </svg>
        Back to {collectionMetadata.displayName}
      </a>

      <div class='share-buttons'>
        <button
          class='share-btn'
          onclick='sharePost()'
          aria-label='Share this post'
        >
          <svg
            width='16'
            height='16'
            viewBox='0 0 24 24'
            fill='none'
            stroke='currentColor'
            stroke-width='2'
            stroke-linecap='round'
            stroke-linejoin='round'
            aria-hidden='true'
          >
            <path d='M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8'></path>
            <polyline points='16,6 12,2 8,6'></polyline>
            <line x1='12' y1='2' x2='12' y2='15'></line>
          </svg>
          Share
        </button>
      </div>
    </div>
  </footer>
</PostLayout>

<!-- Main Application Script -->
<script is:inline define:vars={{ postData }}>
  // Share functionality with dynamic path support
  function sharePost() {
    const shareUrl = postData?.resolvedPath
      ? `${window.location.origin}${postData.resolvedPath}`
      : window.location.href;

    if (navigator.share) {
      navigator.share({
        title: postData?.title || 'GoRakuDo Post',
        text: postData?.description || 'Check out this post from GoRakuDo',
        url: shareUrl,
      });
    } else {
      // Fallback: copy to clipboard
      navigator.clipboard.writeText(shareUrl).then(() => {
        alert('Link berhasil disalin ke clipboard!');
      });
    }
  }

  // Make sharePost globally accessible for onclick handlers
  window.sharePost = sharePost;
</script>
