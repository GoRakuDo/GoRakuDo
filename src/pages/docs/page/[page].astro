---
import { getCollection } from 'astro:content';
import UnifiedSEO from '../../../components/UnifiedSEO.astro';
import Breadcrumb from '../../../components/public-components/Breadcrumb.astro';
import Navbar from '../../../components/public-components/Navbar.astro';
import PostsHeader from '../../../components/docs/PostsHeader.astro';
import PostsGrid from '../../../components/docs/PostsGrid.astro';
import Pagination from '../../../components/common/Pagination.astro';

// スタイルインポート
import '../../../styles/global.css';
import '../../../styles/docs/docs.css';

// 静的パス生成
export async function getStaticPaths() {
  const POSTS_PER_PAGE = 6;

  const allPosts = await getCollection(
    'docs',
    ({ data }) =>
      data.status === 'published' &&
      data.publishedDate &&
      new Date(data.publishedDate) <= new Date()
  );

  const totalPages = Math.ceil(allPosts.length / POSTS_PER_PAGE);

  return Array.from({ length: totalPages - 1 }, (_, i) => ({
    params: { page: (i + 2).toString() },
  }));
}

// 定数定義
const POSTS_PER_PAGE = 6;

// 動的ルートのパラメータを取得
const { page } = Astro.params;
const currentPage = parseInt(page || '1');

// ページ番号の検証
if (isNaN(currentPage) || currentPage < 1) {
  return Astro.redirect('/docs', 301);
}

// コンテンツ取得とフィルタリング
const allPosts = await getCollection(
  'docs',
  ({ data }) =>
    data.status === 'published' &&
    data.publishedDate &&
    new Date(data.publishedDate) <= new Date()
);

// 公開日順でソート
const sortedPosts = allPosts.sort(
  (a, b) =>
    new Date(b.data.publishedDate).getTime() -
    new Date(a.data.publishedDate).getTime()
);

// ページネーション処理
const totalPages = Math.ceil(sortedPosts.length / POSTS_PER_PAGE);

// 存在しないページへのアクセス
if (currentPage > totalPages && totalPages > 0) {
  return Astro.redirect(`/docs/page/${totalPages}`, 301);
}

// 表示する記事の範囲計算
const startIndex = (currentPage - 1) * POSTS_PER_PAGE;
const paginatedPosts = sortedPosts.slice(
  startIndex,
  startIndex + POSTS_PER_PAGE
);

// 投稿データ変換
const transformedPosts = paginatedPosts.map(post => ({
  slug: post.slug,
  title: post.data.title,
  description: post.data.description || '',
  url: `/docs/${post.slug}`,
  publishedDate: post.data.publishedDate,
  emoji: post.data.emoji,
  tags: post.data.tags || [],
  category: post.data.category || 'general',
  isRecommended: false,
  isBeginner: post.data.category === 'getting-started',
  isTool: post.data.category === 'tools',
}));

// SEO設定
const seoConfig = {
  title: 'Dokumentasi & Panduan',
  description:
    'Panduan lengkap untuk memulai perjalanan immersion bahasa Jepang Anda. Dari langkah pertama hingga tingkat lanjut.',
  keywords: [
    'dokumentasi',
    'panduan',
    'tutorial',
    'jepang',
    'belajar',
    'immersion',
  ],
  author: 'Tim GoRakuDo',
};

// ページ固有のメタデータ
const pageTitle =
  currentPage > 1
    ? `ページ ${currentPage} - ${seoConfig.title}`
    : seoConfig.title;
const pageDescription =
  currentPage > 1
    ? `${seoConfig.description} (ページ ${currentPage}/${totalPages})`
    : seoConfig.description;
const canonicalUrl =
  currentPage > 1
    ? `https://gorakudo.org/docs/page/${currentPage}`
    : 'https://gorakudo.org/docs';

// 構造化データ
const structuredData = {
  '@context': 'https://schema.org',
  '@type': 'CollectionPage',
  name: pageTitle,
  description: pageDescription,
  url: canonicalUrl,
  mainEntity: {
    '@type': 'ItemList',
    numberOfItems: sortedPosts.length,
    itemListElement: paginatedPosts.map((post, index) => ({
      '@type': 'Article',
      position: startIndex + index + 1,
      name: post.data.title,
      description: post.data.description || '',
      url: `https://gorakudo.org/docs/${post.slug}`,
      datePublished: post.data.publishedDate,
      author: { '@type': 'Organization', name: seoConfig.author },
    })),
  },
  pagination: {
    '@type': 'CollectionPage',
    currentPage,
    totalPages,
    hasNextPage: currentPage < totalPages,
    hasPreviousPage: currentPage > 1,
  },
};
---

<html lang='id'>
  <head>
    <UnifiedSEO
      title={pageTitle}
      description={pageDescription}
      keywords={seoConfig.keywords}
      canonical={canonicalUrl}
      lang='id'
      pageType='article'
      image='https://gorakudo.org/img/FullDC Logo.webp'
      author={seoConfig.author}
      publishedDate={new Date().toISOString()}
      modifiedDate={new Date().toISOString()}
    />

    <!-- 構造化データ（JSON-LD） -->
    <script
      is:inline
      type='application/ld+json'
      set:html={JSON.stringify(structuredData)}
    />

    <!-- ページネーション用のメタタグ -->
    {currentPage > 1 && <meta name='robots' content='noindex, follow' />}
    {
      currentPage < totalPages && (
        <link
          rel='next'
          href={`https://gorakudo.org/docs/page/${currentPage + 1}`}
        />
      )
    }
    {
      currentPage > 1 && (
        <link
          rel='prev'
          href={
            currentPage === 2
              ? 'https://gorakudo.org/docs'
              : `https://gorakudo.org/docs/page/${currentPage - 1}`
          }
        />
      )
    }
  </head>
  <body>
    <Navbar />
    <main class='main-content'>
      <div class='posts-page'>
        <div class='posts-container'>
          <Breadcrumb
            currentPath={`/docs/page/${currentPage}`}
            showHome={true}
            variant='compact'
            showIcons={true}
            ariaLabel='Navigasi breadcrumb untuk halaman dokumentasi'
          />

          <PostsHeader title={pageTitle} description={pageDescription} />

          {
            sortedPosts.length > 0 ? (
              <PostsGrid posts={transformedPosts} />
            ) : (
              <div class='empty-state'>
                <h2>記事が見つかりません</h2>
                <p>
                  現在、公開されている記事がありません。しばらくしてから再度お試しください。
                </p>
              </div>
            )
          }

          {
            totalPages > 1 && sortedPosts.length > 0 && (
              <Pagination
                currentPage={currentPage}
                totalPages={totalPages}
                baseUrl='/docs'
                showPageInfo={true}
              />
            )
          }
        </div>
      </div>
    </main>
  </body>
</html>
