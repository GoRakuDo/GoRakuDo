---
// ページネーション設定（Astro propsで制御可能）
export interface Props {
  currentPage?: number;
  postsPerPage?: number;
}

const { 
  currentPage = 1, 
  postsPerPage = 12 
} = Astro.props;

// Import separated modules (relative paths preferred)
// Note: ContentProcessor and SearchDataGenerator are imported dynamically in client-side scripts

import { getCollection } from "astro:content"
import UnifiedSEO from "../components/UnifiedSEO.astro"
import Breadcrumb from "../components/public-components/Breadcrumb.astro"
import Navbar from "../components/public-components/Navbar.vue"
import "../styles/docs/docs.css"
import { resolvePath, getCollectionInfo } from "../utils/collections"
// AI content utilities removed - functionality no longer needed
import { ContentConfigUtils } from "../content/content-config"

import { logger, ConsoleLogger } from "../utils/logging/console-logger"

import "../styles/global.css"
import "../styles/homepage/index.css"

// Set global build mode to suppress console output during build
ConsoleLogger.setGlobalBuildMode(true)
// Set critical errors only mode - only show critical errors
ConsoleLogger.setGlobalCriticalErrorsOnly(true)

// Get all blog posts with error handling
let posts: any[] = []
let error: string | null = null

try {
  posts = await getCollection("docs")
  logger.log(`Posts loaded: ${posts.length}`, "success")
} catch (err: any) {
  logger.log(`Error loading posts: ${err.message}`, "error")
  error = err.message
}

// Sort posts by published date (newest first)
const sortedPosts = posts.sort(
  (a, b) =>
    new Date(b.data.publishedDate).getTime() - new Date(a.data.publishedDate).getTime()
)

// Pagination configuration
const totalPosts = sortedPosts.length

// Current page from Props (defined above)

// Calculate pagination info
const startIndex = 0
const endIndex = Math.min(postsPerPage, totalPosts)
const currentPosts = sortedPosts.slice(startIndex, endIndex)

// Clean pagination logging
logger.logPaginationInfo(totalPosts, postsPerPage, currentPage)

// Basic content filtering for server-side rendering
const beginnerContent = sortedPosts.filter(
  (post) => post.data.learningStage === "pemanasan" || post.data.difficulty === "beginner"
)

const toolContent = sortedPosts.filter((post) => {
  const isTool =
    post.data.category === "tools" ||
    post.data.title.toLowerCase().includes("anki") ||
    post.data.description.toLowerCase().includes("anki") ||
    post.data.tags.some((tag: string) => tag.toLowerCase().includes("tool"))
  return isTool
})

const finalRecommendations = sortedPosts.slice(0, 3)

// Dynamic content path resolution for all posts
const postsWithDynamicPaths = sortedPosts.map((post) => {
  const resolvedPath = { path: resolvePath("docs", post.slug) }
  return {
    ...post,
    resolvedPath: resolvedPath.path,
    collectionMetadata: getCollectionInfo("docs"),
  }
})

// AstroネイティブMarkdown処理最適化 - サーバーサイドで既にHTML変換済み
function processArticleContent(content: string) {
  if (!content) return { 
    cleanedText: "",
    hasCode: false,
    hasImages: false,
    hasSections: false
  }

  // HTML形式のコンテンツからテキストを抽出（Astroネイティブ処理済み）
  const cleanedText = content
    .replace(/<[^>]*>/g, " ") // Remove HTML tags
    .replace(/&[^;]+;/g, " ") // Remove HTML entities
    .replace(/\n+/g, " ") // Replace newlines with spaces
    .replace(/\s+/g, " ") // Normalize spaces
    .trim()

  return {
    cleanedText,
    hasCode: /<pre|<code/.test(content), // HTML形式のコードブロック検出
    hasImages: /!\[.*?\]\(.*?\)/.test(content),
    hasSections: /^#{1,6}\s+/.test(content)
  }
}

// 0-Script最適化: サーバーサイドで全データを生成
// 従来のfetch処理を完全に排除し、ビルド時に全データを処理
const searchDataItems = sortedPosts.map((post) => {
  const fullContent = post.body || ""
  const processedContent = processArticleContent(fullContent)

  return {
    // Core post data
    slug: post.slug,
    title: post.data.title,
    description: post.data.description,
    tags: post.data.tags || [],
    category: post.data.category,
    difficulty: post.data.difficulty,
    learningStage: post.data.learningStage,
    pubDate: post.data.publishedDate,
    readTime: post.data.readTime,
    emoji: post.data.emoji,
    url: post.resolvedPath || `/docs/${post.slug}`,

    // 0-Script最適化: サーバーサイドで処理済み
    content: processedContent.cleanedText,
    fullContent: fullContent,
    contentLength: fullContent.length,
    wordCount: processedContent.cleanedText.split(/\s+/).filter((word) => word.length > 0).length,

    // AI metadata removed - using empty object for compatibility
    aiMetadata: {},
    contentType: post.data.category || 'general',

    // 検索用テキストの最適化
    searchableText: [
      post.data.title,
      post.data.description,
      processedContent.cleanedText,
      ...(post.data.tags || []),
      post.data.category,
      post.data.difficulty,
      post.data.learningStage,
    ].join(" ").toLowerCase(),

    // フィーチャーフラグ
    isRecommended: false,
    isBeginner: post.data.difficulty === "beginner" || post.data.learningStage === "pemanasan",
    isTool: post.data.category === "tools" || post.data.title.toLowerCase().includes("anki"),
    hasCodeBlocks: processedContent.hasCode,
    hasImages: processedContent.hasImages,
  }
})

// パフォーマンス最適化のためのデータ処理（Astroネイティブ実装）
// useMemoの代わりにサーバーサイドでの事前計算を実行
const optimizedSearchData = searchDataItems.map(item => ({
  ...item,
  // 検索パフォーマンス向上のためのインデックス（サーバーサイドで事前計算）
  searchIndex: item.searchableText.split(' ').filter(word => word.length > 2),
  // 重み付けスコアの事前計算（サーバーサイドで事前計算）
  relevanceScore: calculateRelevanceScore(item)
}))

// 関連性スコアの計算
function calculateRelevanceScore(item: any): number {
  let score = 0
  
  // タイトルの重み
  if (item.title) score += 10
  
  // 説明の重み
  if (item.description) score += 5
  
  // タグの重み
  score += item.tags.length * 2
  
  // コンテンツ長の重み
  score += Math.min(item.contentLength / 1000, 10)
  
  return score
}

// AI processing removed - using simplified content system instead

// SEO data - Astroネイティブアプローチ（設定ファイル不要）
const seoData = {
  title: "Dokumentasi & Panduan",
  description: "Panduan lengkap untuk memulai perjalanan immersion bahasa Jepang Anda. Dari langkah pertama hingga tingkat lanjut.",
  keywords: ["dokumentasi", "panduan", "tutorial", "jepang", "belajar", "immersion"],
  pageType: "article" as const,
  author: "Tim GoRakuDo"
};

// Helper function to format numbers with K, M, B suffixes
function formatNumber(num: number): string {
  if (num >= 1000000000) {
    return (num / 1000000000).toFixed(1) + "B"
  } else if (num >= 1000000) {
    return (num / 1000000).toFixed(1) + "M"
  } else if (num >= 1000) {
    return (num / 1000).toFixed(1) + "K"
  }
  return num.toString()
}


function formatDate(dateString: string): string {
  const options: Intl.DateTimeFormatOptions = {
    year: "numeric",
    month: "long",
    day: "numeric",
  }

  // Validate input
  if (!dateString || typeof dateString !== "string") {
    logger.log(`Invalid date string provided: ${dateString}`, "warning")
    return "Invalid Date"
  }

  try {
    const date = new Date(dateString)
    if (isNaN(date.getTime())) {
      logger.log(`Invalid date format: ${dateString}`, "warning")
      return "Invalid Date"
    }

    return date.toLocaleDateString("id-ID", options)
  } catch (error) {
    logger.log(`Date formatting error: ${error}`, "error")
    return "Invalid Date"
  }
}
---

<!doctype html>
<html lang="id">
  <head>
    <!-- UnifiedSEO - Astroネイティブアプローチ（設定ファイル不要） -->
    <UnifiedSEO
      title={seoData.title}
      description={seoData.description}
      keywords={seoData.keywords}
      pageType={seoData.pageType}
      author={seoData.author}
      publishedDate={new Date().toISOString()}
      modifiedDate={new Date().toISOString()}
      gtag={import.meta.env.PUBLIC_GA_ID}
    />

    <link rel="stylesheet" href="" />
    <link
      href="https://fonts.googleapis.com/css2?family=Yuji+Syuku&family=Inter:wght@300;400;500;600;700&family=Lora:wght@400;600&family=Cedarville+Cursive&family=Gochi+Hand&display=swap"
      rel="stylesheet"
    />
    <!-- Fuse.js CDN読み込み削除 - npmパッケージとして動的インポート -->
    <!-- 削除理由: 
         1. 外部リソース依存の排除
         2. 型安全性の向上
         3. バンドル最適化の実現
         4. エラーハンドリングの改善 -->

    <!-- Global Client Logger -->
    <script>
      // Client-side logger for consistent console output - available globally
      window.clientLogger = {
        log: (message, level = "info") => {
          const emoji = { info: "ℹ️", success: "✅", warning: "⚠️", error: "❌" }[level]
          console.log(`${emoji} ${message}`)
        },
        startGroup: (title) => {
          console.log(`\n${"=".repeat(50)}`)
          console.log(`🚀 ${title}`)
          console.log(`${"=".repeat(50)}`)
        },
        endGroup: (title) => {
          console.log(`${"=".repeat(50)}`)
          console.log(`✅ ${title}`)
          console.log(`${"=".repeat(50)}\n`)
        },
      }
    </script>
  </head>
  <body>
    <!-- Navigation -->
    <Navbar client:visible />

    <!-- Background Elements -->
    <canvas id="waveCanvas" class="wave-canvas"></canvas>
    <div class="stars" id="starsContainer"></div>

    <!-- Main Content -->
    <main class="main-content">
      <div class="posts-page">
        <div class="posts-container" 
             id="postsContainer" 
             data-current-page={currentPage} 
             data-posts-per-page={postsPerPage} 
             data-total-posts={totalPosts} 
             data-search-data={JSON.stringify(optimizedSearchData)}
             data-fuse-config={JSON.stringify({
               keys: [
                 { name: 'title', weight: 0.7 },
                 { name: 'description', weight: 0.3 },
                 { name: 'content', weight: 0.2 },
                 { name: 'tags', weight: 0.1 },
                 { name: 'searchableText', weight: 0.15 }
               ],
               threshold: 0.4,
               minMatchCharLength: 2,
               includeScore: true,
               includeMatches: true
             })}
>
          <div class="posts-header">
            <h1>Dokumentasi & Panduan</h1>
            <p>
              Panduan lengkap untuk memulai perjalanan immersion bahasa Jepang Anda. Dari
              langkah pertama hingga tingkat lanjut.
            </p>
          </div>

          <!-- Breadcrumb Navigation -->
          <Breadcrumb currentPath="/docs" />

          <!-- Search Functionality -->
          <div class="search-container">
            <div class="search-header">
              <span class="search-icon">🔍</span>
              <h2 class="search-title">Cari Dokumentasi</h2>
            </div>

            <div class="search-input-group">
              <span class="search-input-icon">📝</span>
              <input
                type="text"
                id="searchInput"
                class="search-input search-input-loading"
                placeholder="Memuat sistem pencarian..."
                autocomplete="off"
                disabled
              />
              <div class="search-loading-indicator" id="searchLoadingIndicator">
                <!-- Compact Google 2025 Loading Spinner -->
                <div class="relative inline-flex items-center justify-center size-2.5">
                  <!-- Outer ring with subtle gradient -->
                  <div class="absolute inset-0 rounded-full border border-primary-200/20">
                  </div>
                  <!-- Spinning inner ring -->
                  <div
                    class="absolute inset-0 rounded-full border border-transparent border-t-primary-500 animate-spin">
                  </div>
                </div>
              </div>
            </div>

            <div class="search-filters">
              {/* "Semua" button - always present */}
              <button class="filter-button filter-button-loading active" data-filter="all"
                >Semua ({formatNumber(totalPosts)})</button
              >

              {/* Automatically generated filter buttons from content config */}
              {
                ContentConfigUtils.getSortedFilters()
                  .filter((filter) => filter.id !== "all") // Exclude "all" button as it's handled above
                  .map((filter) => {
                    const count = ContentConfigUtils.getFilterCount(sortedPosts, filter)
                    return (
                      <button
                        class="filter-button filter-button-loading"
                        data-filter={filter.name}
                        data-filter-type={filter.type}
                        data-filter-target={filter.target}
                        title={filter.description}>
                        {filter.icon} {filter.displayName}
                        {count > 0 && ` (${formatNumber(count)})`}
                      </button>
                    )
                  })
              }
            </div>

            <div class="search-suggestions" id="searchSuggestions" style="display: none;">
              <div class="suggestions-title">Saran Pencarian:</div>
              {
                ContentConfigUtils.getSearchSuggestions().map((suggestion) => (
                  <span class="suggestion-tag" data-suggestion={suggestion}>
                    {suggestion}
                  </span>
                ))
              }
            </div>
          </div>

          <!-- Search Results - Moved to appear immediately after search input -->
          <div id="searchResults" class="search-results hidden">
            <div class="search-stats" id="searchStats"></div>
            <div id="searchResultsContent"></div>
          </div>

          <!-- Loading State -->
          <div id="loadingState" class="loading-container" style="display: none;">
            <div class="skeleton-grid">
              {
                Array.from({ length: 3 }).map(() => (
                  <div class="skeleton-card">
                    <div class="skeleton-title" />
                    <div class="skeleton-description" />
                    <div class="skeleton-meta">
                      <div class="skeleton-date" />
                      <div class="skeleton-readtime" />
                    </div>
                  </div>
                ))
              }
            </div>
          </div>

          <!-- Content State -->
          <div id="contentState" class="posts-grid">
            {
              error ? (
                <div class="error-message">
                  <h2>❌ Error Loading Posts</h2>
                  <p>{error}</p>
                  <div class="error-actions">
                    <button onclick="window.location.reload()" class="docs-button">
                      🔄 Coba Lagi
                    </button>
                    <button onclick="window.location.href = '/'" class="docs-button secondary">
                      🏠 Kembali ke Beranda
                    </button>
                  </div>
                </div>
              ) : currentPosts.length === 0 ? (
                <div class="no-results">
                  <div class="no-results-icon">📚</div>
                  <h3>Belum Ada Dokumentasi</h3>
                  <p>Dokumentasi akan segera tersedia. Tetap pantau untuk pembaruan!</p>
                </div>
              ) : (
                currentPosts.map((post, index) => (
                  <article
                    class={`post-card post-card-${index % 4}`}
                    data-post-slug={post.slug}
                    data-learning-stage={
                      post.data.aiMetadata?.contentAnalysis?.learningStage || ""
                    }
                    data-content-type={post.data.aiMetadata?.contentType || ""}
                    data-is-recommended={
                      finalRecommendations.some((rec) => rec.slug === post.slug)
                        ? "true"
                        : "false"
                    }
                    data-is-beginner={
                      beginnerContent.some((beg) => beg.slug === post.slug)
                        ? "true"
                        : "false"
                    }
                    data-is-tool={
                      toolContent.some((tool) => tool.slug === post.slug)
                        ? "true"
                        : "false"
                    }>
                    {/* Emoji Display */}
                    {post.data.emoji && <div class="post-emoji">{post.data.emoji}</div>}
                    <div class="post-card-container">
                      <div class="post-header">
                        <h2 class="post-title">
                          <a href={post.resolvedPath || `/docs/${post.slug}`}>
                            {post.data.title}
                          </a>
                        </h2>
                        <div class="post-meta">
                          <span class="post-date">
                            {formatDate(post.data.publishedDate)}
                          </span>
                        </div>
                      </div>
                      <p class="post-description">{post.data.description}</p>
                      <div
                        class="post-tags"
                        data-all-tags={JSON.stringify(post.data.tags || [])}>
                        {post.data.tags?.slice(0, 3).map((tag: string) => (
                          <span class="post-tag">{tag}</span>
                        ))}
                        {post.data.tags && post.data.tags.length > 3 && (
                          <span
                            class="post-tag-more"
                            data-count={post.data.tags.length - 3}>
                            +{post.data.tags.length - 3}
                          </span>
                        )}
                      </div>
                      <a
                        href={post.resolvedPath || `/docs/${post.slug}`}
                        class="read-more-btn">
                        Baca Selengkapnya →
                      </a>
                    </div>
                  </article>
                ))
              )
            }
          </div>

          <!-- Pagination Controls -->
          <div id="paginationControls" class="pagination-container">
            <!-- ページネーションコントロールが動的に生成される -->
          </div>
          <!-- Call to Action -->
          <div class="features-cta">
            <div class="cta-content">
              <h3 class="cta-title">Berkontribusi pada Roadmap</h3>
              <p class="cta-description">
                Punya ide fitur atau dokumentasi yang ingin Anda lihat? Berikan masukan
                Anda untuk membantu membentuk masa depan platform ini.
              </p>
              <button
                class="cta-button"
                type="button"
                aria-label="Buka form masukan komunitas">
                <span class="cta-button-text">Berikan Masukan</span>
                <svg
                  class="cta-arrow"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2.5">
                  <path d="M5 12h14M12 5l7 7-7 7"></path>
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>
    </main>

    <script>
      // 0-Script最適化: 統合された初期化処理を使用
      document.addEventListener("DOMContentLoaded", async function () {
        const startTime = performance.now();

        try {
          // 0-Script最適化: サーバーサイドデータを直接取得
          const container = document.getElementById('postsContainer');
          if (!container) {
            throw new Error('Posts container not found');
          }

          // データ属性の検証と取得
          const currentPage = parseInt(container.dataset.currentPage || '1');
          const postsPerPage = parseInt(container.dataset.postsPerPage || '12');
          const totalPosts = parseInt(container.dataset.totalPosts || '0');
          const searchData = container.dataset.searchData ? JSON.parse(container.dataset.searchData) : [];
          const fuseConfig = container.dataset.fuseConfig ? JSON.parse(container.dataset.fuseConfig) : {};

          // 検索システム初期化（npmパッケージ版最適化）
          try {
            const { SearchLoadingManager } = await import('../scripts/type-scripts/docs/index/search/search-loading-manager');
            const searchLoadingManager = new SearchLoadingManager();
            await searchLoadingManager.initializeSearchSystem();
          } catch (error) {
            // Critical Errorのみログ出力
            if (window.clientLogger && window.clientLogger.log) {
              window.clientLogger.log(`Critical: Search system optimization failed: ${error}`, "error");
            }
            // 検索システムの最適化失敗は致命的ではないため、処理を続行
          }

        // アニメーション初期化（既存）
        try {
          if (window.initializeDocsWaveAnimation) {
            const cleanupWave = window.initializeDocsWaveAnimation();
            if (cleanupWave) {
              window.waveAnimation = { cleanup: cleanupWave };
              if (window.clientLogger && window.clientLogger.log) {
                window.clientLogger.log("Wave animation initialized for docs page", "success");
              }
            }
          }
        } catch (error) {
          if (window.clientLogger && window.clientLogger.log) {
            window.clientLogger.log(`Wave animation failed for docs page: ${error}`, "error");
          }
        }

        // 星空背景初期化（既存）
        try {
          if (window.initializeStars) {
            window.initializeStars();
            if (window.clientLogger && window.clientLogger.log) {
              window.clientLogger.log("Stars background initialized for docs page", "success");
            }
          }
        } catch (error) {
          if (window.clientLogger && window.clientLogger.log) {
            window.clientLogger.log(`Stars background failed for docs page: ${error}`, "error");
          }
        }

        // タグポップアップ初期化（既存）
        try {
          if (window.initializeTagPopups) {
            window.initializeTagPopups();
            if (window.clientLogger && window.clientLogger.log) {
              window.clientLogger.log("Tag popups initialized for docs page", "success");
            }
          }
        } catch (error) {
          if (window.clientLogger && window.clientLogger.log) {
            window.clientLogger.log(`Tag popups failed for docs page: ${error}`, "error");
          }
        }

          // コンテンツシステム初期化（0-Script最適化完成）
          try {
            const { ContentProcessor } = await import('../scripts/type-scripts/docs/index/content/content-processor');
            
            // 0-Script最適化完成: サーバーサイドデータを直接設定
            const contentProcessor = new ContentProcessor(currentPage, postsPerPage);
            contentProcessor.setServerData(searchData, totalPosts);

            window.contentProcessor = contentProcessor;
          } catch (error) {
            // Critical Errorのみログ出力
            if (window.clientLogger && window.clientLogger.log) {
              window.clientLogger.log(`Critical: Content system optimization failed: ${error}`, "error");
            }
            // コンテンツシステムの最適化失敗は致命的なため、エラーを再スロー
            throw error;
          }

          // 初期化完了

        } catch (error) {
          // Critical Errorのみログ出力
          if (window.clientLogger && window.clientLogger.log) {
            window.clientLogger.log(`Critical: Docs Page Loading Failed: ${error}`, "error");
          }
          
          // エラー時のフォールバック処理
          handleInitializationError(error);
        }

        if (window.clientLogger && window.clientLogger.log) {
          window.clientLogger.log("Docs Page Loaded Successfully!", "success");
        }
      });


      // エラー時のフォールバック処理
      function handleInitializationError(error: Error) {
        try {
          // エラーページへのリダイレクト
          const errorMessage = encodeURIComponent(error.message);
          window.location.href = `/error?type=initialization&message=${errorMessage}`;
        } catch (redirectError) {
          // リダイレクトも失敗した場合の最終フォールバック
          if (window.clientLogger && window.clientLogger.log) {
            window.clientLogger.log(`Critical: Failed to redirect to error page: ${redirectError}`, 'error');
          }
          document.body.innerHTML = `
            <div style="padding: 20px; text-align: center; font-family: Arial, sans-serif;">
              <h1>エラーが発生しました</h1>
              <p>ページの読み込み中にエラーが発生しました。しばらく時間をおいてから再度お試しください。</p>
              <button onclick="window.location.reload()" style="padding: 10px 20px; margin-top: 20px;">
                ページを再読み込み
              </button>
            </div>
          `;
        }
      }
    </script>

    <script>
      // Wave animation initialization for docs page

      let starsContainer: HTMLElement | null = null

      // Initialize wave animation for docs page
      window.initializeDocsWaveAnimation = function initializeDocsWaveAnimation(): (() => void) | undefined {
        if (window.clientLogger && window.clientLogger.log) {
          window.clientLogger.log("Initializing docs page wave animation...", "info")
        }

        const canvas = document.getElementById("waveCanvas")
        if (!canvas) {
          if (window.clientLogger && window.clientLogger.log) {
            window.clientLogger.log("Wave canvas not found for docs page", "warning")
          }
          return undefined
        }

        const ctx = (canvas as HTMLCanvasElement)?.getContext("2d")
        if (!ctx) {
          if (window.clientLogger && window.clientLogger.log) {
            window.clientLogger.log(
              "Canvas context not available for docs page",
              "warning"
            )
          }
          return undefined
        }

        let animationId: number | null = null
        let time = 0

        // Wave configuration for docs page
        const waves = [
          {
            amplitude: 35,
            frequency: 0.008,
            speed: 0.015,
            offset: 0,
            color: "rgba(139, 93, 255, 0.06)",
            y: 0.75,
            yPos: 0, // Will be set in resizeCanvas
          },
          {
            amplitude: 45,
            frequency: 0.006,
            speed: -0.012,
            offset: Math.PI / 3,
            color: "rgba(139, 93, 255, 0.04)",
            y: 0.8,
            yPos: 0, // Will be set in resizeCanvas
          },
          {
            amplitude: 30,
            frequency: 0.01,
            speed: 0.018,
            offset: Math.PI / 2,
            color: "rgba(139, 93, 255, 0.03)",
            y: 0.85,
            yPos: 0, // Will be set in resizeCanvas
          },
        ]

        function resizeCanvas() {
          const width = window.innerWidth
          const height = window.innerHeight
          ;(canvas as HTMLCanvasElement).width = width
          ;(canvas as HTMLCanvasElement).height = height

          // Update wave y positions based on new height
          waves.forEach((wave) => {
            wave.yPos = height * wave.y
          })
        }

        function animate() {
          if (!ctx) return

          ctx.clearRect(
            0,
            0,
            (canvas as HTMLCanvasElement).width,
            (canvas as HTMLCanvasElement).height
          )

          // Create gradient background
          const gradient = ctx.createLinearGradient(
            0,
            0,
            0,
            (canvas as HTMLCanvasElement).height
          )
          gradient.addColorStop(0, "rgba(10, 10, 10, 1)")
          gradient.addColorStop(0.6, "rgba(10, 10, 10, 0.98)")
          gradient.addColorStop(1, "rgba(139, 93, 255, 0.015)")
          ctx.fillStyle = gradient
          ctx.fillRect(
            0,
            0,
            (canvas as HTMLCanvasElement).width,
            (canvas as HTMLCanvasElement).height
          )

          // Draw waves
          waves.forEach((wave) => {
            ctx.beginPath()

            // Create wave path
            for (let x = 0; x <= (canvas as HTMLCanvasElement).width + 10; x += 2) {
              const y =
                wave.yPos +
                Math.sin(x * wave.frequency + time * wave.speed + wave.offset) *
                  wave.amplitude

              if (x === 0) {
                ctx.moveTo(x, y)
              } else {
                ctx.lineTo(x, y)
              }
            }

            // Close the path to create filled area
            ctx.lineTo(
              (canvas as HTMLCanvasElement).width,
              (canvas as HTMLCanvasElement).height
            )
            ctx.lineTo(0, (canvas as HTMLCanvasElement).height)
            ctx.closePath()

            ctx.fillStyle = wave.color
            ctx.fill()

            // Add subtle stroke for more definition
            ctx.strokeStyle = "rgba(139, 93, 255, 0.08)"
            ctx.lineWidth = 0.5
            ctx.stroke()
          })

          time += 0.5
          animationId = requestAnimationFrame(animate)
        }

        // Initialize
        resizeCanvas()
        animate()

        // Handle window resize
        const handleResize = () => {
          resizeCanvas()
        }
        window.addEventListener("resize", handleResize)

        // Return cleanup function
        return () => {
          if (animationId) {
            cancelAnimationFrame(animationId)
          }
          window.removeEventListener("resize", handleResize)
        }
      }

      // Wave animation initialization moved to integrated initialization

      // Cleanup on page unload
      window.addEventListener("beforeunload", function () {
        if (window.waveAnimation) {
          window.waveAnimation.cleanup()
        }
      })

      // Initialize stars background
      window.initializeStars = function initializeStars() {
        if (window.clientLogger && window.clientLogger.log) {
          window.clientLogger.log(
            "Initializing stars background for docs page...",
            "info"
          )
        }

        const container = document.getElementById("starsContainer")
        if (!container) {
          if (window.clientLogger && window.clientLogger.log) {
            window.clientLogger.log("Stars container not found for docs page", "warning")
          }
          return
        }

        // Create stars
        const starCount = 25
        for (let i = 0; i < starCount; i++) {
          const star = document.createElement("div")
          star.className = "star"
          star.style.left = Math.random() * 100 + "%"
          star.style.top = Math.random() * 100 + "%"
          star.style.animationDelay = Math.random() * 3 + "s"
          star.style.animationDuration = 2 + Math.random() * 2 + "s"
          container.appendChild(star)
        }

        if (window.clientLogger && window.clientLogger.log) {
          window.clientLogger.log("Stars background initialized", "success")
        }
      }


      // Tag Popup Functionality
      window.initializeTagPopups = function initializeTagPopups() {
        if (window.clientLogger && window.clientLogger.log) {
          window.clientLogger.log("Initializing minimalist tag popups...", "info")
        }

        const tagContainers = document.querySelectorAll(".post-tags")

        tagContainers.forEach((container) => {
          const moreButton = container.querySelector(".post-tag-more")
          if (!moreButton) return

          // Type-safe dataset access
          const containerElement = container as HTMLElement
          const allTags = JSON.parse(containerElement.dataset.allTags || "[]")
          const hiddenTags = allTags.slice(3)

          if (hiddenTags.length === 0) return

          let popup: HTMLElement | null = null

          // Create popup element
          function createPopup(): void {
            popup = document.createElement("div")
            popup.className = "tag-popup"

            const header = document.createElement("div")
            header.className = "tag-popup-header"
            header.textContent = "Tag Lain-nya:"

            const content = document.createElement("div")
            content.className = "tag-popup-content"

            hiddenTags.forEach((tag: string) => {
              const tagElement = document.createElement("span")
              tagElement.className = "tag-popup-tag"
              tagElement.textContent = tag
              content.appendChild(tagElement)
            })

            popup.appendChild(header)
            popup.appendChild(content)
            container.appendChild(popup)
          }

          // Show popup with accessibility
          function showPopup(): void {
            if (!popup) createPopup()
            if (popup) {
              popup.classList.add("show")
              popup.setAttribute("aria-hidden", "false")
              moreButton?.setAttribute("aria-expanded", "true")
            }
          }

          // Hide popup
          function hidePopup(): void {
            if (popup) {
              popup.classList.remove("show")
              popup.setAttribute("aria-hidden", "true")
              moreButton?.setAttribute("aria-expanded", "false")
            }
          }

          // Event listeners
          moreButton?.addEventListener("mouseenter", showPopup)
          moreButton?.addEventListener("mouseleave", hidePopup)

          // Touch support for mobile
          moreButton?.addEventListener("touchstart", (e) => {
            e.preventDefault()
            if (popup && popup.classList.contains("show")) {
              hidePopup()
            } else {
              showPopup()
            }
          })

          // Accessibility - keyboard support
          moreButton?.addEventListener("keydown", (e) => {
            const keyEvent = e as KeyboardEvent
            if (keyEvent.key === "Enter" || keyEvent.key === " ") {
              e.preventDefault()
              if (popup && popup.classList.contains("show")) {
                hidePopup()
              } else {
                showPopup()
              }
            }
            if ((e as KeyboardEvent).key === "Escape") {
              hidePopup()
            }
          })

          // Set ARIA attributes
          moreButton.setAttribute("role", "button")
          moreButton.setAttribute("aria-expanded", "false")
          moreButton.setAttribute("aria-haspopup", "true")
          moreButton.setAttribute("tabindex", "0")
          moreButton.setAttribute(
            "aria-label",
            `Tampilkan ${hiddenTags.length} tag lainnya`
          )
        })

        if (window.clientLogger && window.clientLogger.log) {
          window.clientLogger.log("Tag popups initialized", "success")
        }
      }

      // All initialization moved to integrated initialization above
    </script>
  </body>
</html>
