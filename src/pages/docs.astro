---
// TypeScript declarations moved to shared types

import { getCollection } from "astro:content"
import type { CollectionEntry } from "astro:content"
import UnifiedSEO from "../components/UnifiedSEO.astro"
import Breadcrumb from "../components/public-components/Breadcrumb.astro"
import Navbar from "../components/public-components/Navbar.vue"
import "../styles/docs/docs.css"
import { resolvePath, getCollectionInfo } from "../utils/collections"
// AI content utilities removed - functionality no longer needed
// import { triggerAIBuildProcessing, testAIFunctionality } from "../utils/ai" - removed
// Optimized build processing removed - no longer needed
// import {
//   runOptimizedBuildProcessing,
//   shouldEnableOptimizedProcessing,
// } from "../utils/ai-content"
// Semantic relationships removed - functionality no longer needed
import { CONTENT_CONFIG, ContentConfigUtils } from "../content/content-config"

import { logger, ConsoleLogger } from "../utils/logging/console-logger"

// Set global build mode to suppress console output during build
ConsoleLogger.setGlobalBuildMode(true)
// Set critical errors only mode - only show critical errors
ConsoleLogger.setGlobalCriticalErrorsOnly(true)

// Astro-native content loading with proper typing
const posts: CollectionEntry<"docs">[] = await getCollection("docs")
const error: string | null = null

logger.log(`Posts loaded: ${posts.length}`, "success")

// Sort posts by published date (newest first)
const sortedPosts = posts.sort(
  (a, b) =>
    new Date(b.data.publishedDate).getTime() - new Date(a.data.publishedDate).getTime()
)

// Pagination configuration
const POSTS_PER_PAGE = 6 // Show 6 posts per page
const totalPosts = sortedPosts.length
const totalPages = Math.ceil(totalPosts / POSTS_PER_PAGE)

// Get current page from URL or default to 1
const currentPage = 1 // For static generation, we'll handle pagination client-side

// Calculate pagination info
const startIndex = 0
const endIndex = Math.min(POSTS_PER_PAGE, totalPosts)
const currentPosts = sortedPosts.slice(startIndex, endIndex)

// Clean pagination logging
logger.logPaginationInfo(totalPosts, POSTS_PER_PAGE, currentPage)

// Demonstrate automatic AI metadata generation (using all posts for metadata)
// AI metadata generation started - temporarily disabled for build stability
const postsWithAI = sortedPosts // Use regular posts for now
// Posts with AI metadata: ${postsWithAI.length}

const beginnerContent = sortedPosts.filter(
  (post) => post.data.learningStage === "pemanasan" || post.data.difficulty === "beginner"
)
// Beginner content found: ${beginnerContent.length}

// Simplified content processing - moved to TypeScript modules
const processedPosts = sortedPosts.map((post) => ({
  ...post,
  resolvedPath: resolvePath("docs", post.slug),
  collectionMetadata: getCollectionInfo("docs"),
}))

// Content processing moved to TypeScript modules for better maintainability

// Optimized AI processing removed - no longer needed
// Trigger optimized AI processing during build
// if (shouldEnableOptimizedProcessing()) {
//   logger.startGroup("Optimized Build Processing")
//   logger.log("Running optimized build processing...")
//   const result = await runOptimizedBuildProcessing(sortedPosts)
//   logger.logSummary("Processing Results", {
//     "Processed posts": result.stats.processedPosts,
//     "Skipped posts": result.stats.skippedPosts,
//     "Total posts": result.stats.totalPosts,
//   })
//   logger.endGroup()
// } else {
  logger.log("Optimized processing disabled - fallback removed", "warning")
  // triggerAIBuildProcessing() - removed
// }

// SEO data - Astro„Éç„Ç§„ÉÜ„Ç£„Éñ„Ç¢„Éó„É≠„Éº„ÉÅÔºàË®≠ÂÆö„Éï„Ç°„Ç§„É´‰∏çË¶ÅÔºâ
const seoData = {
  title: "Dokumentasi & Panduan",
  description: "Panduan lengkap untuk memulai perjalanan immersion bahasa Jepang Anda. Dari langkah pertama hingga tingkat lanjut.",
  keywords: ["dokumentasi", "panduan", "tutorial", "jepang", "belajar", "immersion"],
  pageType: "article" as const,
  author: "Tim GoRakuDo"
};

// Helper function to format numbers with K, M, B suffixes
function formatNumber(num: number): string {
  if (num >= 1000000000) {
    return (num / 1000000000).toFixed(1) + "B"
  } else if (num >= 1000000) {
    return (num / 1000000).toFixed(1) + "M"
  } else if (num >= 1000) {
    return (num / 1000).toFixed(1) + "K"
  }
  return num.toString()
}


// Type-safe date formatting function
function formatDate(dateString: string): string {
  const options: Intl.DateTimeFormatOptions = {
    year: "numeric",
    month: "long",
    day: "numeric",
  }

  // Validate input with strict type checking
  if (!dateString || typeof dateString !== "string") {
    logger.log(`Invalid date string provided: ${dateString}`, "warning")
    return "Invalid Date"
  }

  try {
    const date = new Date(dateString)
    if (isNaN(date.getTime())) {
      logger.log(`Invalid date format: ${dateString}`, "warning")
      return "Invalid Date"
    }

    return date.toLocaleDateString("id-ID", options)
  } catch (error: unknown) {
    logger.log(`Date formatting error: ${error}`, "error")
    return "Invalid Date"
  }
}
---

<!doctype html>
<html lang="id">
  <head>
    <!-- UnifiedSEO - Astro„Éç„Ç§„ÉÜ„Ç£„Éñ„Ç¢„Éó„É≠„Éº„ÉÅÔºàË®≠ÂÆö„Éï„Ç°„Ç§„É´‰∏çË¶ÅÔºâ -->
    <UnifiedSEO
      title={seoData.title}
      description={seoData.description}
      keywords={seoData.keywords}
      pageType={seoData.pageType}
      author={seoData.author}
      publishedDate={new Date().toISOString()}
      modifiedDate={new Date().toISOString()}
      gtag={import.meta.env.PUBLIC_GA_ID}
    />

    <link rel="stylesheet" href="/css/homepage-styles.css" />
    <link
      href="https://fonts.googleapis.com/css2?family=Yuji+Syuku&family=Inter:wght@300;400;500;600;700&family=Lora:wght@400;600&family=Cedarville+Cursive&family=Gochi+Hand&display=swap"
      rel="stylesheet"
    />
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/fuse.js@7.1.0/dist/fuse.min.js"></script>

    <!-- Global Client Logger -->
    <script>
      // Client-side logger for consistent console output - available globally
      window.clientLogger = {
        log: (message, level = "info") => {
          const emoji = { info: "‚ÑπÔ∏è", success: "‚úÖ", warning: "‚ö†Ô∏è", error: "‚ùå" }[level]
          console.log(`${emoji} ${message}`)
        },
        startGroup: (title) => {
          console.log(`\n${"=".repeat(50)}`)
          console.log(`üöÄ ${title}`)
          console.log(`${"=".repeat(50)}`)
        },
        endGroup: (title) => {
          console.log(`${"=".repeat(50)}`)
          console.log(`‚úÖ ${title}`)
          console.log(`${"=".repeat(50)}\n`)
        },
      }
    </script>
  </head>
  <body>
    <!-- Navigation -->
    <Navbar client:visible />

    <!-- Background Elements -->
    <canvas id="waveCanvas" class="wave-canvas"></canvas>
    <div class="stars" id="starsContainer"></div>

    <!-- Main Content -->
    <main class="main-content">
      <div class="posts-page">
        <div class="posts-container" id="postsContainer">
          <div class="posts-header">
            <h1>Dokumentasi & Panduan</h1>
            <p>
              Panduan lengkap untuk memulai perjalanan immersion bahasa Jepang Anda. Dari
              langkah pertama hingga tingkat lanjut.
            </p>
          </div>

          <!-- Breadcrumb Navigation -->
          <Breadcrumb currentPath="/docs" />

          <!-- Search Functionality -->
          <div class="search-container">
            <div class="search-header">
              <span class="search-icon">üîç</span>
              <h2 class="search-title">Cari Dokumentasi</h2>
            </div>

            <div class="search-input-group">
              <span class="search-input-icon">üìù</span>
              <input
                type="text"
                id="searchInput"
                class="search-input search-input-loading"
                placeholder="Memuat sistem pencarian..."
                autocomplete="off"
                disabled
              />
              <div class="search-loading-indicator" id="searchLoadingIndicator">
                <!-- Compact Google 2025 Loading Spinner -->
                <div class="relative inline-flex items-center justify-center size-2.5">
                  <!-- Outer ring with subtle gradient -->
                  <div class="absolute inset-0 rounded-full border border-primary-200/20">
                  </div>
                  <!-- Spinning inner ring -->
                  <div
                    class="absolute inset-0 rounded-full border border-transparent border-t-primary-500 animate-spin">
                  </div>
                </div>
              </div>
            </div>

            <div class="search-filters">
              {/* "Semua" button - always present */}
              <button class="filter-button filter-button-loading active" data-filter="all"
                >Semua ({formatNumber(totalPosts)})</button
              >

              {/* Automatically generated filter buttons from content config */}
              {
                ContentConfigUtils.getSortedFilters()
                  .filter((filter) => filter.id !== "all") // Exclude "all" button as it's handled above
                  .map((filter) => {
                    const count = ContentConfigUtils.getFilterCount(sortedPosts, filter)
                    return (
                      <button
                        class="filter-button filter-button-loading"
                        data-filter={filter.name}
                        data-filter-type={filter.type}
                        data-filter-target={filter.target}
                        title={filter.description}>
                        {filter.icon} {filter.displayName}
                        {count > 0 && ` (${formatNumber(count)})`}
                      </button>
                    )
                  })
              }
            </div>

            <div class="search-suggestions" id="searchSuggestions" style="display: none;">
              <div class="suggestions-title">Saran Pencarian:</div>
              {
                ContentConfigUtils.getSearchSuggestions().map((suggestion) => (
                  <span class="suggestion-tag" data-suggestion={suggestion}>
                    {suggestion}
                  </span>
                ))
              }
            </div>
          </div>

          <!-- Search Results - Moved to appear immediately after search input -->
          <div id="searchResults" class="search-results hidden">
            <div class="search-stats" id="searchStats"></div>
            <div id="searchResultsContent"></div>
          </div>

          <!-- Loading State -->
          <div id="loadingState" class="loading-container" style="display: none;">
            <div class="skeleton-grid">
              {
                Array.from({ length: 3 }).map(() => (
                  <div class="skeleton-card">
                    <div class="skeleton-title" />
                    <div class="skeleton-description" />
                    <div class="skeleton-meta">
                      <div class="skeleton-date" />
                      <div class="skeleton-readtime" />
                    </div>
                  </div>
                ))
              }
            </div>
          </div>

          <!-- Content State - Simplified -->
          <div id="contentState" class="posts-grid">
            {
              error ? (
                <div class="error-message">
                  <h2>‚ùå Error Loading Posts</h2>
                  <p>{error}</p>
                  <div class="error-actions">
                    <button onclick="location.reload()" class="docs-button">üîÑ Coba Lagi</button>
                    <button onclick="window.location.href='/'" class="docs-button secondary">üè† Kembali ke Beranda</button>
                  </div>
                </div>
              ) : processedPosts.length === 0 ? (
                <div class="no-results">
                  <div class="no-results-icon">üìö</div>
                  <h3>Belum Ada Dokumentasi</h3>
                  <p>Dokumentasi akan segera tersedia. Tetap pantau untuk pembaruan!</p>
                </div>
              ) : (
                processedPosts.slice(0, 6).map((post, index) => (
                  <article class={`post-card post-card-${index % 4}`} data-post-slug={post.slug}>
                    {post.data.emoji && <div class="post-emoji">{post.data.emoji}</div>}
                    <div class="post-card-container">
                      <div class="post-header">
                        <h2 class="post-title">
                          <a href={post.resolvedPath}>{post.data.title}</a>
                        </h2>
                        <div class="post-meta">
                          <span class="post-date">{formatDate(post.data.publishedDate)}</span>
                        </div>
                      </div>
                      <p class="post-description">{post.data.description}</p>
                      <div class="post-tags" data-all-tags={JSON.stringify(post.data.tags || [])}>
                        {post.data.tags?.slice(0, 3).map((tag: string) => (
                          <span class="post-tag">{tag}</span>
                        ))}
                        {post.data.tags && post.data.tags.length > 3 && (
                          <span class="post-tag-more" data-count={post.data.tags.length - 3}>
                            +{post.data.tags.length - 3}
                          </span>
                        )}
                      </div>
                      <a href={post.resolvedPath} class="read-more-btn">Baca Selengkapnya ‚Üí</a>
                    </div>
                  </article>
                ))
              )
            }
          </div>

          <!-- Pagination Controls -->
          {
            totalPages > 1 && (
              <div class="pagination-container" id="paginationContainer">
                <div class="pagination-info">
                  <span class="pagination-stats">
                    Menampilkan {startIndex + 1}-{endIndex} dari {totalPosts} dokumentasi
                  </span>
                </div>
                <div class="pagination-controls">
                  <button
                    class="pagination-btn prev-btn"
                    disabled={currentPage === 1}
                    data-page={currentPage - 1}>
                    ‚Üê Sebelumnya
                  </button>
                  <div class="pagination-numbers">
                    {Array.from({ length: totalPages }, (_, i) => i + 1).map(
                      (pageNum) => (
                        <button
                          class={`pagination-number ${pageNum === currentPage ? "active" : ""}`}
                          data-page={pageNum}>
                          {pageNum}
                        </button>
                      )
                    )}
                  </div>
                  <button
                    class="pagination-btn next-btn"
                    disabled={currentPage === totalPages}
                    data-page={currentPage + 1}>
                    Selanjutnya ‚Üí
                  </button>
                </div>
                <div class="pagination-toggle">
                  <label class="pagination-mode-toggle">
                    <input type="checkbox" id="infiniteScrollToggle" />
                    <span class="toggle-slider" />
                    <span class="toggle-label">Infinite Scroll</span>
                  </label>
                </div>
              </div>
            )
          }
          <!-- Call to Action -->
          <div class="features-cta">
            <div class="cta-content">
              <h3 class="cta-title">Berkontribusi pada Roadmap</h3>
              <p class="cta-description">
                Punya ide fitur atau dokumentasi yang ingin Anda lihat? Berikan masukan
                Anda untuk membantu membentuk masa depan platform ini.
              </p>
              <button
                class="cta-button"
                type="button"
                aria-label="Buka form masukan komunitas">
                <span class="cta-button-text">Berikan Masukan</span>
                <svg
                  class="cta-arrow"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2.5">
                  <path d="M5 12h14M12 5l7 7-7 7"></path>
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>
    </main>

    <!-- Astro-native client directives for selective hydration -->
    <script>
      import { initializeDocsScripts } from '../scripts/type-scripts/pages/docs/index.js';
      import { initializeTagPopups, setupDocsNavigation } from '../scripts/type-scripts/pages/docs/docs-integration.js';

      // Initialize only essential functionality
      initializeDocsScripts();
      setupDocsNavigation();
    </script>

    <!-- Tag popups - load only when needed -->
    <script>
      // Defer tag popups initialization to improve initial page load
      setTimeout(() => {
        import('../scripts/type-scripts/pages/docs/docs-integration.js').then(({ initializeTagPopups }) => {
          initializeTagPopups();
        });
      }, 100);
    </script>

    <!-- Enhanced Search Engine Implementation - ÂâäÈô§Ê∏à„ÅøÔºàTypeScriptÂàÜÈõ¢Ê∏à„ÅøÔºâ -->
    <!-- ModernSearchEngine„ÇØ„É©„Çπ„ÅØ src/scripts/type-scripts/pages/docs/ModernSearchEngine.ts „Å´ÁßªÂãïÊ∏à„Åø -->

    <!-- üåä DOCS PAGE WAVE ANIMATION INITIALIZATION - ÂâäÈô§Ê∏à„ÅøÔºàTypeScriptÂàÜÈõ¢Ê∏à„ÅøÔºâ -->
    <!-- WaveAnimationManager„ÇØ„É©„Çπ„ÅØ src/scripts/type-scripts/pages/docs/WaveAnimationManager.ts „Å´ÁßªÂãïÊ∏à„Åø -->

  </body>
</html>
