---
// ========== IMPORTS ==========
import { CldImage } from 'astro-cloudinary';
import BaseLayout from '../../layouts/BaseLayout.astro';
import PageHeader from '../../components/ui/PageHeader.astro';
import ChannelCard from '../../components/content/ChannelCard.astro';
import channelsDataRaw from '../../data/youtube-channels.json';
import youtubeSeoData from '../../data/seo/pages/youtube-rekomendasi.json';
// Cloudinary image public IDs
const heroImage = 'gorakudo-rekomendasi-youtube_oos0gu';
const podcastImage = 'gorakudo-radio-podcast_lrlfmn';
const mediaImage = 'gorakudo-tv-media_maayuy';
import '../../styles/pages/youtube-rekomendasi/youtube-rekomendasi-index.css';

// ========== DATA PROCESSING ==========
const { sections } = channelsDataRaw;
const seoData = youtubeSeoData.seoData;

// テンプレート変数置き換え関数
const replaceTemplateVars = (template: any, vars: Record<string, string>): any => {
  if (typeof template === 'string') {
    return template.replace(/\{\{(\w+)\}\}/g, (_, key) => vars[key] || template);
  }
  if (Array.isArray(template)) return template.map(item => replaceTemplateVars(item, vars));
  if (template && typeof template === 'object') {
    const result: any = {};
    for (const [key, value] of Object.entries(template)) {
      result[key] = replaceTemplateVars(value, vars);
    }
    return result;
  }
  return template;
};

const templateVars = {
  seoTitle: seoData.title,
  seoDescription: seoData.description,
};

const structuredData = replaceTemplateVars(youtubeSeoData.structuredData, templateVars);
const breadcrumbData = youtubeSeoData.breadcrumbData;

// ========== HEADER IMAGE CONFIG ==========
const headerImageId = heroImage; // PageHeaderで使用されている画像ID
const headerImageUrl = `https://res.cloudinary.com/dbvd1cm7u/image/upload/${headerImageId}`;

// ========== STRUCTURED DATA ==========
const breadcrumbSchema = {
  '@context': 'https://schema.org' as const,
  '@type': 'BreadcrumbList' as const,
  itemListElement: breadcrumbData.items.map((item, index) => ({
    '@type': 'ListItem' as const,
    position: index + 1,
    name: item.name,
    item: item.url,
  })),
};

const faqSchema = {
  '@context': 'https://schema.org' as const,
  '@type': 'FAQPage' as const,
  mainEntity: structuredData.faq.mainEntity.map(faq => ({
    '@type': 'Question' as const,
    name: faq.name,
    acceptedAnswer: {
      '@type': 'Answer' as const,
      text: faq.acceptedAnswer.text,
    },
  })),
} as const;

const collectionPageSchema = {
  ...structuredData.collectionPage,
  url: String(Astro.site || 'https://gorakudo.org') + Astro.url.pathname,
};
---

<BaseLayout
  title={seoData.title}
  description={seoData.description}
  lang={seoData.lang}
  pageType={seoData.pageType as 'article' | 'website'}
  author={seoData.author}
  publishedDate={seoData.publishedDate}
  articleKeywords={seoData.articleKeywords}
  breadcrumbSchema={breadcrumbSchema}
  faqSchema={faqSchema}
  collectionPageSchema={collectionPageSchema}
  ogImage={headerImageUrl}
>
  <main class='rc-channel-page' role='main'>
    <!-- ページヘッダー -->
    <PageHeader
      title="Rekomendasi Channel YouTube Belajar Bahasa Jepang Terbaik"
      description="Kumpulan channel YouTube terbaik untuk belajar bahasa Jepang yang disesuaikan berdasarkan kemampuan pembelajar. Berdasrakan Metodologi Lingustik Modern 'Comprehensible Input'."
      imageSrc={headerImageId}
      imageAlt="Japanese Learning Illustration - Person relaxing on beach with Mount Fuji background"
      imageWidth={350}
      loading="eager"
      fetchpriority="high"
    />

    </header>

    <!-- ナビゲーションボタンセクション -->
    <nav class='rc-navigation-buttons'>
      <div class='rc-nav-buttons-container'>
        <button 
          class='rc-nav-button rc-nav-button-native glassmorphism' 
          onclick="scrollToSection('native-title')"
          aria-label="Native Level+ タイトルにスクロール"
        >
          <span class='rc-nav-button-icon'>
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chart-no-axes-combined-icon lucide-chart-no-axes-combined"><path d="M12 16v5"/><path d="M16 14v7"/><path d="M20 10v11"/><path d="m22 3-8.646 8.646a.5.5 0 0 1-.708 0L9.354 8.354a.5.5 0 0 0-.707 0L2 15"/><path d="M4 18v3"/><path d="M8 14v7"/></svg>
          </span>
          <span class='rc-nav-button-text'>Native Level+</span>
          <span class='rc-nav-button-subtitle'>( Difficulty MAX )</span>
        </button>
        
        <button 
          class='rc-nav-button rc-nav-button-podcast glassmorphism' 
          onclick="scrollToSection('podcast-title')"
          aria-label="Podcast & Audio Learning タイトルにスクロール"
        >
          <span class='rc-nav-button-icon'>
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-podcast-icon lucide-podcast"><path d="M13 17a1 1 0 1 0-2 0l.5 4.5a0.5 0.5 0 0 0 1 0z" fill="currentColor"/><path d="M16.85 18.58a9 9 0 1 0-9.7 0"/><path d="M8 14a5 5 0 1 1 8 0"/><circle cx="12" cy="11" r="1" fill="currentColor"/></svg>
          </span>
          <span class='rc-nav-button-text'>Podcast & Audio</span>
          <span class='rc-nav-button-subtitle'>( Difficulty MIX )</span>
        </button>
        
        <button 
          class='rc-nav-button rc-nav-button-media glassmorphism' 
          onclick="scrollToSection('media-title')"
          aria-label="Media & TV News タイトルにスクロール"
        >
          <span class='rc-nav-button-icon'>
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-newspaper-icon lucide-newspaper"><path d="M15 18h-5"/><path d="M18 14h-8"/><path d="M4 22h16a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v16a2 2 0 0 1-4 0v-9a2 2 0 0 1 2-2h2"/><rect width="8" height="4" x="10" y="6" rx="1"/></svg>
          </span>
          <span class='rc-nav-button-text'>Media & TV News</span>
          <span class='rc-nav-button-subtitle'>( Difficulty MIX )</span>
        </button>
      </div>
    </nav>

    <!-- メインコンテンツエリア -->
    <div class='rc-main-content'>
      <!-- チャンネルセクション -->
      {
        sections.map((section, sectionIndex) => (
          <section 
            class='rc-channels-section'
            id={section.sectionType === 'podcast' ? 'podcast-section' : 
                section.sectionType === 'media' ? 'media-section' : 
                section.sectionTitle.includes('Native Level+') ? 'native-section' : 
                `section-${sectionIndex}`}
          >
            {section.sectionType === 'podcast' ? (
              <!-- Podcast専用レイアウト -->
              <div class='rc-section-header'>
                <div class='rc-section-header-content'>
                  <div class='rc-section-title-section'>
                    <h2 
                      class='rc-section-title-main'
                      id='podcast-title'
                    >{section.sectionTitle}</h2>
                  </div>
                  <div class='rc-section-content-right'>
                    <div class='rc-section-image-section'>
                      <CldImage
                        src={podcastImage}
                        alt='Podcast Learning Illustration'
                        quality='auto'
                        class='rc-section-hero-image'
                        loading='lazy'
                        decoding='async'
                      />
                    </div>
                  </div>
                  <div class='rc-section-content-frame'>
                    <div class='rc-section-description-section'>
                      <p class='rc-section-description'>{section.sectionDescription}</p>
                    </div>
                  </div>
                </div>
              </div>
            ) : section.sectionType === 'media' ? (
              <!-- Media専用レイアウト -->
              <div class='rc-section-header'>
                <div class='rc-section-header-content'>
                  <div class='rc-section-title-section'>
                    <h2 
                      class='rc-section-title-main'
                      id='media-title'
                    >{section.sectionTitle}</h2>
                  </div>
                  <div class='rc-section-content-right'>
                    <div class='rc-section-image-section'>
                      <CldImage
                        src={mediaImage}
                        alt='Media & TV News Learning Illustration'
                        quality='auto'
                        class='rc-section-hero-image'
                        loading='lazy'
                        decoding='async'
                      />
                    </div>
                  </div>
                  <div class='rc-section-content-frame'>
                    <div class='rc-section-description-section'>
                      <p class='rc-section-description'>{section.sectionDescription}</p>
                    </div>
                  </div>
                </div>
              </div>
            ) : (
              <!-- 通常のセクションタイトル -->
              <h2 
                class='rc-channels-title'
                id={section.sectionTitle.includes('Native Level+') ? 'native-title' : 
                    `title-${sectionIndex}`}
              >{section.sectionTitle}</h2>
            )}
            <div
              id={`channels-grid-${sectionIndex}`}
              class='rc-channels-grid'
              role='tabpanel'
            >
              {section.channels.map(channel => (
              <article class='rc-channel-item'>
                <ChannelCard
                  channelCover={channel.channelCover}
                  channelName={channel.channelName}
                  channelProfile={channel.channelProfile}
                  channelURL={channel.channelURL}
                />
              </article>
              ))}
            </div>
          </section>
            ))
          }
    </div>
  </main>



  <!-- ========== SCRIPTS ========== -->
  <script is:inline>

    // Lazy loading
    const initLazyLoading = () => {
      if (!('IntersectionObserver' in window)) return;

      const imageObserver = new IntersectionObserver(
        entries => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              const img = entry.target;
              if (img.dataset.src) {
                img.src = img.dataset.src;
                img.removeAttribute('data-src');
                imageObserver.unobserve(img);
              }
            }
          });
        },
        { rootMargin: '50px 0px', threshold: 0.01 }
      );

      document.addEventListener('DOMContentLoaded', () => {
        const lazyImages = document.querySelectorAll('img[data-src]');
        lazyImages.forEach(img => imageObserver.observe(img));
      });
    };

    // Scroll optimization
    const initScrollOptimization = () => {
      let scrollTimeout;
      window.addEventListener('scroll', () => {
        if (scrollTimeout) clearTimeout(scrollTimeout);
        
        scrollTimeout = setTimeout(() => {
          const scrollY = window.scrollY;
          const windowHeight = window.innerHeight;
          const documentHeight = document.documentElement.scrollHeight;
          const scrollProgress = (scrollY / (documentHeight - windowHeight)) * 100;
          
          if (scrollProgress > 0 && scrollProgress < 100) {
            // Scroll-related processing
          }
        }, 16);
      });
    };

    // Initialize all
    const init = () => {
      initLazyLoading();
      initScrollOptimization();
    };

    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', init);
    } else {
      init();
    }
  </script>

  <!-- スクリーンリーダー用スタイル -->
  <style>
    .sr-only {
      position: absolute;
      overflow: hidden;
      width: 1px;
      height: 1px;
      margin: -1px;
      padding: 0;
      border: 0;
      white-space: nowrap;
      clip-path: inset(50%);
    }
  </style>

</BaseLayout>

  <!-- ========== NAVIGATION SCRIPT ========== -->
  <script is:inline>
    const scrollToSection = (sectionId) => {
      const element = document.getElementById(sectionId);
      if (element) {
        element.scrollIntoView({
          behavior: 'smooth',
          block: 'start',
          inline: 'nearest'
        });
      }
    };
  </script>
