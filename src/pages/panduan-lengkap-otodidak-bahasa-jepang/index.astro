---
// ========== IMPORTS ==========
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Prose from '../../components/Prose.astro';
import { generateBreadcrumbSchema } from '../../utils/breadcrumb-schema';
import panduanSeoData from '../../data/seo/pages/panduan-lengkap.json';
import gorakudoImmerisonImage from '../../assets/images/pages/pl-obj/gorakudo-immerison.png';
import gorakudoMembentukPondasiImage from '../../assets/images/pages/pl-obj/gorakudo-membentuk-pondasi-intuisi.png';
import gorakudoKerangkaActiveImage from '../../assets/images/pages/pl-obj/gorakudo-kerangka-active.png';
import gorakudoKonsolidasiImage from '../../assets/images/pages/pl-obj/gorakudo-konsolidasi-intuisi.png';
import gorakudoMenataIntuisiImage from '../../assets/images/pages/pl-obj/gorakudo-menata-intusi.png';
import '../../styles/pages/pl-obj/pl-objIndex.css';

// ========== CONTENT LOADING ==========
const pages = await getCollection('pages');
const entry = pages.find(
  page => page.slug === 'panduan-lengkap-otodidak-bahasa-jepang'
);

if (!entry) {
  throw new Error(
    'Page "panduan-lengkap-otodidak-bahasa-jepang" not found in pages collection'
  );
}

const { Content } = await entry.render();

// ========== SEO DATA ==========
const seoData = panduanSeoData.seoData;

// ========== DYNAMIC STRUCTURED DATA ==========
// 本番環境での正しい画像URLを取得
const getImageUrl = (image: any) => {
  // 本番環境ではAstroが自動的に最適化されたURLを生成
  // ローカル環境では開発用パスが返される
  return image.src;
};

// ステップ画像のマッピング
const stepImages = {
  'gorakudo-membentuk-pondasi-intuisi': getImageUrl(
    gorakudoMembentukPondasiImage
  ),
  'gorakudo-kerangka-active': getImageUrl(gorakudoKerangkaActiveImage),
  'gorakudo-konsolidasi-intuisi': getImageUrl(gorakudoKonsolidasiImage),
  'gorakudo-menata-intusi': getImageUrl(gorakudoMenataIntuisiImage),
  'gorakudo-immerison': getImageUrl(gorakudoImmerisonImage),
};

// 動的画像URLを使用して構造化データを生成
const structuredData = {
  ...panduanSeoData.structuredData,
  article: {
    ...panduanSeoData.structuredData.article,
    image: {
      '@type': 'ImageObject',
      url: getImageUrl(gorakudoImmerisonImage),
      width: 630,
      height: 630,
    },
  },
  howTo: {
    ...panduanSeoData.structuredData.howTo,
    image: {
      '@type': 'ImageObject',
      url: getImageUrl(gorakudoImmerisonImage),
      width: 630,
      height: 630,
    },
    step: panduanSeoData.structuredData.howTo.step.map((step, index) => {
      // ステップ名から画像を特定
      let imageKey = '';
      if (step.name.includes('Phase 1'))
        imageKey = 'gorakudo-membentuk-pondasi-intuisi';
      else if (step.name.includes('Phase 2'))
        imageKey = 'gorakudo-kerangka-active';
      else if (step.name.includes('Phase 3'))
        imageKey = 'gorakudo-konsolidasi-intuisi';
      else if (step.name.includes('Phase 4'))
        imageKey = 'gorakudo-menata-intusi';
      else if (step.name.includes('Phase 5')) imageKey = 'gorakudo-immerison';

      return {
        ...step,
        image: {
          '@type': 'ImageObject',
          url: stepImages[imageKey] || getImageUrl(gorakudoImmerisonImage),
          width: 630,
          height: 630,
        },
      };
    }),
  },
};

// ========== STRUCTURED DATA ==========
const breadcrumbSchema = generateBreadcrumbSchema({
  items: panduanSeoData.breadcrumbData.items.map((item, index) => ({
    title: item.name,
    url: item.url,
    isActive: index === panduanSeoData.breadcrumbData.items.length - 1,
  })),
  siteUrl: String(Astro.site || 'https://gorakudo.org'),
});

const faqSchema = {
  '@context': 'https://schema.org' as const,
  '@type': 'FAQPage' as const,
  mainEntity: structuredData.faq.mainEntity.map(faq => ({
    '@type': 'Question' as const,
    name: faq.name,
    acceptedAnswer: {
      '@type': 'Answer' as const,
      text: faq.acceptedAnswer.text,
    },
  })),
} as const;
---

<BaseLayout
  title={seoData.title}
  description={seoData.description}
  keywords={seoData.keywords}
  lang={seoData.lang}
  pageType={seoData.pageType as 'article' | 'website'}
  publishedDate={entry.data.publishedDate}
  ogImage={getImageUrl(gorakudoImmerisonImage)}
  breadcrumbSchema={breadcrumbSchema}
  faqSchema={faqSchema}
>
  <!-- 構造化データはUnifiedSEOコンポーネントで統一管理 -->

  <Prose>
    <main class='pl-guide-page' role='main'>
      <div class='container'>
        <Content />
      </div>
    </main>
  </Prose>
</BaseLayout>

<!-- ========== SCRIPTS ========== -->
<script>
  // Image zoom functionality
  let imageZoomLoaded = false;
  let imageZoomInstance: { openModal: (event: any) => void } | null = null;
  let imageZoomPromise: Promise<{ openModal: (event: any) => void }> | null =
    null;

  const loadImageZoom = async () => {
    if (imageZoomLoaded && imageZoomInstance) return imageZoomInstance;
    if (imageZoomPromise) return imageZoomPromise;

    imageZoomPromise = (async () => {
      try {
        if (import.meta.env.DEV) console.log('Loading ImageZoom script...');
        const { default: ImageZoom } = await import(
          '../../scripts/image-zoom.js'
        );
        imageZoomInstance = new ImageZoom();
        imageZoomLoaded = true;
        if (import.meta.env.DEV) console.log('ImageZoom loaded successfully');
        return imageZoomInstance;
      } catch (error) {
        console.error('Failed to load ImageZoom:', error);
        imageZoomPromise = null;
        throw error;
      }
    })();

    return imageZoomPromise;
  };

  const handleImageZoomClick = async (event: Event) => {
    const currentTarget = event.currentTarget;
    const target = event.target;

    if (import.meta.env.DEV) {
      console.log('handleImageZoomClick called');
      console.log('Original event currentTarget:', currentTarget);
      console.log('Original event target:', target);
    }

    try {
      const zoomInstance = await loadImageZoom();
      if (zoomInstance) {
        const syntheticEvent = {
          currentTarget,
          target,
          preventDefault: () => event.preventDefault(),
          stopPropagation: () => event.stopPropagation(),
        };

        if (import.meta.env.DEV) {
          console.log('Synthetic event:', syntheticEvent);
          console.log(
            'Synthetic event currentTarget:',
            syntheticEvent.currentTarget
          );
        }

        zoomInstance.openModal(syntheticEvent);
      }
    } catch (error) {
      console.error('ImageZoom failed to load:', error);
      if (currentTarget && 'querySelector' in currentTarget) {
        const img = (currentTarget as Element).querySelector('img');
        if (img && 'src' in img) {
          window.open((img as HTMLImageElement).src, '_blank');
        }
      }
    }
  };

  const initializeLazyImageZoom = () => {
    const triggers = document.querySelectorAll('.image-zoom-trigger');
    if (import.meta.env.DEV) {
      console.log(
        'Initializing lazy image zoom for',
        triggers.length,
        'triggers'
      );
    }

    const initializedTriggers = new WeakSet();
    triggers.forEach(trigger => {
      if (initializedTriggers.has(trigger)) return;
      initializedTriggers.add(trigger);

      const clickHandler = (event: Event) => {
        if (import.meta.env.DEV) {
          console.log('Click handler called with event:', event);
          console.log('Event currentTarget:', event.currentTarget);
        }
        handleImageZoomClick(event);
      };

      const keydownHandler = ((e: KeyboardEvent) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          handleImageZoomClick(e);
        }
      }) as EventListener;

      trigger.addEventListener('click', clickHandler);
      trigger.addEventListener('keydown', keydownHandler);
    });
  };

  const cleanupImageZoom = () => {
    imageZoomInstance = null;
    imageZoomPromise = null;
    imageZoomLoaded = false;
  };

  // Lazy loading
  const initLazyLoading = () => {
    const lazyElements = document.querySelectorAll('[data-lazy]');
    if (lazyElements.length === 0) return;

    const lazyObserver = new IntersectionObserver(
      entries => {
        entries.forEach((entry, index) => {
          if (entry.isIntersecting) {
            requestAnimationFrame(() => {
              const delay = Math.min(index * 100, 500);
              setTimeout(() => {
                entry.target.classList.add('loaded');
                lazyObserver.unobserve(entry.target);
              }, delay);
            });
          }
        });
      },
      { rootMargin: '100px 0px -5% 0px', threshold: [0.05, 0.1] }
    );

    lazyElements.forEach(el => lazyObserver.observe(el));
  };

  // Initialize all
  const init = () => {
    initializeLazyImageZoom();
    initLazyLoading();
  };

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }

  // Debug tools (dev only)
  if (import.meta.env.DEV) {
    (window as any).imageZoomDebug = {
      loadImageZoom,
      handleImageZoomClick,
      initializeLazyImageZoom,
      cleanupImageZoom,
      getLoaded: () => imageZoomLoaded,
      getInstance: () => imageZoomInstance,
    };
  }

  // Cleanup on page unload
  window.addEventListener('beforeunload', cleanupImageZoom);
</script>
