---
import HeadSEO from "../../components/public-components/HeadSEO.astro";
import BasicSEO from "../../components/public-components/BasicSEO.astro";
import MetaManager from "../../components/public-components/MetaManager.astro";

// Admin settings page SEO configuration
const seoData = {
  title: "Admin Settings - GoRakuDo",
  description: "Administrative settings and configuration",
  keywords: ["admin", "settings", "administration", "configuration"],
  articleType: "website",
  learningStage: "advanced",
  searchIntent: "transactional"
};
---

<html lang="ja">
  <head>
    <HeadSEO
      title={seoData.title}
      description={seoData.description}
      lang="ja"
      canonicalUrl="https://example.com/admin/settings"
    />

    <BasicSEO
      title={seoData.title}
      description={seoData.description}
      primaryKeywords={seoData.keywords}
      seoProperties={{
        articleType: seoData.articleType,
        learningStage: seoData.learningStage,
        searchIntent: seoData.searchIntent
      }}
    />

    <MetaManager
      advancedMeta={{
        robots: "noindex, nofollow"  // Admin pages never indexed
      }}
      securityHeaders={{
        csp: "default-src 'self'; script-src 'self'"
      }}
    />
    <link rel="stylesheet" href="/css/post-styles.css" />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
  </head>
  <body>
    <div
      class="container"
      style="max-width: 1000px; margin: 50px auto; padding: 20px; font-family: 'Inter', sans-serif;">
      <h1>‚öôÔ∏è GoRakuDo Advanced Settings</h1>
      <p style="color: #6b7280; margin-bottom: 30px;">
        Secret admin panel for advanced users. Use with caution.
      </p>

      <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 30px;">
        <!-- Performance Settings -->
        <div style="background: #f9fafb; padding: 20px; border-radius: 12px;">
          <h3>üöÄ Performance Settings</h3>
          <div id="performanceSettings"></div>
        </div>

        <!-- Browser Capabilities -->
        <div style="background: #f9fafb; padding: 20px; border-radius: 12px;">
          <h3>üîç Browser Capabilities</h3>
          <div id="browserCapabilities"></div>
        </div>

        <!-- Error Reports -->
        <div style="background: #f9fafb; padding: 20px; border-radius: 12px;">
          <h3>üìä Error Reports</h3>
          <div id="errorReports"></div>
        </div>

        <!-- System Diagnostics -->
        <div style="background: #f9fafb; padding: 20px; border-radius: 12px;">
          <h3>ÔøΩÔøΩ System Diagnostics</h3>
          <div id="systemDiagnostics"></div>
        </div>
      </div>

      <div style="margin-top: 30px; text-align: center;">
        <button
          onclick="exportSettings()"
          style="
          background: linear-gradient(135deg, #8b5dff, #7b4def);
          color: white;
          border: none;
          padding: 12px 24px;
          border-radius: 8px;
          cursor: pointer;
          margin-right: 10px;
        "
          >Export Settings</button
        >

        <button
          onclick="clearAllData()"
          style="
          background: linear-gradient(135deg, #ef4444, #dc2626);
          color: white;
          border: none;
          padding: 12px 24px;
          border-radius: 8px;
          cursor: pointer;
        "
          >Clear All Data</button
        >
      </div>
    </div>

    <script>
      async function loadSettings() {
        try {
          // Simplified settings loading without problematic imports
          console.log("üöÄ Loading simplified settings");

          // Mock data for settings display with aggressive loading enabled by default
          const preferences = {
            aggressiveLoading: true, // ‚úÖ ENABLED BY DEFAULT
            enableAllFeatures: true,
            autoDetectCapabilities: true,
            customThresholds: {
              syntaxHighlighting: 500, // ‚ö° AGGRESSIVE: Reduced from 1000ms
              readingProgress: 300, // ‚ö° AGGRESSIVE: Reduced from 800ms
              errorHandling: 1000, // ‚ö° AGGRESSIVE: Reduced from 2000ms
            },
          };

          const capabilities = {
            isHighEndDevice: true,
            hasFastConnection: true,
            hasGoodPerformance: true,
            supportsAdvancedFeatures: true,
          };

          const metrics = {
            loadTime: "2.5s",
            memoryUsage: "45MB",
            errorCount: 0,
          };

          const errorQueue = [];

          displayPerformanceSettings(preferences);
          displayBrowserCapabilities(capabilities);
          displayErrorReports(errorQueue);
          displaySystemDiagnostics(metrics);

          console.log("‚úÖ Settings loaded successfully");
        } catch (error) {
          console.error("Failed to load settings:", error);
        }
      }

      function displayPerformanceSettings(preferences: any) {
        const container = document.getElementById("performanceSettings");
        if (!container) return;

        container.innerHTML = `
          <div style="margin-bottom: 15px;">
            <label style="display: block; margin-bottom: 5px; font-weight: 500;">
              <input type="checkbox" ${preferences.aggressiveLoading ? "checked" : ""} 
                     onchange="updateSetting('aggressiveLoading', this.checked)">
              Aggressive Loading
            </label>
          </div>
          
          <div style="margin-bottom: 15px;">
            <label style="display: block; margin-bottom: 5px; font-weight: 500;">
              <input type="checkbox" ${preferences.enableAllFeatures ? "checked" : ""} 
                     onchange="updateSetting('enableAllFeatures', this.checked)">
              Enable All Features
            </label>
          </div>
          
          <div style="margin-bottom: 15px;">
            <label style="display: block; margin-bottom: 5px; font-weight: 500;">
              <input type="checkbox" ${preferences.autoDetectCapabilities ? "checked" : ""} 
                     onchange="updateSetting('autoDetectCapabilities', this.checked)">
              Auto-Detect Capabilities
            </label>
          </div>
          
          <div style="margin-bottom: 15px;">
            <label style="display: block; margin-bottom: 5px; font-weight: 500;">
              Syntax Highlighting Threshold (ms):
              <input type="number" value="${preferences.customThresholds.syntaxHighlighting}" 
                     onchange="updateThreshold('syntaxHighlighting', this.value)" 
                     style="width: 80px; margin-left: 10px;">
            </label>
          </div>
          
          <div style="margin-bottom: 15px;">
            <label style="display: block; margin-bottom: 5px; font-weight: 500;">
              Reading Progress Threshold (ms):
              <input type="number" value="${preferences.customThresholds.readingProgress}" 
                     onchange="updateThreshold('readingProgress', this.value)" 
                     style="width: 80px; margin-left: 10px;">
            </label>
          </div>
          
          <div style="margin-bottom: 15px;">
            <label style="display: block; margin-bottom: 5px; font-weight: 500;">
              Error Handling Threshold (ms):
              <input type="number" value="${preferences.customThresholds.errorHandling}" 
                     onchange="updateThreshold('errorHandling', this.value)" 
                     style="width: 80px; margin-left: 10px;">
            </label>
          </div>
        `;
      }

      function displayBrowserCapabilities(capabilities: any) {
        const container = document.getElementById("browserCapabilities");
        if (!container) return;

        container.innerHTML = `
          <div style="margin-bottom: 10px;">
            <strong>High-End Device:</strong> ${capabilities.isHighEndDevice ? "‚úÖ Yes" : "‚ùå No"}
          </div>
          <div style="margin-bottom: 10px;">
            <strong>Fast Connection:</strong> ${capabilities.hasFastConnection ? "‚úÖ Yes" : "‚ùå No"}
          </div>
          <div style="margin-bottom: 10px;">
            <strong>Good Performance:</strong> ${capabilities.hasGoodPerformance ? "‚úÖ Yes" : "‚ùå No"}
          </div>
          <div style="margin-bottom: 10px;">
            <strong>Advanced Features:</strong> ${capabilities.supportsAdvancedFeatures ? "‚úÖ Yes" : "‚ùå No"}
          </div>
        `;
      }

      function displayErrorReports(errorQueue: any[]) {
        const container = document.getElementById("errorReports");
        if (!container) return;

        if (errorQueue.length === 0) {
          container.innerHTML =
            "<p style='color: #6b7280;'>No errors reported</p>";
          return;
        }

        const recentErrors = errorQueue.slice(-5); // Show last 5 errors
        container.innerHTML = `
          <div style="margin-bottom: 10px;">
            <strong>Total Errors:</strong> ${errorQueue.length}
          </div>
          ${recentErrors
            .map(
              (error) => `
            <div style="background: #fee2e2; padding: 10px; border-radius: 6px; margin-bottom: 8px; font-size: 12px;">
              <strong>${error.type}</strong><br>
              ${error.message}<br>
              <small>${new Date(error.timestamp).toLocaleString()}</small>
            </div>
          `
            )
            .join("")}
        `;
      }

      function displaySystemDiagnostics(metrics: any) {
        const container = document.getElementById("systemDiagnostics");
        if (!container) return;

        container.innerHTML = `
          <div style="margin-bottom: 10px;">
            <strong>Load Time:</strong> ${metrics.loadTime}ms
          </div>
          <div style="margin-bottom: 10px;">
            <strong>Device Memory:</strong> ${metrics.deviceMemory || "Unknown"}GB
          </div>
          <div style="margin-bottom: 10px;">
            <strong>Connection:</strong> ${metrics.connection || "Unknown"}
          </div>
          <div style="margin-bottom: 10px;">
            <strong>CPU Cores:</strong> ${metrics.hardwareConcurrency || "Unknown"}
          </div>
        `;
      }

      async function updateSetting(setting: string, value: boolean) {
        try {
          // Simplified setting update without problematic imports
          console.log(`üîÑ Updating setting: ${setting} = ${value}`);

          // Store in localStorage for persistence
          localStorage.setItem(`setting_${setting}`, JSON.stringify(value));

          // Reload settings
          loadSettings();

          console.log(`‚úÖ Setting updated: ${setting} = ${value}`);
        } catch (error) {
          console.error("Failed to update setting:", error);
        }
      }

      async function updateThreshold(threshold: string, value: string) {
        try {
          // Simplified threshold update without problematic imports
          console.log(`üîÑ Updating threshold: ${threshold} = ${value}`);

          // Store in localStorage for persistence
          localStorage.setItem(`threshold_${threshold}`, value);

          console.log(`‚úÖ Threshold updated: ${threshold} = ${value}`);
        } catch (error) {
          console.error("Failed to update threshold:", error);
        }
      }

      function exportSettings() {
        try {
          const settings = {
            timestamp: new Date().toISOString(),
            localStorage: {},
          };

          // Export all localStorage data
          for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key) {
              settings.localStorage[key] = localStorage.getItem(key);
            }
          }

          const blob = new Blob([JSON.stringify(settings, null, 2)], {
            type: "application/json",
          });
          const url = URL.createObjectURL(blob);
          const a = document.createElement("a");
          a.href = url;
          a.download = `gorakudo-settings-${new Date().toISOString().split("T")[0]}.json`;
          a.click();
          URL.revokeObjectURL(url);
        } catch (error) {
          console.error("Failed to export settings:", error);
        }
      }

      async function clearAllData() {
        if (
          !confirm(
            "Are you sure you want to clear all data? This cannot be undone."
          )
        ) {
          return;
        }

        try {
          localStorage.clear();
          alert("All data cleared successfully!");
          loadSettings();
        } catch (error) {
          console.error("Failed to clear data:", error);
        }
      }

      // Load settings when page loads
      document.addEventListener("DOMContentLoaded", loadSettings);
    </script>
  </body>
</html>
