---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import CategoryTree from '../../components/navigation/CategoryTree.astro';

// 全カテゴリの統計情報を取得
const [docs, toolArticles] = await Promise.all([
  getCollection('docs'),
  getCollection('tool-articles'),
]);

const allContent = [...docs, ...toolArticles];

// カテゴリの統計情報を直接計算
const categoryStats = new Map<string, number>();
allContent.forEach(post => {
  const categories = post.data.categories || [];
  categories.forEach(category => {
    categoryStats.set(category, (categoryStats.get(category) || 0) + 1);
  });
});

const sortedCategoryStats = Array.from(categoryStats.entries())
  .sort(([, a], [, b]) => b - a)
  .map(([category, count]) => ({ category, count }));

// 親カテゴリのみを抽出
const parentCategories = Array.from(new Set(sortedCategoryStats.map(stat => {
  const parts = stat.category.split('/');
  return parts[0]; // 親カテゴリのみ
}))).map(parentCat => {
  const parentStats = sortedCategoryStats.filter(stat => stat.category === parentCat);
  const subCategories = sortedCategoryStats.filter(stat => 
    stat.category.startsWith(parentCat + '/') && stat.category !== parentCat
  );
  
  return {
    category: parentCat,
    count: parentStats.reduce((sum, stat) => sum + stat.count, 0),
    subCategories: subCategories.map(sub => ({
      name: sub.category,
      displayName: sub.category.split('/').pop() || sub.category,
      count: sub.count,
    }))
  };
}).sort((a, b) => b.count - a.count);

const seoData = {
  title: 'All Categories - GoRakuDo',
  description: 'Browse all categories in GoRakuDo content. Find articles and guides by topic.',
  keywords: ['categories', 'japanese learning', 'immersion', 'topics'],
};
---

<BaseLayout 
  title={seoData.title} 
  description={seoData.description}
  keywords={seoData.keywords}
  pageType="website"
  lang="id"
>
  <main class="container mx-auto px-4 py-8 max-w-4xl">
    <!-- ページヘッダー -->
    <header class="mb-8 text-center">
      <h1 class="text-3xl font-bold mb-4">All Categories</h1>
      <p class="text-gray-600 mb-6">
        Browse content by categories. Click on any category to see all related posts.
      </p>
      
      <!-- 統計情報 -->
      <div class="bg-gray-50 rounded-lg p-4 mb-8 dark:bg-gray-800">
        <p class="text-sm text-gray-600 dark:text-gray-400">
          <strong>{parentCategories.length}</strong> main categories • <strong>{allContent.length}</strong> posts • 
          Most used: <strong>{parentCategories[0]?.category}</strong> ({parentCategories[0]?.count} posts)
        </p>
      </div>
    </header>

    <!-- カテゴリツリー -->
    <CategoryTree categories={parentCategories} />

    <!-- 人気カテゴリ -->
    {parentCategories.length > 0 && (
      <div class="mt-8">
        <h2 class="text-xl font-semibold mb-4 text-center">Popular Categories</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {parentCategories.slice(0, 6).map(({ category, count }, index) => {
            const slug = category.toLowerCase().replace(/ /g, '-');
            return (
              <a
                href={`/categories/${slug}`}
                class="p-4 border rounded-lg hover:shadow-md transition-all duration-200 hover:scale-105 dark:border-gray-700 dark:hover:bg-gray-800"
              >
                <div class="flex items-center justify-between mb-2">
                  <span class="font-medium">{category}</span>
                  <span class="text-sm text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded-full">#{index + 1}</span>
                </div>
                <div class="text-sm text-gray-600 dark:text-gray-400">
                  {count} post{count !== 1 ? 's' : ''}
                </div>
              </a>
            );
          })}
        </div>
      </div>
    )}

    <!-- ナビゲーション -->
    <nav class="mt-8 text-center">
      <a href="/tags" class="inline-flex items-center gap-2 text-blue-600 hover:text-blue-800 transition-colors dark:text-blue-400 dark:hover:text-blue-300">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
        </svg>
        Browse by Tags →
      </a>
    </nav>
  </main>
</BaseLayout>
