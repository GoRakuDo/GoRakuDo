---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import ContentCard from '../../components/content/ContentCard.astro';

// 静的パス生成 - 全カテゴリのページを自動生成
export async function getStaticPaths() {
  const [docs, toolArticles] = await Promise.all([
    getCollection('docs'),
    getCollection('tool-articles'),
  ]);

  // 全コンテンツからユニークなカテゴリパスを抽出
  const allCategoryPaths = new Set<string>();
  
  // docsコレクションからカテゴリを抽出
  docs.forEach(post => {
    const categories = post.data.categories || [];
    categories.forEach(category => allCategoryPaths.add(category));
  });
  
  // tool-articlesコレクションからカテゴリを抽出
  toolArticles.forEach(post => {
    const categories = post.data.categories || [];
    categories.forEach(category => allCategoryPaths.add(category));
  });

  // 各カテゴリのページを生成
  return Array.from(allCategoryPaths).map(categoryPath => {
    const slug = categoryPath.toLowerCase().replace(/ /g, '-');
    return {
      params: { category: slug },
      props: { originalCategory: categoryPath },
    };
  });
}

const { category } = Astro.params;
const { originalCategory } = Astro.props;

// 現在のカテゴリに該当するコンテンツをフィルタリング
const [docs, toolArticles] = await Promise.all([
  getCollection('docs'),
  getCollection('tool-articles'),
]);

const allContent = [...docs, ...toolArticles];
const categoryContent = allContent.filter(post => {
  const categories = post.data.categories || [];
  // 親カテゴリの場合は、サブカテゴリも含める
  return categories.some(cat => 
    cat.toLowerCase().replace(/ /g, '-') === category.toLowerCase() ||
    cat.toLowerCase().startsWith(category.toLowerCase() + '/')
  );
});

// コンテンツを日付順でソート
const sortedContent = categoryContent.sort((a, b) => 
  new Date(b.data.publishedDate).getTime() - new Date(a.data.publishedDate).getTime()
);

// サブカテゴリの抽出
const subCategories = new Set<string>();
categoryContent.forEach(post => {
  const categories = post.data.categories || [];
  categories.forEach(cat => {
    if (cat.toLowerCase().startsWith(originalCategory.toLowerCase() + '/') && 
        cat.toLowerCase() !== originalCategory.toLowerCase()) {
      subCategories.add(cat);
    }
  });
});

const seoData = {
  title: `Posts in category: ${originalCategory} - GoRakuDo`,
  description: `Browse all posts in the ${originalCategory} category on GoRakuDo.`,
  keywords: [originalCategory, 'japanese learning', 'immersion', 'category'],
};
---

<BaseLayout 
  title={seoData.title} 
  description={seoData.description}
  keywords={seoData.keywords}
  pageType="website"
  lang="id"
>
  <main class="container mx-auto px-4 py-8">
    <!-- ページヘッダー -->
    <header class="mb-8">
      <nav class="mb-4">
        <a href="/categories" class="text-blue-600 hover:text-blue-800 flex items-center gap-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 12H5m7-7l-7 7 7 7"></path>
          </svg>
          Back to All Categories
        </a>
      </nav>
      
      <h1 class="text-3xl font-bold mb-2">
        Posts in category: {originalCategory}
      </h1>
      <p class="text-gray-600 mb-4">
        This page shows all posts in "{originalCategory}" and its sub-categories.
      </p>
      
      <!-- サブカテゴリの表示 -->
      {Array.from(subCategories).length > 0 && (
        <div class="mb-4">
          <h2 class="text-lg font-semibold mb-2">Sub-categories:</h2>
          <div class="flex flex-wrap gap-2">
            {Array.from(subCategories).map(subCat => {
              const subSlug = subCat.toLowerCase().replace(/ /g, '-');
              return (
                <a
                  href={`/categories/${subSlug}`}
                  class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm hover:bg-blue-200 dark:bg-blue-900 dark:text-blue-200 dark:hover:bg-blue-800"
                >
                  {subCat.split('/').pop()}
                </a>
              );
            })}
          </div>
        </div>
      )}
    </header>

    <!-- コンテンツ一覧 -->
    {sortedContent.length > 0 ? (
      <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        {sortedContent.map(post => {
          const categories = post.data.categories || [];
          const tags = post.data.tags || [];
          return (
            <ContentCard
              title={post.data.title}
              description={post.data.description}
              slug={post.slug}
              publishedDate={post.data.publishedDate}
              author={post.data.author}
              category={categories[0] || 'general'}
              tags={tags}
            />
          );
        })}
      </div>
    ) : (
      <div class="text-center py-12">
        <div class="mb-4">
          <svg class="w-16 h-16 mx-auto text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
          </svg>
        </div>
        <p class="text-gray-500 mb-4">No posts found for this category.</p>
        <a href="/categories" class="text-blue-600 hover:text-blue-800 inline-flex items-center gap-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
          </svg>
          Browse all categories
        </a>
      </div>
    )}
  </main>
</BaseLayout>
