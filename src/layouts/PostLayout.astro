---
import '@fontsource-variable/roboto-flex';
import '@fontsource-variable/roboto-serif';
import '@fontsource/yuji-syuku';

// ========== IMPORTS ==========
import UnifiedSEO, {
  type Props as UnifiedSEOProps,
} from '../components/UnifiedSEO.astro';
import TableOfContents from '../components/content/TableOfContents.astro';
import Navbar from '../components/common/NavBar/Navbar.astro';
import BottomNavBar from '../components/common/NavBar/BottomNavBar.astro';
import Prose from '../components/Prose.astro';
import '../styles/global.css';

// ========== TYPE DEFINITIONS ==========
export interface Props {
  title: string;
  description: string;
  publishedDate?: string;
  lang?: 'id' | 'ja';
  author?: string;
  tags?: string[];
  post?:
    | import('astro:content').CollectionEntry<'docs'>
    | import('astro:content').CollectionEntry<'tool-articles'>;
  collectionMetadata?: { displayName: string; basePath: string };
  headings?: { depth: number; slug: string; text: string }[];
  postActions?: boolean;
  featuredImage?: string;
  contentConfig?: { id?: string; ariaLabel?: string; className?: string };
  breadcrumbConfig?: {
    currentPath?: string;
    showHome?: boolean;
    variant?: 'compact' | 'spacious' | 'minimal' | 'pill' | 'underline';
    showIcons?: boolean;
    ariaLabel?: string;
  };
  breadcrumbSchema?: UnifiedSEOProps['breadcrumbSchema'];
  faqSchema?: UnifiedSEOProps['faqSchema'];
  howToSchema?: UnifiedSEOProps['howToSchema'];
  softwareApplicationSchema?: UnifiedSEOProps['softwareApplicationSchema'];
}

// ========== PROPS DESTRUCTURING ==========
const {
  title,
  description,
  publishedDate,
  lang = 'id',
  author,
  tags = [],
  headings,
  contentConfig = {},
  breadcrumbSchema,
  faqSchema,
  howToSchema,
  softwareApplicationSchema,
  featuredImage,
} = Astro.props;
---

<!doctype html>
<html lang={lang}>
  <head>
    <UnifiedSEO
      title={title}
      description={description}
      keywords={tags}
      lang={lang}
      pageType='article'
      author={author}
      publishedDate={publishedDate}
      modifiedDate={publishedDate}
      image={featuredImage}
      breadcrumbSchema={breadcrumbSchema}
      faqSchema={faqSchema}
      howToSchema={howToSchema}
      softwareApplicationSchema={softwareApplicationSchema}
    />
  </head>
  <body>
    <!-- Navigation - 共通コンポーネント -->
    <Navbar />
    <BottomNavBar />

    <!-- Main Content -->
    <main
      class='content-page items-center justify-center w-full max-w-full flex flex-col'
      role='main'
      style='padding-top: 5rem;'
    >
      <div class='content-wrapper'>
        <!-- Content Container - Grid Area: content -->
        <div class='content-container'>
          <!-- Breadcrumb Navigation - Inside content-container -->
          <div class='breadcrumb-container'>
            <slot name='breadcrumb' />
          </div>

          <!-- Article Header Slot -->
          <slot name='header' />

          <!-- Article Content Slot -->
          <article
            class={`max-w-none content-main ${contentConfig.className || ''}`}
            id={contentConfig.id || 'contentMain'}
            aria-label={contentConfig.ariaLabel || 'Post content'}
          >
            <Prose>
              <slot name='content' />
            </Prose>
          </article>

          <!-- Post Actions Slot -->
          <slot name='actions' />

          <!-- Additional Footer Content Slot -->
          <slot name='footer' />
        </div>

        <!-- Sidebar Container - Grid Area: toc -->
        <div class='sidebar-container'>
          <!-- Table of Contents Sidebar Slot -->
          <slot name='sidebar'>
            <!-- Default Table of Contents implementation -->
            {
              headings && headings.length > 0 && (
                <TableOfContents headings={headings} />
              )
            }
          </slot>

          <!-- Additional Sidebar Content Slot -->
          <slot name='additional-sidebar' />
        </div>
      </div>
    </main>

    <!-- ========== SCRIPTS ========== -->
    <script>
      // Breadcrumb scroll animation for mobile
      const initBreadcrumbScrollAnimation = () => {
        const breadcrumbContainer = document.querySelector(
          '.breadcrumb-container'
        ) as HTMLElement;

        if (!breadcrumbContainer || window.innerWidth > 767) return;

        let scrollTimeout: number;
        let isScrolling = false;

        const checkScrollable = () => {
          if (!breadcrumbContainer) return;

          const { scrollLeft, scrollWidth, clientWidth } = breadcrumbContainer;

          if (scrollLeft > 0) {
            breadcrumbContainer.classList.add('scrollable-left');
          } else {
            breadcrumbContainer.classList.remove('scrollable-left');
          }

          if (scrollLeft < scrollWidth - clientWidth) {
            breadcrumbContainer.classList.add('scrollable-right');
          } else {
            breadcrumbContainer.classList.remove('scrollable-right');
          }
        };

        const handleScrollStart = () => {
          if (!breadcrumbContainer || isScrolling) return;
          isScrolling = true;
          breadcrumbContainer.classList.add('scrolling');
        };

        const handleScrollEnd = () => {
          if (!breadcrumbContainer) return;
          isScrolling = false;
          breadcrumbContainer.classList.remove('scrolling');
        };

        breadcrumbContainer.addEventListener('scroll', () => {
          handleScrollStart();
          checkScrollable();
          clearTimeout(scrollTimeout);
          scrollTimeout = window.setTimeout(handleScrollEnd, 150);
        });

        checkScrollable();

        window.addEventListener('resize', () => {
          if (!breadcrumbContainer) return;

          if (window.innerWidth <= 767) {
            setTimeout(checkScrollable, 100);
          } else {
            breadcrumbContainer.classList.remove(
              'scrollable-left',
              'scrollable-right',
              'scrolling'
            );
          }
        });
      };

      // Initialize
      if (document.readyState === 'loading') {
        document.addEventListener(
          'DOMContentLoaded',
          initBreadcrumbScrollAnimation
        );
      } else {
        initBreadcrumbScrollAnimation();
      }
    </script>
  </body>
</html>
