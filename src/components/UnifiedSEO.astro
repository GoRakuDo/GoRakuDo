---
// ========== IMPORTS ==========
import seoConfig from '../data/seo/unifiedSeo-config.json';
import toolsData from '../data/tools.json';

// ========== TYPE DEFINITIONS ==========
interface ContactAddress {
  country?: string;
  locality?: string;
  region?: string;
}

interface ContactGeo {
  latitude?: number;
  longitude?: number;
}

interface BreadcrumbItem {
  '@type': string;
  position: number;
  name: string;
  item: string;
}

interface BreadcrumbSchema {
  '@context': string;
  '@type': string;
  itemListElement: BreadcrumbItem[];
}

interface FAQItem {
  '@type': string;
  name: string;
  acceptedAnswer: { '@type': string; text: string };
}

interface FAQSchema {
  '@context': string;
  '@type': string;
  mainEntity: FAQItem[];
}

interface HowToSchema {
  '@context': string;
  '@type': string;
  name: string;
  description: string;
  image: string;
  totalTime: string;
  estimatedCost: { '@type': string; currency: string; value: string };
  supply: Array<{ '@type': string; name: string }>;
  tool: Array<{ '@type': string; name: string }>;
  step: Array<{ '@type': string; name: string; text: string; url: string }>;
}

interface CollectionPageSchema {
  '@context': string;
  '@type': string;
  name: string;
  description: string;
  url: string;
  mainEntity: {
    '@type': string;
    name: string;
    description: string;
    numberOfItems: number;
  };
}

interface SoftwareApplicationSchema {
  '@context': string;
  '@type': string;
  name: string;
  description: string;
  url: string;
  applicationCategory: string;
  operatingSystem: string;
  offers: {
    '@type': string;
    price: string;
    priceCurrency: string;
  };
}

interface WebsiteSchema {
  '@context': string;
  '@type': string;
  name: string;
  url: string;
  description: string;
  inLanguage: string;
  potentialAction: {
    '@type': string;
    target: {
      '@type': string;
      urlTemplate: string;
    };
    'query-input': string;
  };
}

interface PreloadResource {
  href: string;
  as: 'script' | 'style' | 'image' | 'font' | 'fetch' | 'document';
  crossorigin?: boolean;
  type?: string;
}

// ========== MAIN PROPS INTERFACE ==========
export interface Props {
  title?: string;
  description?: string;
  keywords?: string[];
  articleKeywords?: string;
  canonical?: string;
  lang?: string;
  pageType?: 'website' | 'article';
  image?: string;
  author?: string;
  publishedDate?: string;
  modifiedDate?: string;
  noindex?: boolean;
  gtag?: string;
  currentPage?: number;
  totalPages?: number;
  baseUrl?: string;
  organizationName?: string;
  organizationDescription?: string;
  organizationUrl?: string;
  organizationLogo?: string;
  organizationFoundedDate?: string;
  contactEmail?: string;
  contactAddress?: ContactAddress;
  contactGeo?: ContactGeo;
  socialLinks?: string[];
  openingHours?: string;
  priceRange?: string;
  currenciesAccepted?: string;
  paymentAccepted?: string;
  breadcrumbSchema?: BreadcrumbSchema;
  faqSchema?: FAQSchema | null;
  howToSchema?: HowToSchema | null;
  collectionPageSchema?: CollectionPageSchema | null;
  softwareApplicationSchema?: SoftwareApplicationSchema | null;
  websiteSchema?: WebsiteSchema | null;
  preconnect?: string[];
  dnsPrefetch?: string[];
  prefetch?: string[];
  preload?: PreloadResource[];
  sitemapUrl?: string;
  robotsTxtUrl?: string;
}

// ========== PROPS DESTRUCTURING ==========
const {
  title = seoConfig.site.name,
  description = seoConfig.site.description,
  keywords = [],
  articleKeywords,
  canonical,
  lang = seoConfig.site.language,
  pageType = seoConfig.seo.defaultPageType,
  image,
  author,
  publishedDate,
  modifiedDate,
  noindex = false,
  gtag = seoConfig.analytics.gtag,
  currentPage,
  totalPages,
  baseUrl,
  organizationName = seoConfig.organization.name,
  organizationDescription = seoConfig.organization.description,
  organizationUrl = seoConfig.organization.url,
  organizationLogo = seoConfig.organization.logo,
  organizationFoundedDate = seoConfig.organization.foundedDate,
  contactEmail = seoConfig.contact.email,
  contactAddress = seoConfig.contact.address,
  contactGeo = seoConfig.contact.geo,
  socialLinks = seoConfig.social.links,
  openingHours = seoConfig.business.openingHours,
  priceRange = seoConfig.business.priceRange,
  currenciesAccepted = seoConfig.business.currenciesAccepted,
  paymentAccepted = seoConfig.business.paymentAccepted,
  breadcrumbSchema,
  faqSchema,
  howToSchema,
  collectionPageSchema,
  softwareApplicationSchema,
  websiteSchema,
  preconnect = seoConfig.seo.resourceHints?.preconnect || [],
  dnsPrefetch = seoConfig.seo.resourceHints?.dnsPrefetch || [],
  prefetch = [],
  preload = [],
  sitemapUrl = seoConfig.sitemap.url,
  robotsTxtUrl = seoConfig.sitemap.robotsTxtUrl
} = Astro.props;

// ========== URL UTILITY FUNCTIONS ==========
const getSiteUrl = (): string => {
  const siteUrl = Astro.site || 'https://gorakudo.org';
  const normalizedUrl = String(siteUrl).trim();
  return normalizedUrl.startsWith('https://') ? normalizedUrl : `https://${normalizedUrl.replace(/^https?:\/\//, '')}`;
};

const joinUrl = (baseUrl: string, path: string): string => {
  if (!baseUrl || !path) return baseUrl || path;
  const cleanBase = baseUrl.replace(/\/+$/, '');
  const cleanPath = path.startsWith('/') ? path : `/${path}`;
  return `${cleanBase}${cleanPath}`;
};

const getCurrentPath = (): string => Astro.url.pathname || '/';

const generateCanonicalUrl = (): string => {
  const siteUrl = getSiteUrl();
  const currentPath = getCurrentPath();
  return joinUrl(siteUrl, currentPath);
};

const removeTrailingSlashIfNeeded = (url: string): string => {
  const siteUrl = getSiteUrl();
  const isRootUrl = url === `${siteUrl}/`;
  const hasTrailingSlash = url.endsWith('/');
  return hasTrailingSlash && !isRootUrl ? url.slice(0, -1) : url;
};

// ツールページのOG Image自動判定
const getToolImageFromPath = (): string | null => {
  const path = getCurrentPath();
  const toolMatch = path.match(/^\/tools\/([^\/]+)/);
  if (toolMatch) {
    const toolId = toolMatch[1].replace(/^page-\d+$/, ''); // page-[page]を除外
    const tool = toolsData.find((t: any) => t.id === toolId);
    return tool?.iconUrl || null;
  }
  return null;
};

const createFullImageUrl = (imagePath?: string): string => {
  // 空文字列やnull/undefinedの場合は自動判定
  if (!imagePath || imagePath.trim() === '') {
    // ツールページの場合は自動でiconUrlを使用
    const toolImage = getToolImageFromPath();
    if (toolImage) {
      const siteUrl = getSiteUrl();
      return joinUrl(siteUrl, toolImage);
    }
    
    const siteUrl = getSiteUrl();
    const defaultImage = seoConfig.site.defaultImage;
    return joinUrl(siteUrl, defaultImage);
  }
  
  // 既に完全なURLの場合はそのまま返す
  if (imagePath.startsWith('http')) return imagePath;
  
  // 相対パスの場合は完全なURLに変換
  const siteUrl = getSiteUrl();
  return joinUrl(siteUrl, imagePath);
};

const createFullSitemapUrl = (sitemapPath: string): string => {
  if (sitemapPath.startsWith('http')) return sitemapPath;
  return joinUrl(getSiteUrl(), sitemapPath);
};

const createFullRobotsTxtUrl = (robotsPath: string): string => {
  if (robotsPath.startsWith('http')) return robotsPath;
  return joinUrl(getSiteUrl(), robotsPath);
};

// ========== URL GENERATION ==========
const autoCanonical = canonical || generateCanonicalUrl();
const normalizedCanonical = removeTrailingSlashIfNeeded(autoCanonical);
const fullImageUrl = createFullImageUrl(image);
const fullSitemapUrl = createFullSitemapUrl(sitemapUrl);
const fullRobotsTxtUrl = createFullRobotsTxtUrl(robotsTxtUrl);

// ========== DEFAULT CONFIGURATION ==========
const defaultConfig = {
  siteName: seoConfig.site.name,
  locale: seoConfig.site.locale,
  twitterCard: seoConfig.seo.twitterCard,
  favicon: seoConfig.site.favicon
};

// ========== RESOURCE HINTS UTILITIES ==========
const extractOriginFromUrl = (url: string): string => {
  try {
    const urlObj = new URL(url);
    return urlObj.origin;
  } catch {
    return getSiteUrl();
  }
};

const isRelativeUrl = (url: string): boolean => url.startsWith('/');

const convertToFullUrl = (url: string): string => {
  return isRelativeUrl(url) ? joinUrl(getSiteUrl(), url) : url;
};

const createCrossoriginAttribute = (crossorigin?: boolean): string | undefined => {
  return crossorigin ? 'anonymous' : undefined;
};

const generatePreconnect = (urls: string[]): string[] => urls.map(convertToFullUrl);
const generateDnsPrefetch = (urls: string[]): string[] => urls.map(extractOriginFromUrl);
const generatePrefetch = (urls: string[]): string[] => urls.map(convertToFullUrl);
const generatePreload = (resources: PreloadResource[]) => {
  return resources.map(resource => ({
    href: convertToFullUrl(resource.href),
    as: resource.as,
    crossorigin: createCrossoriginAttribute(resource.crossorigin),
    type: resource.type
  }));
};

// ========== RESOURCE HINTS GENERATION ==========
const preconnectUrls = generatePreconnect(preconnect);
const dnsPrefetchUrls = generateDnsPrefetch(dnsPrefetch);
const prefetchUrls = generatePrefetch(prefetch);
const preloadResources = generatePreload(preload);

// ========== SCHEMA HELPER FUNCTIONS ==========
const createImageObject = (imageUrl: string, width = 512, height = 512) => ({
  '@type': 'ImageObject',
  url: createFullImageUrl(imageUrl),
  width,
  height
});

const createContactPoint = () => ({
  '@type': 'ContactPoint',
  contactType: 'customer service',
  availableLanguage: ['Japanese', 'Indonesian'],
  email: contactEmail
});

// ========== BASE ORGANIZATION SCHEMA ==========
const baseOrganization = {
  '@context': 'https://schema.org',
  '@type': 'Organization',
  name: organizationName,
  url: organizationUrl,
  logo: createImageObject(organizationLogo),
  description: organizationDescription,
  foundingDate: organizationFoundedDate,
  sameAs: socialLinks,
  contactPoint: createContactPoint()
};

// ========== WEBSITE SCHEMA ==========
const createSearchAction = () => ({
  '@type': 'SearchAction',
  target: {
    '@type': 'EntryPoint',
    urlTemplate: `${organizationUrl}/search?q={search_term_string}`
  },
  'query-input': 'required name=search_term_string'
});


// ========== ARTICLE SCHEMA ==========
const createAuthorObject = () => {
  if (!author) return baseOrganization;
  const authorSlug = author.toLowerCase().replace(/\s+/g, '-');
  return {
    '@type': 'Person',
    name: author,
    url: `${organizationUrl}/author/${authorSlug}`
  };
};

const createMainEntityOfPage = () => ({ '@type': 'WebPage', '@id': normalizedCanonical });
const estimateWordCount = (text: string): number => text.length * 2;

const articleSchema = pageType === 'article' ? {
  '@context': 'https://schema.org',
  '@type': 'Article',
  name: title,
  headline: title,
  description: description,
  url: normalizedCanonical,
  datePublished: publishedDate,
  dateModified: modifiedDate || publishedDate,
  author: createAuthorObject(),
  publisher: baseOrganization,
  image: createImageObject(fullImageUrl),
  mainEntityOfPage: createMainEntityOfPage(),
  keywords: articleKeywords || keywords.join(', '),
  inLanguage: lang,
  articleSection: 'Japanese Learning',
  wordCount: estimateWordCount(description)
} : null;

// ========== LOCAL BUSINESS SCHEMA ==========
const createPostalAddress = () => ({
  '@type': 'PostalAddress',
  addressCountry: contactAddress.country,
  addressLocality: contactAddress.locality,
  addressRegion: contactAddress.region
});

const createGeoCoordinates = () => ({
  '@type': 'GeoCoordinates',
  latitude: contactGeo.latitude,
  longitude: contactGeo.longitude
});

const localBusinessSchema = {
  '@context': 'https://schema.org',
  '@type': 'EducationalOrganization',
  name: organizationName,
  description: organizationDescription,
  url: organizationUrl,
  logo: fullImageUrl,
  image: fullImageUrl,
  email: contactEmail,
  address: createPostalAddress(),
  geo: createGeoCoordinates(),
  openingHours: openingHours,
  priceRange: priceRange,
  currenciesAccepted: currenciesAccepted,
  paymentAccepted: paymentAccepted,
  sameAs: socialLinks
};

// ========== STRUCTURED DATA INTEGRATION ==========
const addMainSchema = (schemas: any[]): void => {
  const isArticlePage = pageType === 'article' && articleSchema;
  if (isArticlePage) {
    schemas.push(articleSchema);
  } else if (websiteSchema) {
    schemas.push(websiteSchema);
  } else {
    // デフォルトのwebsiteSchema
    const defaultWebsiteSchema = {
      '@context': 'https://schema.org',
      '@type': 'WebSite',
      name: organizationName,
      url: organizationUrl,
      description: organizationDescription,
      inLanguage: lang,
      publisher: baseOrganization,
      potentialAction: createSearchAction(),
      mainEntity: { '@type': 'Sitemap', url: fullSitemapUrl }
    };
    schemas.push(defaultWebsiteSchema);
  }
};

const addOrganizationSchemas = (schemas: any[]): void => {
  schemas.push(baseOrganization, localBusinessSchema);
};

const addOptionalSchemas = (schemas: any[]): void => {
  if (breadcrumbSchema) schemas.push(breadcrumbSchema);
  if (faqSchema) schemas.push(faqSchema);
  if (howToSchema) schemas.push(howToSchema);
  if (collectionPageSchema) schemas.push(collectionPageSchema);
  if (softwareApplicationSchema) schemas.push(softwareApplicationSchema);
  if (websiteSchema) schemas.push(websiteSchema);
};

const structuredDataSchemas: any[] = [];
addMainSchema(structuredDataSchemas);
addOrganizationSchemas(structuredDataSchemas);
addOptionalSchemas(structuredDataSchemas);

---

<!-- ========== BASIC META TAGS ========== -->
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.2, minimum-scale=0.8, user-scalable=yes, viewport-fit=cover" />
<meta name="language" content={lang} />
<meta name="generator" content="Astro" />
<title>{title}</title>
<meta name="description" content={description} />
{keywords.length > 0 && <meta name="keywords" content={keywords.join(', ')} />}
{author && <meta name="author" content={author} />}

<!-- ========== MOBILE OPTIMIZATION ========== -->
<meta name="mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
<meta name="apple-mobile-web-app-title" content={title} />
<meta name="apple-touch-fullscreen" content="yes" />
<meta name="apple-mobile-web-app-orientations" content="portrait" />
<meta name="format-detection" content="telephone=no, date=no, email=no, address=no" />
<meta name="HandheldFriendly" content="true" />
<meta name="MobileOptimized" content="width" />
<meta name="msapplication-tap-highlight" content="no" />

<!-- ========== THEME & APPLICATION ========== -->
<meta name="theme-color" content={seoConfig.theme.color} />
<meta name="msapplication-TileColor" content={seoConfig.theme.color} />
<meta name="msapplication-navbutton-color" content={seoConfig.theme.color} />
<meta name="color-scheme" content={seoConfig.theme.colorScheme} />
<meta name="application-name" content={title} />
<meta name="msapplication-tooltip" content={description} />
<meta name="msapplication-starturl" content="/" />
<meta name="msapplication-TileImage" content="/favicon/web-app-manifest-192x192.png" />

<!-- ========== RENDERING & SECURITY ========== -->
<meta name="renderer" content="webkit" />
<meta name="force-rendering" content="webkit" />
<meta name="screen-orientation" content="portrait" />
<meta name="referrer" content={seoConfig.security.referrer} />
<meta http-equiv="X-Content-Type-Options" content={seoConfig.security.contentTypeOptions} />
<meta http-equiv="X-XSS-Protection" content={seoConfig.security.xssProtection} />

<!-- ========== SEARCH ENGINE OPTIMIZATION ========== -->
<meta name="googlebot" content="index, follow" />
<meta name="bingbot" content="index, follow" />
<meta name="sitemap" content={fullSitemapUrl} />

<!-- ========== OPEN GRAPH ========== -->
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:type" content={pageType} />
<meta property="og:url" content={normalizedCanonical} />
<meta property="og:image" content={fullImageUrl} />
<meta property="og:image:type" content="image/webp" />
<meta property="og:image:alt" content={title} />
<meta property="og:logo" content={joinUrl(getSiteUrl(), seoConfig.site.defaultImage)} />
<meta property="og:site_name" content={defaultConfig.siteName} />
<meta property="og:locale" content={defaultConfig.locale} />
<meta property="og:updated_time" content={new Date().toISOString()} />

<!-- ========== TWITTER CARDS ========== -->
<meta name="twitter:card" content={defaultConfig.twitterCard} />
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={fullImageUrl} />
<meta name="twitter:image:alt" content={title} />
<meta name="twitter:site" content="@yosiakefas" />
<meta name="twitter:creator" content="@yosiakefas" />

<!-- ========== CANONICAL & SITEMAP ========== -->
<link rel="canonical" href={normalizedCanonical} />
<link rel="sitemap" type="application/xml" title="Sitemap" href={fullSitemapUrl} />
<link rel="alternate" type="application/xml" title="Sitemap" href={fullSitemapUrl} />

<!-- ========== FAVICON ========== -->
<link rel="icon" type="image/svg+xml" href={defaultConfig.favicon} />
<link rel="icon" type="image/png" sizes="32x32" href="/favicon/favicon-96x96.png" />
<link rel="icon" type="image/png" sizes="16x16" href="/favicon/favicon-96x96.png" />
<link rel="shortcut icon" href="/favicon/favicon.ico" />

<!-- ========== APPLE TOUCH ICONS ========== -->
<link rel="apple-touch-icon" href="/favicon/apple-touch-icon.png" />
<link rel="apple-touch-icon" sizes="57x57" href="/favicon/apple-touch-icon.png" />
<link rel="apple-touch-icon" sizes="60x60" href="/favicon/apple-touch-icon.png" />
<link rel="apple-touch-icon" sizes="72x72" href="/favicon/apple-touch-icon.png" />
<link rel="apple-touch-icon" sizes="76x76" href="/favicon/apple-touch-icon.png" />
<link rel="apple-touch-icon" sizes="114x114" href="/favicon/apple-touch-icon.png" />
<link rel="apple-touch-icon" sizes="120x120" href="/favicon/apple-touch-icon.png" />
<link rel="apple-touch-icon" sizes="144x144" href="/favicon/apple-touch-icon.png" />
<link rel="apple-touch-icon" sizes="152x152" href="/favicon/apple-touch-icon.png" />
<link rel="apple-touch-icon" sizes="180x180" href="/favicon/apple-touch-icon.png" />

<!-- ========== PWA MANIFEST ========== -->
<link rel="manifest" href="/favicon/site.webmanifest" />

<!-- ========== RESOURCE HINTS ========== -->
{preconnectUrls.map(url => (
  <link rel="preconnect" href={url} crossorigin />
))}

{dnsPrefetchUrls.map(url => (
  <link rel="dns-prefetch" href={url} />
))}

{prefetchUrls.map(url => (
  <link rel="prefetch" href={url} />
))}

{preloadResources.map(resource => (
  <link 
    rel="preload" 
    href={resource.href} 
    as={resource.as}
    crossorigin={resource.crossorigin}
    type={resource.type}
  />
))}

<!-- ========== FONT LOADING ========== -->
    <!-- Fluent Emoji Webfont - Non-render-blocking with preload -->
    <link 
      rel='preload' 
      href='https://tetunori.github.io/fluent-emoji-webfont/dist/FluentEmojiColor.css' 
      as='style'
      onload="this.onload=null;this.rel='stylesheet'"
    />
    <noscript>
      <link rel='stylesheet' href='https://tetunori.github.io/fluent-emoji-webfont/dist/FluentEmojiColor.css'/>
    </noscript>

<!-- ========== ROBOTS & PAGINATION ========== -->
<meta name="robots" content={noindex ? 'noindex, nofollow' : seoConfig.seo.robots.default} />

{currentPage && currentPage > 1 && (
  <meta name="robots" content="noindex, follow" />
)}
{currentPage && typeof totalPages === 'number' && currentPage < totalPages && (
  <link rel="next" href={joinUrl(getSiteUrl(), `${baseUrl || ''}/page-${currentPage + 1}`)} />
)}
{currentPage && currentPage > 1 && (
  <link rel="prev" href={
    currentPage === 2 
      ? joinUrl(getSiteUrl(), baseUrl || '')
      : joinUrl(getSiteUrl(), `${baseUrl || ''}/page-${currentPage - 1}`)
  } />
)}

<!-- ========== STRUCTURED DATA ========== -->
{structuredDataSchemas.map(schema => (
  <script is:inline type="application/ld+json" set:html={JSON.stringify(schema)} />
))}

<!-- ========== IMAGE FALLBACK - ASTRO NATIVE MINIMAL ========== -->
<script is:inline>
  window.handleImgError=function(e){e.onerror=null;e.src=e.src===location.origin+'/img/gorakudo-immerison.png'?'data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg"%3E%3C/svg%3E':'/img/gorakudo-immerison.png';e.alt=e.alt||'GoRakuDo Logo'}
</script>

<!-- ========== GOOGLE ANALYTICS ========== -->
{gtag && (
  <>
    <script is:inline async src={`https://www.googletagmanager.com/gtag/js?id=${gtag}`}></script>
    <script is:inline define:vars={{ gtagId: gtag }}>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', gtagId, {
        send_page_view: true,
        transport_type: 'beacon',
        custom_map: {
          'custom_parameter_1': 'site_type',
          'custom_parameter_2': 'deployment_platform'
        }
      });
      
      gtag('event', 'page_view', {
        site_type: 'static_site',
        deployment_platform: 'github_pages'
      });
    </script>
  </>
)}
