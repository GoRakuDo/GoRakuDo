---
// PostsGrid Component - Optimized
// ドキュメントページの投稿グリッドを表示するコンポーネント（PostCard統合版）

export interface Props {
  posts: Array<{
    slug: string;
    title: string;
    description: string;
    url?: string;
    publishedDate: string;
    emoji?: string;
    tags?: string[];
    category?: string;
    isRecommended?: boolean;
    isBeginner?: boolean;
    isTool?: boolean;
  }>;
  className?: string;
}

const {
  posts = [],
  className = '',
} = Astro.props;

// 最適化された日付フォーマット関数（メモ化対応）
const dateFormatter = new Intl.DateTimeFormat('id-ID', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});

function formatDate(dateString: string): string {
  if (!dateString?.trim()) return 'Invalid Date';
  
  const date = new Date(dateString);
  return isNaN(date.getTime()) ? 'Invalid Date' : dateFormatter.format(date);
}

// カードバリアントの配列（パフォーマンス最適化）
const cardVariants = ['post-card-0', 'post-card-1', 'post-card-2', 'post-card-3'];

// 最適化された投稿データの前処理
const processedPosts = posts.map((post, index) => ({
  ...post,
  cardVariant: cardVariants[index % cardVariants.length],
  displayTags: post.tags?.slice(0, 3) || [],
  remainingTags: Math.max(0, (post.tags?.length || 0) - 3),
  formattedDate: formatDate(post.publishedDate),
  postUrl: post.url || `/docs/${post.slug}`,
}));
---

<div class={`posts-grid ${className}`}>
  {processedPosts.map((post) => (
    <article
      class={`post-card glassmorphism glassmorphism-card ${post.cardVariant}`}
      data-post-slug={post.slug}
      data-content-type={post.category || ''}
      data-is-recommended={post.isRecommended ? 'true' : 'false'}
      data-is-beginner={post.isBeginner ? 'true' : 'false'}
      data-is-tool={post.isTool ? 'true' : 'false'}
    >
      <!-- Emoji Display -->
      {post.emoji && <div class='post-emoji'>{post.emoji}</div>}

      <div class='post-card-container'>
        <!-- Post Header -->
        <header class='post-header'>
          <h2 class='post-title'>
            <a href={post.postUrl} aria-label={`Baca artikel: ${post.title}`}>
              {post.title}
            </a>
          </h2>
          <div class='post-meta'>
            <time class='post-date' datetime={post.publishedDate}>
              {post.formattedDate}
            </time>
          </div>
        </header>

        <!-- Post Description -->
        <p class='post-description'>{post.description}</p>

        <!-- Post Tags -->
        <div class='post-tags' data-all-tags={JSON.stringify(post.tags || [])}>
          {post.displayTags.map((tag: string) => (
            <span class='post-tag'>{tag}</span>
          ))}
          {post.remainingTags > 0 && (
            <span class='post-tag-more' data-count={post.remainingTags}>
              +{post.remainingTags}
            </span>
          )}
        </div>

        <!-- Read More Button -->
        <a href={post.postUrl} class='read-more-btn' aria-label={`Baca selengkapnya: ${post.title}`}>
          Baca Selengkapnya →
        </a>
      </div>
    </article>
  ))}
</div>

