---
// Optimized Breadcrumb Component - Astro Best Practices
// Static-first, performance-obsessed implementation

import type { CollectionEntry } from 'astro:content';
import { resolvePath, getCollectionInfo } from '../../utils/collections';
import { generateBreadcrumbSchema } from '../../utils/breadcrumb-schema';

// ========== TYPE DEFINITIONS ==========
export interface BreadcrumbItem {
  readonly title: string;
  readonly url: string;
  readonly isActive: boolean;
  readonly icon?: string;
}

export interface BreadcrumbData {
  readonly items: readonly BreadcrumbItem[];
  readonly ariaLabel: string;
}

export interface ToolBreadcrumbConfig {
  readonly toolName: string;
  readonly articleTitle?: string;
  readonly articleSlug?: string;
  readonly showHome?: boolean;
}

// ========== PROPS INTERFACE ==========
export interface Props {
  post?: CollectionEntry<'docs'>;
  currentPath?: string;
  showHome?: boolean;
  toolConfig?: ToolBreadcrumbConfig;
  showIcons?: boolean;
  orientation?: 'horizontal' | 'vertical';
  maxItems?: number;
  ariaLabel?: string;
  className?: string;
}

// ========== ICON CONFIGURATION ==========
const ICONS = {
  home: `<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
  </svg>`,
  document: `<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
  </svg>`,
  book: `<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
  </svg>`,
  folder: `<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"></path>
  </svg>`,
  tools: `<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
    <path d="M10 4V8M2 8H22M6 4V8M4 4H20C21.1046 4 22 4.89543 22 6V18C22 19.1046 21.1046 20 20 20H4C2.89543 20 2 19.1046 2 18V6C2 4.89543 2.89543 4 4 4Z" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
  </svg>`,
  more: `<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h.01M12 12h.01M19 12h.01"></path>
  </svg>`,
} as const;

const PATH_ICON_MAP: Record<string, keyof typeof ICONS> = {
  docs: 'book',
  pages: 'document',
  'support-us': 'folder',
  tools: 'tools',
};

// ========== UTILITY FUNCTIONS ==========
function sanitizeText(text: string): string {
  return text.replace(/[<>"'&]/g, '');
}

function truncateText(text: string, maxLength: number): string {
  return text.length > maxLength ? `${text.substring(0, maxLength)}...` : text;
}

function formatSegmentTitle(segment: string): string {
  const titleMap: Record<string, string> = {
    docs: 'Documentation',
    pages: 'Pages',
    'support-us': 'Dukung Kami',
  };
  return (
    titleMap[segment] || segment.charAt(0).toUpperCase() + segment.slice(1)
  );
}

function getSegmentIcon(segment: string): keyof typeof ICONS {
  return PATH_ICON_MAP[segment] || 'folder';
}

function truncateItems(
  items: readonly BreadcrumbItem[],
  maxItems: number
): BreadcrumbItem[] {
  if (items.length <= maxItems) return [...items];

  const result = [
    items[0],
    items[1],
    { title: '...', url: '#', isActive: false, icon: 'more' },
    items[items.length - 2],
    items[items.length - 1],
  ];

  return result;
}

// ========== BREADCRUMB GENERATION ==========
function generateToolBreadcrumb(config: ToolBreadcrumbConfig): BreadcrumbData {
  const { toolName, articleTitle, articleSlug, showHome = true } = config;
  const displayName = toolName.charAt(0).toUpperCase() + toolName.slice(1);
  const items: BreadcrumbItem[] = [];

  if (showHome) {
    items.push({ title: 'Home', url: '/', isActive: false, icon: 'home' });
  }

  items.push({ title: 'Tools', url: '/tools', isActive: false, icon: 'tools' });

  if (articleTitle && articleSlug) {
    items.push(
      {
        title: displayName,
        url: `/tools/${toolName}`,
        isActive: false,
        icon: 'folder',
      },
      {
        title: truncateText(sanitizeText(articleTitle), 30),
        url: `/tools/${toolName}/${sanitizeText(articleSlug)}`,
        isActive: true,
        icon: 'document',
      }
    );
  } else {
    items.push({
      title: displayName,
      url: `/tools/${toolName}`,
      isActive: true,
      icon: 'folder',
    });
  }

  return {
    items: Object.freeze(items),
    ariaLabel: `${displayName}${articleTitle ? ` ${truncateText(articleTitle, 20)}` : ''} navigation breadcrumb`,
  };
}

function generatePostBreadcrumb(
  post: CollectionEntry<'docs'>,
  showHome: boolean
): BreadcrumbData {
  const items: BreadcrumbItem[] = [];

  if (showHome) {
    items.push({ title: 'Home', url: '/', isActive: false, icon: 'home' });
  }

  const collectionMetadata = getCollectionInfo(post.collection);
  const resolvedPath = resolvePath(post.collection, post.slug);

  if (post.collection === 'pages') {
    items.push({
      title: post.data.title,
      url: resolvedPath,
      isActive: true,
      icon: 'document',
    });
  } else {
    items.push({
      title: collectionMetadata.displayName,
      url: collectionMetadata.basePath,
      isActive: false,
      icon: 'folder',
    });
    items.push({
      title: post.data.title,
      url: resolvedPath,
      isActive: true,
      icon: 'document',
    });
  }

  return {
    items: Object.freeze(items),
    ariaLabel: `${post.data.title} navigation breadcrumb`,
  };
}

function generatePathBreadcrumb(
  currentPath: string,
  showHome: boolean
): BreadcrumbData {
  const pathSegments = currentPath.split('/').filter(Boolean);
  const items: BreadcrumbItem[] = [];

  if (showHome) {
    items.push({ title: 'Home', url: '/', isActive: false, icon: 'home' });
  }

  let currentUrl = '';
  for (let i = 0; i < pathSegments.length; i++) {
    const segment = pathSegments[i];
    currentUrl += `/${segment}`;
    const isLast = i === pathSegments.length - 1;

    items.push({
      title: formatSegmentTitle(segment),
      url: currentUrl,
      isActive: isLast,
      icon: getSegmentIcon(segment),
    });
  }

  return {
    items: Object.freeze(items),
    ariaLabel: 'Breadcrumb navigation',
  };
}

// ========== PROPS DESTRUCTURING ==========
const {
  post,
  currentPath = '',
  showHome = true,
  toolConfig,
  showIcons = true,
  orientation = 'horizontal',
  maxItems = 5,
  ariaLabel = 'Breadcrumb navigation',
  className = '',
} = Astro.props;

// ========== BREADCRUMB DATA GENERATION ==========
let breadcrumbData: BreadcrumbData;

try {
  if (toolConfig) {
    breadcrumbData = generateToolBreadcrumb(toolConfig);
  } else if (post) {
    breadcrumbData = generatePostBreadcrumb(post, showHome);
  } else {
    breadcrumbData = generatePathBreadcrumb(currentPath, showHome);
  }

  // Apply max items limit
  breadcrumbData = {
    ...breadcrumbData,
    items: Object.freeze(truncateItems(breadcrumbData.items, maxItems)),
  };
} catch (error) {
  // Fallback breadcrumb
  breadcrumbData = {
    items: Object.freeze([
      { title: 'Home', url: '/', isActive: true, icon: 'home' },
    ]),
    ariaLabel: 'Navigation breadcrumb',
  };
}

// ========== SEO STRUCTURED DATA ==========
// UnifiedSEO.astroで使用するための構造化データ生成
const breadcrumbSchema = generateBreadcrumbSchema({
  items: breadcrumbData.items.map(item => ({
    title: item.title,
    url: item.url,
    isActive: item.isActive,
  })),
  siteUrl: String(Astro.site || 'https://gorakudo.org'),
});

// 後方互換性のためのstructuredData（既存の実装との互換性を保つ）
const structuredData = breadcrumbSchema;

// ========== STATIC CONSTANTS ==========
const SEPARATOR_SVG = `<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
</svg>`;

const BREADCRUMB_CLASSES = `breadcrumb-nav breadcrumb-${orientation} ${className}`;

// ========== EXPORT FOR UNIFIEDSEO.astro ==========
// UnifiedSEO.astroで使用するための構造化データをエクスポート
export { breadcrumbSchema };
---

<!-- ========== BREADCRUMB COMPONENT ========== -->
<nav
  class={BREADCRUMB_CLASSES}
  aria-label={breadcrumbData.ariaLabel}
  role='navigation'
>
  <ol class='breadcrumb-list'>
    {
      breadcrumbData.items.map((item, index) => (
        <li class='breadcrumb-item'>
          {index > 0 && (
            <span
              class='breadcrumb-separator'
              aria-hidden='true'
              set:html={SEPARATOR_SVG}
            />
          )}

          {item.isActive ? (
            <span class='breadcrumb-current' aria-current='page'>
              {showIcons && item.icon && (
                <span
                  class='breadcrumb-icon'
                  aria-hidden='true'
                  set:html={ICONS[item.icon]}
                />
              )}
              <span class='breadcrumb-text'>{item.title}</span>
            </span>
          ) : (
            <a href={item.url} class='breadcrumb-link'>
              {showIcons && item.icon && (
                <span
                  class='breadcrumb-icon'
                  aria-hidden='true'
                  set:html={ICONS[item.icon]}
                />
              )}
              <span class='breadcrumb-text'>{item.title}</span>
            </a>
          )}
        </li>
      ))
    }
  </ol>
</nav>

<!-- SEO structured data -->
<script
  is:inline
  type='application/ld+json'
  set:html={JSON.stringify(structuredData)}
/>

<style is:global>
  /* ========== BREADCRUMB STYLES - OKLCH COLOR SYSTEM ========== */
  .breadcrumb-nav {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 0;
    border-radius: 0.375rem;
    background: transparent;
    color: oklch(98% 0.002 270deg);
    font-size: 0.875rem;
  }

  .breadcrumb-horizontal {
    flex-direction: row;
  }

  .breadcrumb-vertical {
    flex-direction: column;
    align-items: flex-start;
  }

  .breadcrumb-list {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin: 0;
    padding: 0;
    list-style: none;
  }

  .breadcrumb-vertical .breadcrumb-list {
    flex-direction: column;
    align-items: flex-start;
  }

  .breadcrumb-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin: 0;
    padding: 0;
  }

  .breadcrumb-separator {
    display: flex;
    align-items: center;
    color: var(--clr-text-muted);
    opacity: 0.6;

    svg {
      width: 0.75rem;
      height: 0.75rem;
    }
  }

  .breadcrumb-link {
    display: flex;
    align-items: center;
    gap: 0.375rem;
    padding: 0.375rem 0.75rem;
    border-radius: 0.25rem;
    color: var(--clr-text-primary);
    text-decoration: none;
    transition: all 0.2s ease;

    &:hover {
      background: oklch(65% 0.25 280deg);
      color: oklch(98% 0.002 270deg);
    }

    /* Accessibility - High contrast */
    @media (prefers-contrast: high) {
      &:hover {
        background: oklch(65% 0.25 280deg);
        color: oklch(98% 0.002 270deg);
      }
    }
  }

  .breadcrumb-current {
    display: flex;
    align-items: center;
    gap: 0.375rem;
    padding: 0.375rem 0.75rem;
    border-radius: 0.25rem;
    background: var(--clr-accent);
    color: var(--clr-background);
    font-weight: 600;
    text-decoration: none;

    /* Accessibility - High contrast */
    @media (prefers-contrast: high) {
      background: oklch(65% 0.25 280deg);
      color: oklch(98% 0.002 270deg);
    }
  }

  .breadcrumb-icon {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    width: 1rem;
    height: 1rem;
    opacity: 0.8;
    flex-shrink: 0;

    svg {
      width: 100%;
      height: 100%;
    }
  }

  .breadcrumb-text {
    overflow: hidden;
    max-width: 8rem;
    white-space: nowrap;
    text-overflow: ellipsis;

    /* Responsive design - Nested media queries */
    @media (min-width: 640px) {
      max-width: 10rem;
    }

    @media (min-width: 768px) {
      max-width: 12rem;
    }

    @media (min-width: 1024px) {
      max-width: 16rem;
    }
  }
</style>
