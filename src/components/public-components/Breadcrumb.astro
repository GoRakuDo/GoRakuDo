---
// Fully Customizable Breadcrumb Component with Mind Map Integration
// GoRakuDo Engineering Team 2025 - Astro + Vue + Tailwind v4.1
// Mobile-first responsive design with comprehensive customization options

import type { CollectionEntry } from "astro:content"
import {
  resolvePath,
  getCollectionInfo,
} from "../../utils/collections"
import type { 
  BreadcrumbItem, 
  BreadcrumbData, 
  ToolBreadcrumbConfig,
  ToolName 
} from "../../utils/content/breadcrumb-utils"
import { 
  generateToolBreadcrumb,
  validateBreadcrumbData, 
  sanitizeBreadcrumbItem,
  createFallbackBreadcrumb
} from "../../utils/content/breadcrumb-utils"

// ========== ASTRO-NATIVE PROPS INTERFACE ==========
export interface Props {
  // Core navigation (KISS principle - essential props only)
  post?: CollectionEntry<"docs">
  currentPath?: string
  showHome?: boolean

  // Tool breadcrumb (DRY principle - single config object)
  toolConfig?: ToolBreadcrumbConfig

  // Visual customization (simplified)
  variant?: "compact" | "spacious" | "minimal" | "pill" | "underline"
  theme?: "light" | "dark" | "auto"
  showIcons?: boolean

  // Typography customization
  fontSize?: "xs" | "sm" | "base" | "lg" | "xl"
  fontWeight?: "normal" | "medium" | "semibold" | "bold"

  // Layout and spacing
  orientation?: "horizontal" | "vertical"
  spacing?: "tight" | "normal" | "loose"
  alignment?: "left" | "center" | "right"
  maxItems?: number

  // Separator customization
  separator?: "chevron" | "slash" | "arrow" | "dot"

  // Interactive effects
  hoverEffects?: boolean
  focusVisible?: boolean

  // Accessibility
  ariaLabel?: string

  // CSS classes
  className?: string
}

// ========== ASTRO-NATIVE DEFAULT PROPS ==========
const {
  // Core navigation
  post,
  currentPath = "",
  showHome = true,

  // Tool breadcrumb (DRY principle)
  toolConfig,

  // Visual customization (KISS principle)
  variant = "compact",
  theme = "auto",
  showIcons = false,

  // Typography customization
  fontSize = "sm",
  fontWeight = "medium",

  // Layout and spacing
  orientation = "horizontal",
  spacing = "normal",
  alignment = "left",
  maxItems = 5,

  // Separator customization
  separator = "chevron",

  // Interactive effects
  hoverEffects = true,
  focusVisible = true,

  // Accessibility
  ariaLabel = "Breadcrumb navigation",

  // CSS classes
  className = "",
} = Astro.props

// ========== ASTRO-NATIVE BREADCRUMB GENERATION ==========
// KISS Principle: Simple, focused breadcrumb generation

let breadcrumbData: BreadcrumbData;

try {
  // Tool breadcrumb (DRY principle - use utility function)
  if (toolConfig) {
    breadcrumbData = generateToolBreadcrumb({
      ...toolConfig,
      showHome: toolConfig.showHome ?? showHome
    });
  } 
  // Post breadcrumb
  else if (post) {
    const items: BreadcrumbItem[] = [];
    
    if (showHome) {
      items.push({
        title: "Home",
        url: "/",
        isActive: false,
        icon: "🏠",
      });
    }

    const collectionMetadata = getCollectionInfo("docs");
    const resolvedPath = { path: resolvePath("docs", post.slug) };

    items.push(
      {
        title: collectionMetadata.displayName,
        url: collectionMetadata.basePath,
        isActive: false,
        icon: collectionMetadata.icon,
      },
      {
        title: post.data.title,
        url: resolvedPath.path,
        isActive: true,
        icon: "📄",
      }
    );

    breadcrumbData = {
      items: Object.freeze(items),
      ariaLabel: `${post.data.title} navigation breadcrumb`,
    };
  } 
  // Path-based breadcrumb
  else {
    const pathSegments = currentPath.split("/").filter(Boolean);
    const items: BreadcrumbItem[] = [];

    if (showHome) {
      items.push({
        title: "Home",
        url: "/",
        isActive: false,
        icon: "🏠",
      });
    }

    let currentUrl = "";
    pathSegments.forEach((segment, index) => {
      currentUrl += `/${segment}`;
      const isLast = index === pathSegments.length - 1;
      const title = segment === "docs" ? "Documentation" : segment.charAt(0).toUpperCase() + segment.slice(1);

      items.push({
        title,
        url: currentUrl,
        isActive: isLast,
        icon: segment === "docs" ? "📚" : "📁",
      });
    });

    breadcrumbData = {
      items: Object.freeze(items),
      ariaLabel: ariaLabel,
    };
  }

  // Apply max items limit (KISS principle)
  if (breadcrumbData.items.length > maxItems) {
    const startItems = breadcrumbData.items.slice(0, 2);
    const endItems = breadcrumbData.items.slice(-2);
    const truncatedItems = [
      ...startItems,
      { title: "...", url: "#", isActive: false, icon: "⋯" },
      ...endItems,
    ];
    
    breadcrumbData = {
      ...breadcrumbData,
      items: Object.freeze(truncatedItems),
    };
  }

  // Validate and sanitize (DRY principle)
  if (!validateBreadcrumbData(breadcrumbData)) {
    throw new Error("Invalid breadcrumb data structure");
  }

  // Sanitize all items
  breadcrumbData = {
    ...breadcrumbData,
    items: Object.freeze(breadcrumbData.items.map(sanitizeBreadcrumbItem)),
  };

} catch (error) {
  // Fallback (KISS principle)
  breadcrumbData = createFallbackBreadcrumb();
}

// ========== ASTRO-NATIVE STYLING ==========
// KISS Principle: Simple, focused styling

const getSeparator = (): string => {
  switch (separator) {
    case "chevron":
      return `<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
      </svg>`;
    case "slash":
      return `<span class="text-muted-foreground">/</span>`;
    case "arrow":
      return `<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
      </svg>`;
    case "dot":
      return `<span class="text-muted-foreground">•</span>`;
    default:
      return `<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
      </svg>`;
  }
};

// CSS Variables (simplified)
const cssVars = `
  --breadcrumb-variant: ${variant};
  --breadcrumb-theme: ${theme};
  --breadcrumb-orientation: ${orientation};
  --breadcrumb-font-size: ${fontSize};
  --breadcrumb-font-weight: ${fontWeight};
  --breadcrumb-spacing: ${spacing};
  --breadcrumb-alignment: ${alignment};
  --breadcrumb-separator: ${separator};
  --breadcrumb-hover-effects: ${hoverEffects ? 'enabled' : 'disabled'};
  --breadcrumb-focus-visible: ${focusVisible ? 'enabled' : 'disabled'};
`;

// ========== SEO STRUCTURED DATA ==========
const structuredData = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: breadcrumbData.items.map((item, index) => ({
    "@type": "ListItem",
    position: index + 1,
    name: item.title,
    item: `${Astro.site}${item.url}`,
  })),
};
---

<!-- ========== ASTRO-NATIVE BREADCRUMB COMPONENT ========== -->
<nav
  class={`breadcrumb-nav breadcrumb-${variant} breadcrumb-${orientation} ${className}`}
  style={cssVars}
  aria-label={breadcrumbData.ariaLabel}
  role="navigation">
  <ol class="breadcrumb-list">
    {breadcrumbData.items.map((item, index) => (
      <li class="breadcrumb-item">
        {/* Separator for non-first items */}
        {index > 0 && (
          <span
            class="breadcrumb-separator"
            aria-hidden="true"
            set:html={getSeparator()}
          />
        )}

        {/* Breadcrumb item */}
        {item.isActive ? (
          <span class="breadcrumb-current" aria-current="page">
            {showIcons && item.icon && (
              <span class="breadcrumb-icon" aria-hidden="true">
                {item.icon}
              </span>
            )}
            <span class="breadcrumb-text">{item.title}</span>
          </span>
        ) : (
          <a href={item.url} class="breadcrumb-link">
            {showIcons && item.icon && (
              <span class="breadcrumb-icon" aria-hidden="true">
                {item.icon}
              </span>
            )}
            <span class="breadcrumb-text">{item.title}</span>
          </a>
        )}
      </li>
    ))}
  </ol>
</nav>

<!-- SEO structured data -->
<script type="application/ld+json" set:html={JSON.stringify(structuredData)} />

<style>
  /* ========== ASTRO-NATIVE BREADCRUMB STYLES ========== */
  /* KISS Principle: Simple, focused styling */

  .breadcrumb-nav {
    display: flex;
    align-items: center;
    font-size: 0.875rem;
    color: var(--color-text);
    background: var(--color-background);
    border-radius: 0.375rem;
    padding: 0.5rem;
  }

  .breadcrumb-horizontal {
    flex-direction: row;
  }

  .breadcrumb-vertical {
    flex-direction: column;
    align-items: flex-start;
  }

  .breadcrumb-list {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin: 0;
    padding: 0;
    list-style: none;
  }

  .breadcrumb-vertical .breadcrumb-list {
    flex-direction: column;
    align-items: flex-start;
  }

  .breadcrumb-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .breadcrumb-separator {
    display: flex;
    align-items: center;
    color: var(--color-muted);
    opacity: 0.6;
  }

  .breadcrumb-separator svg {
    width: 0.75rem;
    height: 0.75rem;
  }

  .breadcrumb-link,
  .breadcrumb-current {
    display: flex;
    align-items: center;
    gap: 0.375rem;
    padding: 0.375rem 0.75rem;
    border-radius: 0.25rem;
    text-decoration: none;
    color: var(--color-text);
    transition: all 0.2s ease;
  }

  .breadcrumb-link:hover {
    background: var(--color-primary);
    color: var(--color-background);
  }

  .breadcrumb-current {
    background: var(--color-primary);
    color: var(--color-background);
    font-weight: 600;
  }

  .breadcrumb-icon {
    font-size: 0.875em;
    opacity: 0.8;
  }

  .breadcrumb-text {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 8rem;
  }

  /* Variant styles */
  .breadcrumb-compact {
    padding: 0.25rem 0.5rem;
  }

  .breadcrumb-compact .breadcrumb-link,
  .breadcrumb-compact .breadcrumb-current {
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
  }

  .breadcrumb-spacious {
    padding: 0.75rem 1rem;
  }

  .breadcrumb-spacious .breadcrumb-link,
  .breadcrumb-spacious .breadcrumb-current {
    padding: 0.5rem 1rem;
    font-size: 1rem;
  }

  .breadcrumb-minimal {
    background: transparent;
    padding: 0;
  }

  .breadcrumb-minimal .breadcrumb-link,
  .breadcrumb-minimal .breadcrumb-current {
    padding: 0.25rem 0;
    background: transparent;
  }

  .breadcrumb-pill .breadcrumb-link,
  .breadcrumb-pill .breadcrumb-current {
    border-radius: 9999px;
    border: 1px solid var(--color-border);
  }

  .breadcrumb-underline .breadcrumb-link {
    border-bottom: 2px solid transparent;
    padding-bottom: 0.125rem;
  }

  .breadcrumb-underline .breadcrumb-link:hover {
    border-bottom-color: var(--color-primary);
  }

  .breadcrumb-underline .breadcrumb-current {
    border-bottom: 2px solid var(--color-primary);
    padding-bottom: 0.125rem;
  }

  /* Responsive design */
  @media (min-width: 640px) {
    .breadcrumb-text {
      max-width: 10rem;
    }
  }

  @media (min-width: 768px) {
    .breadcrumb-text {
      max-width: 12rem;
    }
  }

  @media (min-width: 1024px) {
    .breadcrumb-text {
      max-width: 16rem;
    }
  }

  /* Accessibility */
  @media (prefers-reduced-motion: reduce) {
    .breadcrumb-link,
    .breadcrumb-current {
      transition: none;
    }
  }

  @media (prefers-contrast: high) {
    .breadcrumb-link:hover,
    .breadcrumb-current {
      background: var(--color-primary);
      color: var(--color-background);
    }
  }
</style>
