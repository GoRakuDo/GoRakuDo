---
export interface Props {
  placeholder?: string;
  searchAction?: string;
  className?: string;
  ariaLabel?: string;
  showSubmitButton?: boolean;
  submitButtonText?: string;
  inputId?: string;
  formId?: string;
  size?: 'sm' | 'md' | 'lg';
  variant?: 'default' | 'glassmorphism';
  initialValue?: string;
}

const {
  placeholder = 'Search...',
  searchAction = '/search',
  className = '',
  ariaLabel = 'Search interface',
  showSubmitButton = true,
  submitButtonText = 'Search',
  inputId = 'search-input',
  formId = 'search-form',
  size = 'md',
  variant = 'glassmorphism',
  initialValue = '',
} = Astro.props;

// 最適化: バリデーションを簡素化
const sanitizedSearchAction = searchAction.startsWith('/')
  ? searchAction
  : '/search';
const sanitizedPlaceholder = placeholder.trim() || 'Search...';
---

<div
  class={`search-form-container ${className}`}
  data-size={size}
  data-variant={variant}
>
  <form
    id={formId}
    class='search-form'
    action={sanitizedSearchAction}
    method='get'
    novalidate
  >
    <div class='search-input-wrapper'>
      <label for={inputId} class='sr-only'>Search query</label>
      <input
        id={inputId}
        type='search'
        name='q'
        class='search-input'
        placeholder={sanitizedPlaceholder}
        value={initialValue}
        autocomplete='off'
        aria-label={ariaLabel}
        required
        minlength='1'
        maxlength='100'
      />
      {
        showSubmitButton && (
          <button
            type='submit'
            class='search-submit-btn'
            aria-label={submitButtonText}
          >
            <svg
              class='search-icon'
              fill='none'
              stroke='currentColor'
              viewBox='0 0 24 24'
              aria-hidden='true'
            >
              <path
                stroke-linecap='round'
                stroke-linejoin='round'
                stroke-width='2'
                d='M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z'
              />
            </svg>
            <span class='sr-only'>{submitButtonText}</span>
          </button>
        )
      }
    </div>
  </form>
</div>

<style is:global>
  /* ========== SEARCH FORM COMPONENT STYLES ========== */

  .search-form-container {
    /* 最適化: 必要最小限のデザイントークンのみ */
    --sf-space-xs: clamp(0.25rem, 1vw, 0.375rem);
    --sf-space-sm: clamp(0.5rem, 2vw, 0.75rem);
    --sf-space-md: clamp(0.75rem, 3vw, 1rem);
    --sf-space-lg: clamp(1rem, 4vw, 1.25rem);
    --sf-space-xl: clamp(1.25rem, 5vw, 1.5rem);
    --sf-space-2xl: clamp(1.5rem, 6vw, 1.75rem);
    --sf-text-sm: clamp(0.75rem, 3vw, 0.875rem);
    --sf-text-base: clamp(0.875rem, 2vw, 1rem);
    --sf-text-lg: clamp(1rem, 2.5vw, 1.125rem);
    --sf-radius-sm: var(--sf-space-xs);
    --sf-radius-md: var(--sf-space-md);
    --sf-radius-lg: var(--sf-space-lg);
    --sf-radius-xl: var(--sf-space-xl);

    width: 100%;
  }

  /* Screen Reader Only */
  .sr-only {
    position: absolute;
    overflow: hidden;
    width: 1px;
    height: 1px;
    margin: -1px;
    padding: 0;
    border: 0;
    white-space: nowrap;
    clip-path: inset(100%);
  }

  /* 最適化: 検索フォーム基本スタイル */
  .search-form {
    display: flex;
    flex-direction: column;
    width: 100%;
  }

  .search-input-wrapper {
    position: relative;
    display: flex;
    align-items: center;
    gap: var(--sf-space-xs);
  }

  /* lgサイズでのGap調整 */
  .search-form-container[data-size='lg'] .search-input-wrapper {
    gap: var(--sf-space-sm);
  }

  /* 再デザイン: 高可視性の検索入力フィールド */
  .search-form-container .search-input {
    position: relative;
    flex: 1;
    overflow: hidden;
    min-height: var(--input-height, 48px);
    padding: var(--input-padding, var(--sf-space-sm) var(--sf-space-lg));
    border: 3px solid oklch(from var(--clr-accent) l c h / 0.4);
    border-radius: var(--sf-radius-lg);
    background: linear-gradient(
      135deg,
      oklch(from var(--clr-background) l c h / 0.95) 0%,
      oklch(from var(--clr-background) l c h / 0.85) 100%
    );
    color: var(--clr-text-primary);
    font-size: var(--input-font, var(--sf-text-base));
    font-weight: 600;
    line-height: 1.4;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    touch-action: manipulation;
    backdrop-filter: blur(12px) saturate(120%);
    box-shadow:
      0 12px 48px oklch(from var(--clr-background) l c h / 0.25),
      0 4px 16px oklch(from var(--clr-background) l c h / 0.15),
      0 0 0 1px oklch(from var(--clr-accent) l c h / 0.3),
      inset 0 2px 4px oklch(from var(--clr-background) l c h / 0.3),
      inset 0 -1px 2px oklch(from var(--clr-background) l c h / 0.1);
  }

  .search-input::before {
    position: absolute;
    inset: 0;
    border-radius: inherit;
    background: linear-gradient(
      135deg,
      oklch(from var(--clr-accent) l c h / 0.2) 0%,
      oklch(from var(--clr-accent) l c h / 0.1) 30%,
      transparent 60%,
      oklch(from var(--clr-accent) l c h / 0.08) 100%
    );
    opacity: 0;
    pointer-events: none;
    transition: all 0.3s ease;
    content: '';
  }

  /* 再デザイン: プレースホルダー */
  .search-form-container .search-input::placeholder {
    color: var(--clr-text-secondary);
    font-weight: 400;
    opacity: 0.8;
    transition: all 0.3s ease;
  }

  /* 再デザイン: 超高可視性フォーカス状態 */
  .search-input:focus {
    outline: none;
    border: 3px solid var(--clr-accent);
    background: linear-gradient(
      135deg,
      oklch(from var(--clr-background) l c h / 1) 0%,
      oklch(from var(--clr-background) l c h / 0.95) 100%
    );
    box-shadow:
      0 24px 72px oklch(from var(--clr-background) l c h / 0.4),
      0 12px 32px oklch(from var(--clr-background) l c h / 0.25),
      0 0 0 4px oklch(from var(--clr-accent) l c h / 0.3),
      0 0 48px oklch(from var(--clr-accent) l c h / 0.5),
      0 0 96px oklch(from var(--clr-accent) l c h / 0.3),
      inset 0 3px 6px oklch(from var(--clr-background) l c h / 0.5),
      inset 0 -2px 4px oklch(from var(--clr-background) l c h / 0.2);

    /* transform: translateY(-4px) scale(1.03); - 位置ずれを防ぐため無効化 */
  }

  /* 最適化: バリアントスタイル */
  .search-form-container[data-variant='default'] .search-input {
    border: 2px solid oklch(from var(--clr-border) l c h / 0.8);
    background: oklch(from var(--clr-background) l c h / 0.95);
    box-shadow:
      0 4px 16px oklch(from var(--clr-background) l c h / 0.2),
      0 0 0 1px oklch(from var(--clr-border) l c h / 0.6);
  }

  .search-form-container[data-variant='glassmorphism'] .search-input {
    border: 2px solid oklch(from var(--clr-glass-border) l c h / 0.8);
    background: oklch(from var(--clr-glass-background) l c h / 0.9);
    backdrop-filter: blur(12px) saturate(150%);
    box-shadow:
      0 4px 16px oklch(from var(--clr-background) l c h / 0.2),
      0 0 0 1px oklch(from var(--clr-glass-border) l c h / 0.6);
  }

  .search-input:focus::before {
    background: linear-gradient(
      135deg,
      oklch(from var(--clr-accent) l c h / 0.3) 0%,
      oklch(from var(--clr-accent) l c h / 0.2) 25%,
      oklch(from var(--clr-accent) l c h / 0.1) 50%,
      oklch(from var(--clr-accent) l c h / 0.15) 75%,
      oklch(from var(--clr-accent) l c h / 0.25) 100%
    );
    opacity: 1;
  }

  .search-input:focus::placeholder {
    opacity: 0.4;

    /* transform: translateX(8px); - 位置ずれを防ぐため無効化 */
  }

  /* 最適化: 検索ボタン */
  .search-submit-btn {
    display: flex;
    justify-content: center;
    align-items: center;
    min-width: var(--btn-size, 44px);
    min-height: var(--btn-size, 44px);
    padding: var(--sf-space-sm);
    border: none;
    border-radius: var(--sf-radius-lg);
    background: var(--clr-accent);
    color: white;
    cursor: pointer;
    transition: all 0.2s ease;
    touch-action: manipulation;
    flex-shrink: 0;
  }

  .search-submit-btn:hover,
  .search-submit-btn:focus-visible {
    background: var(--clr-accent-dark);

    /* transform: scale(1.05); - 位置ずれを防ぐため無効化 */
  }

  .search-submit-btn:active {
    /* transform: scale(0.95); - 位置ずれを防ぐため無効化 */
  }

  .search-submit-btn:focus-visible {
    outline: 2px solid var(--clr-accent);
    outline-offset: 2px;
  }

  /* 最適化: アイコン */
  .search-icon {
    width: var(--icon-size, var(--sf-space-lg));
    height: var(--icon-size, var(--sf-space-lg));
  }

  /* 最適化: サイズバリアント（簡素化） */
  .search-form-container[data-size='sm'] {
    --input-height: 40px;
    --input-padding: var(--sf-space-xs) var(--sf-space-md);
    --input-font: var(--sf-text-sm);
    --btn-size: 40px;
    --icon-size: var(--sf-space-md);
  }

  .search-form-container[data-size='md'] {
    --input-height: 48px;
    --input-padding: var(--sf-space-sm) var(--sf-space-lg);
    --input-font: var(--sf-text-base);
    --btn-size: 44px;
    --icon-size: var(--sf-space-lg);
  }

  .search-form-container[data-size='lg'] {
    --input-height: 44px;
    --input-padding: var(--sf-space-sm) var(--sf-space-lg);
    --input-font: var(--sf-text-base);
    --btn-size: 44px;
    --icon-size: var(--sf-space-lg);
  }

  /* 最適化: レスポンシブデザイン */
  @media (max-width: 768px) {
    .search-input-wrapper {
      flex-direction: column;
      gap: var(--sf-space-sm);
    }

    /* lgサイズでのモバイルGap調整 */
    .search-form-container[data-size='lg'] .search-input-wrapper {
      gap: var(--sf-space-md);
    }

    .search-form-container .search-input {
      width: 100%;
      min-height: var(--sf-space-2xl);
      padding: var(--sf-space-lg) var(--sf-space-xl);
      border-radius: var(--sf-radius-lg);
      font-size: var(--sf-text-lg);
    }

    .search-submit-btn {
      width: 100%;
      height: var(--sf-space-2xl);
      border-radius: var(--sf-radius-lg);
    }
  }

  @media (min-width: 768px) {
    .search-input-wrapper {
      flex-direction: row;
    }
  }

  @media (prefers-contrast: high) {
    .search-form-container .search-input {
      border: 2px solid var(--clr-text-primary);
      background: var(--clr-background);
    }

    .search-form-container .search-input:focus {
      border-color: var(--clr-accent);
      box-shadow: 0 0 0 4px oklch(from var(--clr-accent) l c h / 0.2);
    }

    .search-submit-btn {
      border: 2px solid var(--clr-accent);
    }
  }
</style>
