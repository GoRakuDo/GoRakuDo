---
export interface Props {
  categories: Array<{
    category: string;
    count: number;
    subCategories: Array<{
      name: string;
      displayName: string;
      count: number;
    }>;
  }>;
}

const { categories } = Astro.props;
---

<div class="category-tree">
  {categories.map(({ category, count, subCategories }) => {
    const slug = category.toLowerCase().replace(/ /g, '-');
    
    return (
      <div class="category-item mb-6">
        <!-- 親カテゴリ -->
        <div class="parent-category mb-3 p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg border border-blue-200 dark:from-blue-900/20 dark:to-purple-900/20 dark:border-blue-700">
          <div class="flex items-center justify-between">
            <div class="flex items-center gap-3">
              <div class="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center">
                <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                </svg>
              </div>
              <a
                href={`/categories/${slug}`}
                class="text-xl font-semibold text-blue-600 hover:text-blue-800 transition-colors dark:text-blue-400 dark:hover:text-blue-300"
              >
                {category}
              </a>
            </div>
            <span class="text-sm text-gray-500 dark:text-gray-400 bg-white dark:bg-gray-800 px-2 py-1 rounded-full">
              {count} post{count !== 1 ? 's' : ''}
            </span>
          </div>
        </div>
        
        <!-- サブカテゴリ -->
        {subCategories.length > 0 && (
          <div class="sub-categories ml-4">
            <h3 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3 flex items-center gap-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
              Sub-categories:
            </h3>
            <div class="flex flex-wrap gap-2">
              {subCategories.map(sub => {
                const subSlug = sub.name.toLowerCase().replace(/ /g, '-');
                return (
                  <a
                    href={`/categories/${subSlug}`}
                    class="sub-category-item px-3 py-1 bg-gray-100 hover:bg-blue-100 text-gray-700 hover:text-blue-800 rounded-full text-sm transition-all duration-200 hover:scale-105 dark:bg-gray-700 dark:hover:bg-blue-900 dark:text-gray-300 dark:hover:text-blue-200"
                    title={`${sub.count} post${sub.count !== 1 ? 's' : ''} in ${sub.displayName}`}
                  >
                    {sub.displayName} ({sub.count})
                  </a>
                );
              })}
            </div>
          </div>
        )}
      </div>
    );
  })}
</div>

<style>
  .category-tree {
    max-width: 100%;
  }
  
  .category-item {
    padding-bottom: 1rem;
    border-bottom: 1px solid #e5e7eb;
    transition: all 0.2s ease;
  }
  
  .category-item:last-child {
    border-bottom: none;
  }
  
  .category-item:hover {
    transform: translateX(4px);
  }
  
  .parent-category {
    transition: all 0.2s ease;
  }
  
  .parent-category:hover {
    box-shadow: 0 4px 12px rgb(0 0 0 / 10%);
    transform: translateY(-1px);
  }
  
  .sub-category-item {
    text-decoration: none;
    border: 1px solid transparent;
    transition: all 0.2s ease;
  }
  
  .sub-category-item:hover {
    border-color: currentcolor;
    box-shadow: 0 2px 6px rgb(0 0 0 / 10%);
    transform: translateY(-1px) scale(1.05);
  }
  
  /* レスポンシブ調整 */
  @media (width <= 640px) {
    .category-item {
      margin-bottom: 1rem;
    }
    
    .parent-category {
      padding: 0.75rem;
    }
    
    .sub-categories {
      margin-left: 0.5rem;
    }
  }
</style>
