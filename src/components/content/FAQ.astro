---
// FAQ Component - Astro Implementation
// Based on reference design with Astro best practices

export interface FAQItem {
  question: string;
  answer: string;
  id?: string;
}

export interface Props {
  items: FAQItem[];
  title?: string;
  className?: string;
}

const { items, title = 'よくある質問', className = '' } = Astro.props;
---

<div class={`faq-container ${className}`}>
  {title && <h2 class='faq-title'>{title}</h2>}

  <div class='faq-list'>
    {
      items.map((item, index) => {
        const itemId = item.id || `faq-${index}`;
        const buttonId = `${itemId}-button`;
        const contentId = `${itemId}-content`;

        return (
          <div class='faq-item' data-faq-item>
            <button
              class='faq-button'
              type='button'
              id={buttonId}
              aria-expanded='false'
              aria-controls={contentId}
              data-faq-button
            >
              <h3 class='faq-question'>{item.question}</h3>
              <svg
                class='faq-icon'
                width='52'
                height='52'
                viewBox='0 0 52 52'
                xmlns='http://www.w3.org/2000/svg'
                aria-hidden='true'
              >
                <path
                  d='M16 26H36'
                  stroke-width='2'
                  stroke-linecap='round'
                  class='faq-icon-horizontal'
                />
                <path
                  d='M26 16V36'
                  stroke-width='2'
                  stroke-linecap='round'
                  class='faq-icon-vertical'
                />
              </svg>
            </button>

            <div
              class='faq-content-wrapper'
              id={contentId}
              aria-labelledby={buttonId}
              role='region'
              data-faq-content
            >
              <div class='faq-answer'>
                <div class='faq-answer-content' set:html={item.answer} />
              </div>
            </div>
          </div>
        );
      })
    }
  </div>
</div>

<style is:global>
  .faq-container {
    width: 100%;
    max-width: 680px;
    margin: 0 auto;
    font-family: var(--font-primary);
  }

  .faq-title {
    margin-bottom: 2rem;
    color: var(--clr-text-primary);
    font-size: clamp(1.5rem, 1rem + 2.5vw, 2.5rem);
    font-weight: 600;
    line-height: 1.2;
    text-align: center;
    letter-spacing: -0.02em;
  }

  .faq-list {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .faq-item {
    /* GlassMorphism background */
    position: relative;
    overflow: hidden;
    border: 1px solid var(--clr-white-15);
    border-radius: var(--radius-lg);
    background: linear-gradient(
      135deg,
      var(--clr-white-08) 0%,
      var(--clr-white-04) 50%,
      var(--clr-white-06) 100%
    );
    transition: all var(--transition-smooth);
    backdrop-filter: blur(3px) saturate(110%) brightness(105%);
    box-shadow:
      0 8px 32px var(--clr-black-1),
      0 4px 16px var(--clr-black-05),
      inset 0 1px 0 var(--clr-white-2),
      inset 0 -1px 0 var(--clr-white-1);
  }

  .faq-item::before {
    position: absolute;
    z-index: var(--z-FAQ-faq-item-before);
    background:
      radial-gradient(
        ellipse 200px 150px at 20% 30%,
        var(--clr-white-02) 0%,
        transparent 50%
      ),
      radial-gradient(
        ellipse 180px 120px at 80% 70%,
        oklch(100% 0 0deg / 0.015) 0%,
        transparent 45%
      );
    opacity: 0.8;
    pointer-events: none;
    inset: 0;
    content: '';
  }

  .faq-item:hover {
    background: linear-gradient(
      135deg,
      var(--clr-white-12) 0%,
      var(--clr-white-08) 50%,
      var(--clr-white-1) 100%
    );
    border-color: var(--clr-white-25);
    box-shadow:
      0 16px 48px var(--clr-black-15),
      0 8px 24px var(--clr-purple-1),
      inset 0 1px 0 var(--clr-white-3),
      inset 0 -1px 0 var(--clr-white-15);
    backdrop-filter: blur(6px) saturate(120%) brightness(102%);
    transform: translateY(-2px);
  }

  .faq-item:hover::before {
    opacity: 0.8;
  }

  .faq-button {
    position: relative;
    z-index: var(--z-FAQ-faq-button);
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    padding: 1.5rem 1.5rem 1rem;
    border: none;
    background: none;
    text-align: left;
    cursor: pointer;
    transition: all var(--transition-smooth);
  }

  .faq-button:hover {
    background-color: transparent;
  }

  .faq-button:focus-visible {
    outline: 2px solid var(--clr-purple);
    outline-offset: 2px;
  }

  .faq-question {
    flex: 1;
    margin: 0;
    padding-right: 1rem;
    color: var(--clr-text-primary);
    font-size: 1.125rem;
    font-weight: 500;
    line-height: 1.35;
    letter-spacing: -0.02em;
  }

  .faq-icon {
    flex-shrink: 0;
    stroke: var(--clr-text-primary);
    transition: transform var(--transition-smooth);
  }

  .faq-icon-horizontal,
  .faq-icon-vertical {
    transition:
      transform var(--transition-smooth),
      opacity var(--transition-smooth);
  }

  .faq-item[data-expanded='true'] .faq-icon {
    transform: rotate(45deg);
  }

  .faq-item[data-expanded='true'] .faq-icon-vertical {
    opacity: 0;
    transform: rotate(45deg);
  }

  .faq-content-wrapper {
    overflow: hidden;
    max-height: 0;
    opacity: 0;
    transition:
      max-height var(--transition-smooth),
      opacity var(--transition-smooth);
  }

  .faq-item[data-expanded='true'] .faq-content-wrapper {
    max-height: 1000px;
    opacity: 1;
  }

  .faq-answer {
    position: relative;
    z-index: var(--z-FAQ-faq-answer);
    padding: 0 1.5rem 1.5rem;
  }

  .faq-answer-content {
    color: var(--clr-text-secondary);
    font-size: 1rem;
    line-height: 1.5;
    letter-spacing: -0.01em;
  }

  .faq-answer-content p {
    margin: 0 0 1rem;
  }

  .faq-answer-content p:last-child {
    margin-bottom: 0;
  }

  .faq-answer-content ul,
  .faq-answer-content ol {
    margin: 1rem 0;
    padding-left: 1.5rem;
  }

  .faq-answer-content li {
    margin: 0.25rem 0;
  }

  .faq-answer-content a {
    color: var(--clr-purple);
    text-decoration: underline;
    text-decoration-color: oklch(from var(--token-text-muted) l c h / 0.85);
    text-decoration-thickness: 2px;
    text-underline-offset: 0.2em;
    transition: color var(--transition-fast);
  }

  .faq-answer-content a:hover {
    color: var(--clr-accent-dark);
  }

  .faq-answer-content strong {
    font-weight: 700;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .faq-container {
      max-width: 100%;
      padding: 0 1rem;
    }

    .faq-button {
      padding: 1rem;
    }

    .faq-question {
      padding-right: 0.75rem;
      font-size: 1rem;
    }

    .faq-icon {
      width: 40px;
      height: 40px;
    }

    .faq-answer {
      padding: 0 1rem 1rem;
    }

    /* Mobile GlassMorphism optimization */
    .faq-item {
      backdrop-filter: none;
      background: linear-gradient(
        135deg,
        var(--clr-white-12) 0%,
        var(--clr-white-08) 50%,
        var(--clr-white-10) 100%
      );
    }

    .faq-item:hover {
      backdrop-filter: none;
      background: linear-gradient(
        135deg,
        var(--clr-white-15) 0%,
        var(--clr-white-12) 50%,
        var(--clr-white-12) 100%
      );
    }
  }
</style>

<script>
  // FAQ Interactive Functionality
  // Using client:visible for performance optimization

  document.addEventListener('DOMContentLoaded', () => {
    const faqItems = document.querySelectorAll('[data-faq-item]');

    faqItems.forEach(item => {
      const button = item.querySelector(
        '[data-faq-button]'
      ) as HTMLButtonElement;
      const content = item.querySelector('[data-faq-content]') as HTMLElement;

      if (!button || !content) return;

      button.addEventListener('click', () => {
        const isExpanded = button.getAttribute('aria-expanded') === 'true';

        // Toggle state
        button.setAttribute('aria-expanded', (!isExpanded).toString());
        item.setAttribute('data-expanded', (!isExpanded).toString());

        // Close other items (accordion behavior)
        if (!isExpanded) {
          faqItems.forEach(otherItem => {
            if (otherItem !== item) {
              const otherButton = otherItem.querySelector(
                '[data-faq-button]'
              ) as HTMLButtonElement;
              const otherContent = otherItem.querySelector(
                '[data-faq-content]'
              ) as HTMLElement;

              if (otherButton && otherContent) {
                otherButton.setAttribute('aria-expanded', 'false');
                otherItem.setAttribute('data-expanded', 'false');
              }
            }
          });
        }
      });

      // Keyboard navigation
      button.addEventListener('keydown', e => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          button.click();
        }
      });
    });
  });
</script>
