---
// ========== SIMPLIFIED ARTICLE COMPONENT ==========
// Centralized data management - this component only handles display logic
// All data processing is done in the parent index.astro

interface Props {
  article: {
    slug: string;
    title: string;
    description: string;
    tags: string[];
    publishedDate: string;
    image: string | null;
    hasImage: boolean;
    originalArticle: any;
    index: number;
    isDirectToolArticle?: boolean;
    isRelatedToolArticle?: boolean;
    articleType?: 'direct' | 'related';
  };
  tool: string;
  index: number;
}

const { article, tool, index } = Astro.props;

// Constants for display
const IMAGE_DIMENSIONS = { width: 280, height: 160 };
const formatToolName = (tool: string): string =>
  tool.charAt(0).toUpperCase() + tool.slice(1);
---

<!-- ========== ENHANCED ARTICLE CARD MARKUP ========== -->
<article
  class='article-card-optimized glassmorphism glassmorphism-card'
  data-index={index}
  data-tool={tool}
  itemscope
  itemtype='https://schema.org/Article'
>
  <a
    href={`/tools/${tool}/${article.slug}`}
    class='card-link'
    aria-label={`Read article: ${article.title}`}
    itemprop='url'
  >
    <!-- カードヘッダー -->
    <header class='card-header'>
      <div class='card-header-top'>
        <time
          class='card-date'
          datetime={article.originalArticle.data.publishedDate ||
            new Date().toISOString()}
          itemprop='datePublished'
        >
          {article.publishedDate}
        </time>

        <!-- 記事タイプ表示 -->
        {
          article.articleType === 'related' && (
            <span
              class='article-type-badge related-article-badge'
              title='Artikel tool terkait'
            >
              <svg class='w-3 h-3' fill='currentColor' viewBox='0 0 20 20'>
                <path
                  fill-rule='evenodd'
                  d='M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z'
                  clip-rule='evenodd'
                />
              </svg>
              Artikel Terkait
            </span>
          )
        }
      </div>

      <!-- アクションインジケーター -->
      <div class='card-action-indicator' aria-hidden='true'>
        <svg
          class='arrow-icon'
          fill='none'
          stroke='currentColor'
          viewBox='0 0 24 24'
          aria-hidden='true'
        >
          <path
            stroke-linecap='round'
            stroke-linejoin='round'
            stroke-width='2'
            d='M17 8l4 4m0 0l-4 4m4-4H3'></path>
        </svg>
      </div>
    </header>

    <!-- メインコンテンツ -->
    <div class='card-content'>
      {
        article.hasImage && (
          <div class='card-image-section'>
            <img
              src={article.image}
              alt={`${article.title} - ${formatToolName(tool)} guide`}
              class='card-image'
              loading='lazy'
              decoding='async'
              width={IMAGE_DIMENSIONS.width}
              height={IMAGE_DIMENSIONS.height}
              itemprop='image'
            />
          </div>
        )
      }

      <div class='card-text-content'>
        <h3 class='card-title' itemprop='headline'>{article.title}</h3>
        <p class='card-description' itemprop='description'>
          {article.description}
        </p>
      </div>
    </div>

    <!-- フッター -->
    <footer class='card-footer'>
      <div class='card-tags' role='list' aria-label='Article tags'>
        {
          article.tags.map((tag: string) => (
            <span class='card-tag' role='listitem' itemprop='keywords'>
              #{tag}
            </span>
          ))
        }
      </div>
    </footer>
  </a>
</article>

<style>
  /* ========== ENHANCED ARTICLE CARD STYLES ========== */
  .article-card-optimized {
    position: relative;
    overflow: hidden;
    height: fit-content;
    margin: 0 clamp(var(--spacing-xs), 2vw, var(--spacing-md));
    padding: var(--spacing-sm);
    border-radius: var(--radius-xl);
    background: oklch(from var(--clr-background) l c h / 0.25);
    box-shadow: var(--shadow-md);
    transition:
      transform var(--transition-normal),
      box-shadow var(--transition-normal);
    contain: layout style paint;
    will-change: transform;
  }

  /* Reduce layout thrashing */
  .article-card-optimized .card-meta {
    contain: layout;
  }

  .article-card-optimized:hover {
    border-color: var(--clr-accent-glow-medium);
    box-shadow: var(--shadow-hover);
    transform: var(--hover-lift-enhanced);
    transition: all var(--transition-smooth);
  }

  .card-link {
    position: relative;
    z-index: 1;
    display: flex;
    flex-direction: column;
    height: 100%;
    color: inherit;
    text-decoration: none;
  }

  .card-link::before {
    position: absolute;
    inset: 0;
    z-index: -1;
    content: '';
  }

  /* ========== カードヘッダー ========== */
  .card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: var(--spacing-sm);
    padding: clamp(var(--spacing-sm), 2vw, var(--spacing-md))
      clamp(var(--spacing-md), 4vw, var(--spacing-lg)) var(--spacing-sm);
  }

  .card-date {
    color: var(--clr-text-muted);
    font-size: var(--font-size-sm);
    font-weight: 500;
  }

  /* ========== メインコンテンツ ========== */
  .card-content {
    flex: 1;
    padding: var(--spacing-sm) var(--spacing-md);
  }

  .card-image-section {
    margin-bottom: var(--spacing-md);
  }

  .card-image {
    width: 100%;
    height: clamp(100px, 15vh, 160px);
    border-radius: var(--radius-md);
    background: var(--clr-background);
    transition: transform var(--transition-normal);
    object-fit: cover;
    object-position: center;
    image-rendering: crisp-edges;
    will-change: transform;
  }

  .article-card-optimized:hover .card-image {
    transform: scale(1.02);
  }

  /* 画像読み込み最適化 */
  .card-image[loading='lazy'] {
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .card-image[loading='lazy'].loaded {
    opacity: 1;
  }

  /* ========== テキストコンテンツ ========== */
  .card-title {
    display: -webkit-box;
    overflow: hidden;
    margin: 0 0 var(--spacing-sm) 0;
    color: var(--clr-text-primary);
    font-size: clamp(var(--font-size-md), 2vw, var(--font-size-xl));
    font-weight: 600;
    line-height: 1.4;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
  }

  .card-description {
    display: -webkit-box;
    overflow: hidden;
    margin: 0;
    color: var(--clr-text-secondary);
    font-size: clamp(var(--font-size-xs), 1.5vw, var(--font-size-sm));
    line-height: 1.5;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
  }

  /* ========== カードフッター ========== */
  .card-footer {
    margin-top: auto;
    padding: var(--spacing-sm) var(--spacing-md) var(--spacing-md);
  }

  .card-tags {
    display: flex;
    flex-wrap: nowrap;
    justify-content: center;
    align-items: center;
    gap: var(--spacing-sm);
    overflow-x: auto;
    scrollbar-width: none;
    -ms-overflow-style: none;
    contain: layout;
  }

  .card-tags::-webkit-scrollbar {
    display: none;
  }

  .card-tag {
    flex-shrink: 0;
    padding: clamp(
        calc(var(--spacing-xs) / 4),
        0.75vw,
        calc(var(--spacing-sm) / 4)
      )
      clamp(calc(var(--spacing-sm) / 2), 1vw, calc(var(--spacing-md) / 2));
    border: 1px solid oklch(from var(--clr-primary) l c h / 0.2);
    border-radius: var(--radius-md);
    background: oklch(from var(--clr-primary) l c h / 0.15);
    color: var(--clr-primary);
    font-size: clamp(var(--font-size-xs), 0.75vw, var(--font-size-sm));
    font-weight: 300;
    white-space: nowrap;
    cursor: pointer;
    user-select: none;
    transition: all var(--transition-fast);
  }

  .card-tag:hover {
    background: oklch(from var(--clr-primary) l c h / 0.2);
    border-color: oklch(from var(--clr-primary) l c h / 0.4);
    box-shadow: 0 2px 8px oklch(from var(--clr-primary) l c h / 0.2);
  }

  /* ========== アクションインジケーター ========== */
  .card-action-indicator {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 2rem;
    height: 2rem;
    border-radius: 50%;
    background: oklch(from var(--clr-primary) l c h / 0.1);
    opacity: 1;
    transition: all var(--transition-normal);
    flex-shrink: 0;
  }

  .arrow-icon {
    width: 1rem;
    height: 1rem;
    color: var(--clr-primary);
  }

  /* デスクトップ表示ではホバー時にのみ表示 */
  @media (min-width: 768px) {
    .card-action-indicator {
      opacity: 0;
    }

    .article-card-optimized:hover .card-action-indicator {
      opacity: 1;
    }
  }

  /* ========== レスポンシブデザイン ========== */

  /* モバイル (320px+) - デフォルト */

  /* タブレット (768px+) */
  @media (min-width: 768px) {
    .article-card-optimized {
      height: fit-content;
      min-height: auto;
      padding: 0;
    }

    .card-content {
      padding: var(--spacing-sm)
        clamp(var(--spacing-md), 4vw, var(--spacing-lg));
    }

    .card-footer {
      padding: var(--spacing-sm)
        clamp(var(--spacing-md), 4vw, var(--spacing-lg)) var(--spacing-md);
    }
  }

  /* card-image styles moved to main selector above */

  /* card-tag styles moved to main selector above */

  /* ========== アクセシビリティ ========== */
  @media (prefers-contrast: high) {
    .card-title {
      color: var(--clr-text-primary);
    }

    .card-description {
      color: var(--clr-text-secondary);
    }

    .card-tag {
      background: oklch(from var(--clr-primary) l c h / 0.3);
      color: var(--clr-text-primary);
      font-weight: 700;
      border-width: 2px;
    }
  }

  @media (hover: none) and (pointer: coarse) {
    .card-action-indicator {
      opacity: 1;
    }
  }

  .article-card-optimized:focus-visible {
    outline: 2px solid var(--clr-primary);
    outline-offset: 2px;
  }

  /* キーボードナビゲーション対応 */
  .card-link:focus-visible {
    outline: 2px solid var(--clr-primary);
    outline-offset: 2px;
  }

  /* スクリーンリーダー対応 */
  .card-link[aria-label] {
    position: relative;
  }

  /* アニメーション軽減対応 */
  @media (prefers-reduced-motion: reduce) {
    .article-card-optimized,
    .card-image,
    .card-action-indicator {
      transition: none;
    }

    .article-card-optimized:hover {
      transform: none;
    }
  }
</style>

<!-- ========== CLIENT-SIDE OPTIMIZATION ========== -->
<script>
  // 画像読み込み最適化
  function optimizeImageLoading() {
    const images = document.querySelectorAll('.card-image[loading="lazy"]');

    if ('IntersectionObserver' in window) {
      const imageObserver = new IntersectionObserver(
        entries => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              const img = entry.target as HTMLImageElement;
              img.addEventListener('load', () => {
                img.classList.add('loaded');
              });
              imageObserver.unobserve(img);
            }
          });
        },
        {
          rootMargin: '50px 0px',
          threshold: 0.1,
        }
      );

      images.forEach(img => imageObserver.observe(img));
    } else {
      // フォールバック: 即座に読み込み
      images.forEach(img => {
        img.addEventListener('load', () => {
          img.classList.add('loaded');
        });
      });
    }
  }

  // DOM読み込み完了後に実行
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', optimizeImageLoading);
  } else {
    optimizeImageLoading();
  }
</script>
