---
// ========== OPTIMIZED SEARCH POPOVER COMPONENT ==========
// Architect Optimization: Astro-native, performance-first approach
// Purpose: Minimalist search interface using Popover API with optimal performance
// File: src/components/tools/SearchPopover.astro

// ========== TYPE-SAFE PROPS INTERFACE ==========
export interface Props {
  placeholder?: string;
  searchAction?: string;
  className?: string;
  ariaLabel?: string;
  tooltip?: string;
  toolFilter?: string; // ツール固有の検索フィルター
  buttonStyle?: 'circular' | 'rounded'; // ボタンスタイルの切り替え
}

// ========== PROPS DESTRUCTURING WITH VALIDATION ==========
const {
  placeholder = 'Search...',
  searchAction = '/search',
  className = '',
  ariaLabel = 'Open search interface',
  tooltip = 'Search',
  toolFilter = '', // ツール固有フィルター（デフォルトは空文字列）
  buttonStyle = 'circular', // デフォルトは丸いボタン
} = Astro.props;

// ========== VALIDATION AND SANITIZATION ==========
const sanitizedSearchAction = searchAction.startsWith('/')
  ? searchAction
  : '/search';
const sanitizedPlaceholder = placeholder.trim() || 'Search...';
---

<!-- ========== OPTIMIZED SEARCH COMPONENT ========== -->
<div class={`search-popover-container ${className}`}>
  <!-- ========== SEARCH TOGGLE BUTTON ========== -->
  {
    buttonStyle === 'circular' ? (
      <button
        class='search-toggle-btn search-toggle-btn--circular'
        popovertarget='search-popover'
        popovertargetaction='toggle'
        aria-label={ariaLabel}
        title={tooltip}
        type='button'
        aria-expanded='false'
        aria-controls='search-popover'
      >
        <svg
          class='search-icon'
          fill='none'
          stroke='currentColor'
          viewBox='0 0 24 24'
          aria-hidden='true'
          focusable='false'
        >
          <path
            stroke-linecap='round'
            stroke-linejoin='round'
            stroke-width='2'
            d='M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z'
          />
        </svg>
        <span class='sr-only'>{ariaLabel}</span>
      </button>
    ) : (
      <button
        class='search-toggle-btn search-toggle-btn--rounded'
        popovertarget='search-popover'
        popovertargetaction='toggle'
        aria-label={ariaLabel}
        title={tooltip}
        type='button'
        aria-expanded='false'
        aria-controls='search-popover'
      >
        <svg
          class='search-icon'
          fill='none'
          stroke='currentColor'
          viewBox='0 0 24 24'
          aria-hidden='true'
          focusable='false'
        >
          <path
            stroke-linecap='round'
            stroke-linejoin='round'
            stroke-width='2'
            d='M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z'
          />
        </svg>
        <span class='search-text'>Search</span>
        <span class='sr-only'>{ariaLabel}</span>
      </button>
    )
  }

  <!-- ========== SEARCH POPOVER CONTENT ========== -->
  <div
    id='search-popover'
    class='search-popover glassmorphism glassmorphism-card'
    popover='auto'
    role='search'
    aria-label='Search interface'
    aria-modal='true'
  >
    <!-- ========== SEARCH FORM ========== -->
    <form
      class='search-form'
      action={sanitizedSearchAction}
      method='get'
      novalidate
    >
      <div class='search-input-wrapper'>
        <label for='search-query' class='sr-only'>Search query</label>
        <input
          id='search-query'
          type='search'
          name='q'
          class='search-input'
          placeholder={sanitizedPlaceholder}
          autocomplete='off'
          aria-label='Search query'
          aria-describedby='search-help'
          required
          minlength='1'
          maxlength='100'
        />
        <button
          type='submit'
          class='search-submit-btn'
          aria-label='Submit search query'
          title='Submit search'
        >
          <svg
            fill='none'
            stroke='currentColor'
            viewBox='0 0 24 24'
            aria-hidden='true'
            focusable='false'
          >
            <path
              stroke-linecap='round'
              stroke-linejoin='round'
              stroke-width='2'
              d='M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z'></path>
          </svg>
          <span class='sr-only'>Submit search</span>
        </button>
      </div>
      <div id='search-help' class='sr-only'>
        Enter your search terms and press Enter or click the search button
      </div>
    </form>

    <!-- ========== SEARCH RESULTS ========== -->
    <div
      id='search-results'
      class='search-results'
      aria-live='polite'
      aria-label='Search results'
    >
      <div class='search-results-header'>
        <h3 class='search-results-title'>Search Results</h3>
        <button
          id='clear-search'
          class='clear-search-btn'
          aria-label='Clear search results'
        >
          <svg
            fill='none'
            stroke='currentColor'
            viewBox='0 0 24 24'
            aria-hidden='true'
          >
            <path
              stroke-linecap='round'
              stroke-linejoin='round'
              stroke-width='2'
              d='M6 18L18 6M6 6l12 12'></path>
          </svg>
        </button>
      </div>
      <div id='search-results-list' class='search-results-list'>
        <!-- Search results will be populated here -->
      </div>
      <div id='search-loading' class='search-loading' style='display: none;'>
        <div class='loading-spinner'></div>
        <span>Searching...</span>
      </div>
      <div
        id='search-no-results'
        class='search-no-results'
        style='display: none;'
      >
        <div class='no-results-icon'>
          <svg
            fill='none'
            stroke='currentColor'
            viewBox='0 0 24 24'
            aria-hidden='true'
          >
            <path
              stroke-linecap='round'
              stroke-linejoin='round'
              stroke-width='2'
              d='M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z'></path>
          </svg>
        </div>
        <h4>No results found</h4>
        <p>Try different keywords or check your spelling</p>
      </div>
    </div>
  </div>
</div>

<style>
  /* ========== OPTIMIZED CSS WITH CLAMP() AND CSS VARIABLES ========== */

  /* Screen Reader Only */
  .sr-only {
    position: absolute;
    overflow: hidden;
    width: 1px;
    height: 1px;
    margin: -1px;
    padding: 0;
    border: 0;
    white-space: nowrap;
    clip-path: inset(100%);
  }

  /* Search Popover Container */
  .search-popover-container {
    position: relative;
    display: inline-block;
  }

  /* Search Toggle Button - Base Styles */
  .search-toggle-btn {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    overflow: hidden;
    border: 1px solid rgb(255 255 255 / 0.25);
    background: linear-gradient(
      135deg,
      rgb(255 255 255 / 0.12) 0%,
      rgb(255 255 255 / 0.08) 50%,
      rgb(255 255 255 / 0.1) 100%
    );
    color: rgb(255 255 255 / 0.95);
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow:
      0 4px 16px rgb(0 0 0 / 0.1),
      0 2px 8px rgb(0 0 0 / 0.05),
      inset 0 1px 0 rgb(255 255 255 / 0.2);
    backdrop-filter: blur(15px) saturate(180%);
  }

  /* Circular Button Style */
  .search-toggle-btn--circular {
    width: clamp(2.5rem, 4.5vw, 3rem);
    height: clamp(2.5rem, 4.5vw, 3rem);
    border-radius: 50%;
  }

  /* Rounded Button Style */
  .search-toggle-btn--rounded {
    gap: clamp(0.5rem, 1vw, 0.75rem);
    width: auto;
    height: clamp(2.5rem, 4.5vw, 3rem);
    padding: 0 clamp(1rem, 2vw, 1.25rem);
    border-radius: clamp(1rem, 2.5vw, 1.5rem);
  }

  .search-toggle-btn::before {
    position: absolute;
    inset: 0;
    content: '';
    background: linear-gradient(
      135deg,
      rgb(139 93 255 / 0.1) 0%,
      rgb(59 130 246 / 0.1) 50%,
      rgb(16 185 129 / 0.1) 100%
    );
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .search-toggle-btn--circular::before {
    border-radius: 50%;
  }

  .search-toggle-btn--rounded::before {
    border-radius: inherit;
  }

  .search-toggle-btn:hover {
    background: linear-gradient(
      135deg,
      rgb(255 255 255 / 0.18) 0%,
      rgb(255 255 255 / 0.12) 50%,
      rgb(255 255 255 / 0.15) 100%
    );
    border-color: rgb(255 255 255 / 0.4);
    box-shadow:
      0 8px 24px rgb(0 0 0 / 0.15),
      0 4px 12px rgb(0 0 0 / 0.1),
      inset 0 1px 0 rgb(255 255 255 / 0.3);
    transform: translateY(-2px) scale(1.05);
  }

  .search-toggle-btn:hover::before {
    opacity: 1;
  }

  .search-toggle-btn:active {
    transform: translateY(-1px) scale(1.02);
    transition: all 0.1s ease;
  }

  .search-toggle-btn:focus-visible {
    outline: 2px solid var(--clr-accent, #8b5dff);
    outline-offset: 3px;
    box-shadow:
      0 0 0 4px rgb(139 93 255 / 0.2),
      0 4px 16px rgb(0 0 0 / 0.1);
  }

  .search-toggle-btn[aria-expanded='true'] {
    background: linear-gradient(
      135deg,
      rgb(139 93 255 / 0.25) 0%,
      rgb(139 93 255 / 0.15) 50%,
      rgb(139 93 255 / 0.2) 100%
    );
    border-color: var(--clr-accent, #8b5dff);
    box-shadow:
      0 6px 20px rgb(139 93 255 / 0.3),
      0 2px 8px rgb(139 93 255 / 0.2),
      inset 0 1px 0 rgb(255 255 255 / 0.3);
  }

  .search-icon {
    flex-shrink: 0;
    width: clamp(1rem, 2vw, 1.25rem);
    height: clamp(1rem, 2vw, 1.25rem);
  }

  .search-text {
    color: inherit;
    font-size: clamp(0.875rem, 1.8vw, 1rem);
    font-weight: 500;
    white-space: nowrap;
  }

  /* Search Popover - GlassMorphism Design */
  .search-popover {
    /* Centered positioning with smooth animation */

    /* Enhanced visual effects */
    position: relative;
    top: 25vh;
    left: 50%;
    z-index: 1000;
    overflow: hidden;
    min-width: clamp(320px, 55vw, 450px);
    max-width: 90vw;
    padding: clamp(1rem, 2.5vw, 1.5rem);
    opacity: 0;
    transform: translateX(-50%) translateY(-10px);
    animation: popoverSlideIn 0.3s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }

  /* Popover entrance animation */
  @keyframes popoverSlideIn {
    from {
      opacity: 0;
      transform: translateX(-50%) translateY(-20px) scale(0.95);
    }

    to {
      opacity: 1;
      transform: translateX(-50%) translateY(-10px) scale(1);
    }
  }

  .search-popover::backdrop {
    background: rgb(0 0 0 / 0.5);
    backdrop-filter: blur(8px);
    animation: backdropFadeIn 0.3s ease;
  }

  @keyframes backdropFadeIn {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }

  /* Search Form */
  .search-form {
    display: flex;
    flex-direction: column;
    gap: 0;
  }

  .search-input-wrapper {
    display: flex;
    align-items: center;
    gap: clamp(0.375rem, 1vw, 0.5rem);
  }

  .search-input {
    position: relative;
    flex: 1;
    padding: clamp(0.75rem, 2vw, 1rem) clamp(1rem, 2.5vw, 1.25rem);
    border: 1px solid rgb(255 255 255 / 0.2);
    border-radius: clamp(1rem, 2.5vw, 1.5rem);
    background: linear-gradient(
      135deg,
      rgb(255 255 255 / 0.08) 0%,
      rgb(255 255 255 / 0.12) 50%,
      rgb(255 255 255 / 0.08) 100%
    );
    color: #fff;
    font-size: clamp(0.875rem, 2vw, 1rem);
    font-weight: 400;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow:
      inset 0 1px 0 rgb(255 255 255 / 0.1),
      0 1px 3px rgb(0 0 0 / 0.1);
    backdrop-filter: blur(10px);
  }

  .search-input::placeholder {
    color: rgb(255 255 255 / 0.6);
    font-weight: 300;
    transition: color 0.3s ease;
  }

  .search-input:focus {
    outline: none;
    background: linear-gradient(
      135deg,
      rgb(255 255 255 / 0.12) 0%,
      rgb(255 255 255 / 0.18) 50%,
      rgb(255 255 255 / 0.12) 100%
    );
    border-color: var(--clr-accent, #8b5dff);
    box-shadow:
      0 0 0 3px rgb(139 93 255 / 0.15),
      0 4px 12px rgb(139 93 255 / 0.1),
      inset 0 1px 0 rgb(255 255 255 / 0.2);
    transform: translateY(-1px);
  }

  .search-input:focus::placeholder {
    color: rgb(255 255 255 / 0.4);
  }

  .search-submit-btn {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    overflow: hidden;
    width: clamp(2.5rem, 4.5vw, 3rem);
    height: clamp(2.5rem, 4.5vw, 3rem);
    border: none;
    border-radius: clamp(1rem, 2.5vw, 1.5rem);
    background: linear-gradient(
      135deg,
      var(--clr-accent, #8b5dff) 0%,
      #7c3aed 50%,
      #6d28d9 100%
    );
    color: #fff;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    flex-shrink: 0;
    box-shadow:
      0 4px 12px rgb(139 93 255 / 0.3),
      0 2px 6px rgb(139 93 255 / 0.2),
      inset 0 1px 0 rgb(255 255 255 / 0.2);
  }

  .search-submit-btn::before {
    position: absolute;
    border-radius: inherit;
    background: linear-gradient(
      135deg,
      rgb(255 255 255 / 0.2) 0%,
      rgb(255 255 255 / 0.1) 50%,
      rgb(255 255 255 / 0.2) 100%
    );
    opacity: 0;
    transition: opacity 0.3s ease;
    inset: 0;
    content: '';
  }

  .search-submit-btn:hover {
    background: linear-gradient(135deg, #7c3aed 0%, #6d28d9 50%, #5b21b6 100%);
    box-shadow:
      0 8px 20px rgb(139 93 255 / 0.4),
      0 4px 10px rgb(139 93 255 / 0.3),
      inset 0 1px 0 rgb(255 255 255 / 0.3);
    transform: translateY(-2px) scale(1.05);
  }

  .search-submit-btn:hover::before {
    opacity: 1;
  }

  .search-submit-btn:active {
    transform: translateY(-1px) scale(1.02);
    transition: all 0.1s ease;
  }

  .search-submit-btn:focus-visible {
    outline: 2px solid #fff;
    outline-offset: 3px;
    box-shadow:
      0 0 0 4px rgb(255 255 255 / 0.2),
      0 4px 12px rgb(139 93 255 / 0.3);
  }

  .search-submit-btn svg {
    width: clamp(1rem, 2vw, 1.25rem);
    height: clamp(1rem, 2vw, 1.25rem);
  }

  /* ========== RESPONSIVE DESIGN - MIN-WIDTH APPROACH ========== */

  /* Mobile First - Base styles (320px+) */
  @media (min-width: 320px) {
    .search-popover {
      top: 15vh;
      min-width: clamp(280px, 96vw, 320px);
      max-width: 95vw;
      padding: clamp(1rem, 2.5vw, 1.25rem);
    }

    .search-input-wrapper {
      flex-direction: column;
      gap: clamp(0.75rem, 2vw, 1rem);
    }

    .search-input {
      width: 100%;
      min-height: clamp(3.25rem, 7.5vw, 3.75rem);
      padding: clamp(1rem, 3.5vw, 1.25rem) clamp(1.25rem, 4vw, 1.5rem);
      border-radius: clamp(1.25rem, 3vw, 1.75rem);
      font-size: clamp(1rem, 2.8vw, 1.125rem);
      line-height: 1.4;
    }

    .search-submit-btn {
      width: 100%;
      height: clamp(3.25rem, 7.5vw, 3.75rem);
      border-radius: clamp(1.25rem, 3vw, 1.75rem);
      font-size: clamp(1rem, 2.8vw, 1.125rem);
      font-weight: 500;
    }

    .search-submit-btn svg {
      width: clamp(1.25rem, 3vw, 1.5rem);
      height: clamp(1.25rem, 3vw, 1.5rem);
    }

    .search-toggle-btn--circular {
      width: clamp(3rem, 6.5vw, 3.5rem);
      height: clamp(3rem, 6.5vw, 3.5rem);
    }

    .search-toggle-btn--rounded {
      gap: clamp(0.75rem, 2vw, 1rem);
      height: clamp(3rem, 6.5vw, 3.5rem);
      padding: 0 clamp(1.25rem, 3vw, 1.5rem);
    }

    .search-icon {
      width: clamp(1.25rem, 3vw, 1.5rem);
      height: clamp(1.25rem, 3vw, 1.5rem);
    }
  }

  /* Tablet and Desktop - 768px+ */
  @media (min-width: 768px) {
    .search-popover {
      top: 25vh;
      min-width: clamp(400px, 50vw, 500px);
      max-width: 90vw;
      padding: clamp(0.75rem, 1.25vw, 1rem);
    }

    .search-input-wrapper {
      flex-direction: row;
      gap: clamp(0.75rem, 1.5vw, 1rem);
    }

    .search-input {
      flex: 1;
      min-height: clamp(2.5rem, 4vw, 3rem);
      padding: clamp(0.875rem, 1.5vw, 1rem) clamp(1rem, 2vw, 1.25rem);
      border-radius: clamp(1rem, 2vw, 1.25rem);
      font-size: clamp(1rem, 1.5vw, 1.125rem);
      line-height: 1.5;
    }

    .search-submit-btn {
      width: clamp(2.5rem, 4vw, 3rem);
      height: clamp(2.5rem, 4vw, 3rem);
      border-radius: clamp(1rem, 2vw, 1.25rem);
      font-size: clamp(1rem, 1.5vw, 1.125rem);
    }

    .search-submit-btn svg {
      width: clamp(1rem, 2vw, 1.25rem);
      height: clamp(1rem, 2vw, 1.25rem);
    }

    .search-toggle-btn--circular {
      width: clamp(2.5rem, 4vw, 3rem);
      height: clamp(2.5rem, 4vw, 3rem);
    }

    .search-toggle-btn--rounded {
      gap: clamp(0.5rem, 1vw, 0.75rem);
      height: clamp(2.5rem, 4vw, 3rem);
      padding: 0 clamp(1rem, 2vw, 1.25rem);
    }

    .search-icon {
      width: clamp(1rem, 2vw, 1.25rem);
      height: clamp(1rem, 2vw, 1.25rem);
    }
  }

  /* Large Desktop - 1280px+ */
  @media (min-width: 1280px) {
    .search-popover {
      top: 25vh;
      min-width: clamp(360px, 32vw, 480px);
      max-width: 64vw;
      padding: clamp(0.8rem, 0.8vw, 1rem);
    }

    .search-input-wrapper {
      gap: clamp(0.8rem, 1.2vw, 1rem);
    }

    .search-input {
      min-height: clamp(2.4rem, 2.8vw, 2.8rem);
      padding: clamp(0.8rem, 1.2vw, 1rem) clamp(1rem, 1.6vw, 1.2rem);
      border-radius: clamp(1rem, 1.2vw, 1.25rem);
      font-size: clamp(0.9rem, 0.96vw, 1rem);
    }

    .search-submit-btn {
      width: clamp(2.4rem, 2.8vw, 2.8rem);
      height: clamp(2.4rem, 2.8vw, 2.8rem);
      border-radius: clamp(1rem, 1.2vw, 1.25rem);
      font-size: clamp(0.9rem, 0.96vw, 1rem);
    }

    .search-submit-btn svg {
      width: clamp(1rem, 1.2vw, 1.2rem);
      height: clamp(1rem, 1.2vw, 1.2rem);
    }

    .search-toggle-btn--circular {
      width: clamp(2.4rem, 2.8vw, 2.8rem);
      height: clamp(2.4rem, 2.8vw, 2.8rem);
    }

    .search-toggle-btn--rounded {
      gap: clamp(0.4rem, 0.8vw, 0.6rem);
      height: clamp(2.4rem, 2.8vw, 2.8rem);
      padding: 0 clamp(0.8rem, 1.2vw, 1rem);
    }

    .search-icon {
      width: clamp(1rem, 1.2vw, 1.2rem);
      height: clamp(1rem, 1.2vw, 1.2rem);
    }
  }

  /* High Contrast Mode */
  @media (prefers-contrast: high) {
    .search-toggle-btn {
      border: 2px solid #fff;
      background: rgb(0 0 0 / 0.8);
    }

    .search-popover {
      border: 2px solid #fff;
    }

    .search-input {
      border: 2px solid #fff;
      background: rgb(0 0 0 / 0.8);
    }
  }

  /* Reduced Motion */
  @media (prefers-reduced-motion: reduce) {
    .search-toggle-btn,
    .search-submit-btn,
    .search-input {
      transition: none;
    }

    .search-toggle-btn:hover,
    .search-submit-btn:hover {
      transform: none;
    }

    .search-popover {
      opacity: 1;
      animation: none;
    }

    .search-popover::backdrop {
      animation: none;
    }
  }

  /* Light Mode Support */
  @media (prefers-color-scheme: light) {
    .search-input {
      background: rgb(0 0 0 / 0.1);
      color: #000;
      border-color: rgb(0 0 0 / 0.2);
    }

    .search-input::placeholder {
      color: rgb(0 0 0 / 0.5);
    }
  }

  /* ========== SEARCH RESULTS STYLES ========== */

  .search-results {
    overflow-y: auto;
    max-height: clamp(300px, 50vh, 500px);
    margin-top: clamp(1rem, 2.5vw, 1.5rem);
    padding-top: clamp(1rem, 2.5vw, 1.5rem);
    border-top: 1px solid rgb(255 255 255 / 0.1);
  }

  .search-results-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: clamp(0.75rem, 2vw, 1rem);
  }

  .search-results-title {
    margin: 0;
    color: rgb(255 255 255 / 0.9);
    font-size: clamp(0.875rem, 2vw, 1rem);
    font-weight: 600;
  }

  .clear-search-btn {
    display: flex;
    justify-content: center;
    align-items: center;
    width: clamp(1.5rem, 3vw, 2rem);
    height: clamp(1.5rem, 3vw, 2rem);
    border: 1px solid rgb(255 255 255 / 0.2);
    border-radius: 50%;
    background: rgb(255 255 255 / 0.1);
    color: rgb(255 255 255 / 0.7);
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .clear-search-btn:hover {
    background: rgb(255 255 255 / 0.15);
    color: rgb(255 255 255 / 0.9);
    border-color: rgb(255 255 255 / 0.3);
  }

  .clear-search-btn svg {
    width: clamp(0.75rem, 1.5vw, 1rem);
    height: clamp(0.75rem, 1.5vw, 1rem);
  }

  .search-results-list {
    display: flex;
    flex-direction: column;
    gap: clamp(0.5rem, 1.5vw, 0.75rem);
  }

  .search-result-item {
    display: flex;
    flex-direction: column;
    padding: clamp(0.75rem, 2vw, 1rem);
    border: 1px solid rgb(255 255 255 / 0.1);
    border-radius: clamp(0.5rem, 1.5vw, 0.75rem);
    background: linear-gradient(
      135deg,
      rgb(255 255 255 / 0.05) 0%,
      rgb(255 255 255 / 0.08) 50%,
      rgb(255 255 255 / 0.05) 100%
    );
    color: inherit;
    text-decoration: none;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .search-result-item:hover {
    background: linear-gradient(
      135deg,
      rgb(255 255 255 / 0.08) 0%,
      rgb(255 255 255 / 0.12) 50%,
      rgb(255 255 255 / 0.08) 100%
    );
    border-color: rgb(255 255 255 / 0.2);
    transform: translateY(-1px);
  }

  .search-result-item:focus {
    outline: 2px solid var(--clr-accent, #8b5dff);
    outline-offset: 2px;
  }

  .search-result-title {
    margin: 0 0 clamp(0.25rem, 0.8vw, 0.5rem);
    color: rgb(255 255 255 / 0.95);
    font-size: clamp(0.875rem, 2vw, 1rem);
    font-weight: 600;
    line-height: 1.4;
  }

  .search-result-description {
    display: -webkit-box;
    overflow: hidden;
    margin: 0 0 clamp(0.5rem, 1.2vw, 0.75rem);
    color: rgb(255 255 255 / 0.7);
    font-size: clamp(0.75rem, 1.8vw, 0.875rem);
    line-height: 1.5;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
  }

  .search-result-meta {
    display: flex;
    align-items: center;
    gap: clamp(0.5rem, 1.2vw, 0.75rem);
    color: rgb(255 255 255 / 0.5);
    font-size: clamp(0.625rem, 1.5vw, 0.75rem);
  }

  .search-result-type {
    padding: clamp(0.125rem, 0.4vw, 0.25rem) clamp(0.375rem, 1vw, 0.5rem);
    border-radius: clamp(0.25rem, 0.8vw, 0.375rem);
    background: rgb(139 93 255 / 0.2);
    color: var(--clr-accent, #8b5dff);
    font-weight: 500;
    text-transform: capitalize;
  }

  .search-result-tool {
    padding: clamp(0.125rem, 0.4vw, 0.25rem) clamp(0.375rem, 1vw, 0.5rem);
    border-radius: clamp(0.25rem, 0.8vw, 0.375rem);
    background: rgb(16 185 129 / 0.2);
    color: #10b981;
    font-weight: 500;
    text-transform: capitalize;
  }

  .search-loading {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: clamp(2rem, 5vw, 3rem);
    color: rgb(255 255 255 / 0.7);
  }

  .loading-spinner {
    width: clamp(2rem, 4vw, 2.5rem);
    height: clamp(2rem, 4vw, 2.5rem);
    margin-bottom: clamp(0.75rem, 2vw, 1rem);
    border: 2px solid rgb(255 255 255 / 0.2);
    border-top: 2px solid var(--clr-accent, #8b5dff);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }

    100% {
      transform: rotate(360deg);
    }
  }

  .search-no-results {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: clamp(2rem, 5vw, 3rem);
    color: rgb(255 255 255 / 0.7);
    text-align: center;
  }

  .no-results-icon {
    width: clamp(3rem, 6vw, 4rem);
    height: clamp(3rem, 6vw, 4rem);
    margin-bottom: clamp(1rem, 2.5vw, 1.5rem);
    opacity: 0.5;
  }

  .no-results-icon svg {
    width: 100%;
    height: 100%;
  }

  .search-no-results h4 {
    margin: 0 0 clamp(0.5rem, 1.2vw, 0.75rem);
    color: rgb(255 255 255 / 0.8);
    font-size: clamp(1rem, 2.5vw, 1.25rem);
    font-weight: 600;
  }

  .search-no-results p {
    margin: 0;
    color: rgb(255 255 255 / 0.6);
    font-size: clamp(0.875rem, 2vw, 1rem);
  }

  /* ========== RESPONSIVE SEARCH RESULTS ========== */

  @media (min-width: 320px) {
    .search-results {
      max-height: clamp(250px, 40vh, 400px);
    }
  }

  @media (min-width: 768px) {
    .search-results {
      max-height: clamp(300px, 50vh, 500px);
    }
  }

  @media (min-width: 1280px) {
    .search-results {
      max-height: clamp(350px, 45vh, 600px);
    }
  }
</style>

<script>
  // ========== ENHANCED SEARCH FUNCTIONALITY ==========
  // Architect Optimization: Performance-first, Astro-native approach with client-side search
  // Purpose: Comprehensive search functionality with real-time results and optimal performance

  (() => {
    'use strict';

    // ========== ELEMENT SELECTION WITH NULL CHECKS ==========
    const searchPopover = document.getElementById('search-popover');
    const searchInput = document.querySelector(
      '.search-input'
    ) as HTMLInputElement;
    const searchForm = document.querySelector(
      '.search-form'
    ) as HTMLFormElement;
    const toggleButton = document.querySelector(
      '.search-toggle-btn'
    ) as HTMLButtonElement;
    const searchResults = document.getElementById('search-results');
    const searchResultsList = document.getElementById('search-results-list');
    const searchLoading = document.getElementById('search-loading');
    const searchNoResults = document.getElementById('search-no-results');
    const clearSearchBtn = document.getElementById('clear-search');

    // Early return if essential elements not found
    if (
      !searchPopover ||
      !searchInput ||
      !searchForm ||
      !toggleButton ||
      !searchResults
    ) {
      console.warn('SearchPopover: Essential elements not found');
      return;
    }

    // ========== SEARCH STATE MANAGEMENT ==========
    let isPopoverOpen = false;
    let focusTimeout: number | null = null;
    let searchTimeout: number | null = null;
    let searchData: any[] = [];
    let isSearchDataLoaded = false;

    // ツールフィルター（Astro propsから取得）
    const toolFilter = '${toolFilter}';

    // ========== SEARCH DATA LOADING ==========
    const loadSearchData = async (): Promise<void> => {
      if (isSearchDataLoaded) return;

      try {
        // ツールフィルターがある場合はtools/ToolsSearch.json、ない場合はdocs/DocsSearch.jsonを使用
        const searchUrl = toolFilter
          ? `/tools/ToolsSearch.json?tool=${encodeURIComponent(toolFilter)}`
          : '/docs/DocsSearch.json';

        const response = await fetch(searchUrl);
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        searchData = data.data || [];
        isSearchDataLoaded = true;

        console.log(
          `SearchPopover: Loaded ${searchData.length} search items from ${toolFilter ? 'tools/ToolsSearch.json' : 'docs/DocsSearch.json'}${toolFilter ? ` for tool: ${toolFilter}` : ''}`
        );
      } catch (error) {
        console.error('SearchPopover: Failed to load search data:', error);
        searchData = [];
      }
    };

    // ========== SEARCH FUNCTIONALITY ==========
    const performSearch = (query: string): any[] => {
      if (!query.trim() || !isSearchDataLoaded) return [];

      const searchTerm = query.toLowerCase().trim();
      const results = searchData.filter(item => {
        const searchableText = [
          item.title,
          item.description,
          item.content,
          ...(item.tags || []),
          ...(item.categories || []),
          item.toolName || '',
        ]
          .join(' ')
          .toLowerCase();

        return searchableText.includes(searchTerm);
      });

      // Sort by relevance (title matches first, then description, then content)
      return results.sort((a, b) => {
        const aTitle = a.title.toLowerCase();
        const bTitle = b.title.toLowerCase();
        const aDesc = a.description.toLowerCase();
        const bDesc = b.description.toLowerCase();

        // Title exact match
        if (aTitle.includes(searchTerm) && !bTitle.includes(searchTerm))
          return -1;
        if (!aTitle.includes(searchTerm) && bTitle.includes(searchTerm))
          return 1;

        // Description match
        if (aDesc.includes(searchTerm) && !bDesc.includes(searchTerm))
          return -1;
        if (!aDesc.includes(searchTerm) && bDesc.includes(searchTerm)) return 1;

        // Alphabetical by title
        return aTitle.localeCompare(bTitle);
      });
    };

    // ========== RENDER SEARCH RESULTS ==========
    const renderSearchResults = (results: any[]): void => {
      if (!searchResultsList) return;

      // Clear previous results
      searchResultsList.innerHTML = '';

      if (results.length === 0) {
        searchResultsList.style.display = 'none';
        if (searchNoResults) searchNoResults.style.display = 'flex';
        return;
      }

      searchResultsList.style.display = 'block';
      if (searchNoResults) searchNoResults.style.display = 'none';

      // Render results
      results.slice(0, 10).forEach(result => {
        const resultItem = document.createElement('a');
        resultItem.href = result.url;
        resultItem.className = 'search-result-item';
        resultItem.setAttribute('aria-label', `Go to ${result.title}`);

        const typeClass =
          result.type === 'tool-article'
            ? 'search-result-tool'
            : 'search-result-type';
        const typeText =
          result.type === 'tool-article' ? result.toolName : result.type;

        resultItem.innerHTML = `
          <div class="search-result-title">${result.title}</div>
          <div class="search-result-description">${result.description || ''}</div>
          <div class="search-result-meta">
            <span class="${typeClass}">${typeText}</span>
            ${result.pubDate ? `<span>${new Date(result.pubDate).toLocaleDateString()}</span>` : ''}
          </div>
        `;

        searchResultsList.appendChild(resultItem);
      });
    };

    // ========== SHOW/HIDE SEARCH STATES ==========
    const showLoading = (): void => {
      if (searchLoading) searchLoading.style.display = 'flex';
      if (searchResultsList) searchResultsList.style.display = 'none';
      if (searchNoResults) searchNoResults.style.display = 'none';
    };

    const hideLoading = (): void => {
      if (searchLoading) searchLoading.style.display = 'none';
    };

    const clearSearchResults = (): void => {
      if (searchResultsList) {
        searchResultsList.innerHTML = '';
        searchResultsList.style.display = 'none';
      }
      if (searchNoResults) searchNoResults.style.display = 'none';
      if (searchLoading) searchLoading.style.display = 'none';
    };

    // ========== SEARCH INPUT HANDLING ==========
    const handleSearchInput = async (event: Event): Promise<void> => {
      const input = event.target as HTMLInputElement;
      const query = input.value.trim();

      // Clear previous timeout
      if (searchTimeout) {
        clearTimeout(searchTimeout);
      }

      if (!query) {
        clearSearchResults();
        return;
      }

      // Show loading state
      showLoading();

      // Load search data if not already loaded
      await loadSearchData();

      // Debounce search
      searchTimeout = window.setTimeout(() => {
        const results = performSearch(query);
        hideLoading();
        renderSearchResults(results);
      }, 300);
    };

    // ========== POPOVER STATE MANAGEMENT ==========
    const updatePopoverState = (isOpen: boolean): void => {
      isPopoverOpen = isOpen;
      toggleButton.setAttribute('aria-expanded', isOpen.toString());

      if (isOpen) {
        // Load search data when popover opens
        loadSearchData();

        // Focus search input when popover opens (with delay for animation)
        focusTimeout = window.setTimeout(() => {
          searchInput.focus();
        }, 100);
      } else {
        // Clear search results when popover closes
        clearSearchResults();
        searchInput.value = '';

        // Clear focus timeout if popover closes
        if (focusTimeout) {
          clearTimeout(focusTimeout);
          focusTimeout = null;
        }
      }
    };

    // ========== EVENT HANDLERS ==========
    const handlePopoverToggle = (event: Event): void => {
      const customEvent = event as CustomEvent & { newState: string };
      const isOpen = customEvent.newState === 'open';
      updatePopoverState(isOpen);
    };

    const handleEscapeKey = (event: KeyboardEvent): void => {
      if (event.key === 'Escape' && isPopoverOpen) {
        event.preventDefault();
        (searchPopover as any).hidePopover();
      }
    };

    const handleFormSubmit = (event: Event): void => {
      const query = searchInput.value.trim();
      if (!query || query.length < 1) {
        event.preventDefault();
        searchInput.focus();
        return;
      }

      // For now, prevent default form submission and handle search client-side
      event.preventDefault();
      console.log('SearchPopover: Search query submitted:', query);
    };

    const handleClearSearch = (): void => {
      searchInput.value = '';
      clearSearchResults();
      searchInput.focus();
    };

    const handleInputValidation = (event: Event): void => {
      const input = event.target as HTMLInputElement;
      const isValid = input.value.trim().length >= 1;

      if (isValid) {
        input.setCustomValidity('');
      } else {
        input.setCustomValidity('Please enter at least 1 character');
      }
    };

    // ========== EVENT LISTENERS ==========
    // Popover events
    searchPopover.addEventListener('beforetoggle', handlePopoverToggle);

    // Keyboard events
    document.addEventListener('keydown', handleEscapeKey);

    // Form events
    searchForm.addEventListener('submit', handleFormSubmit);
    searchInput.addEventListener('input', handleSearchInput);
    searchInput.addEventListener('input', handleInputValidation);

    // Clear search button
    if (clearSearchBtn) {
      clearSearchBtn.addEventListener('click', handleClearSearch);
    }

    // ========== CLEANUP ==========
    const cleanup = (): void => {
      if (focusTimeout) clearTimeout(focusTimeout);
      if (searchTimeout) clearTimeout(searchTimeout);

      searchPopover.removeEventListener('beforetoggle', handlePopoverToggle);
      document.removeEventListener('keydown', handleEscapeKey);
      searchForm.removeEventListener('submit', handleFormSubmit);
      searchInput.removeEventListener('input', handleSearchInput);
      searchInput.removeEventListener('input', handleInputValidation);

      if (clearSearchBtn) {
        clearSearchBtn.removeEventListener('click', handleClearSearch);
      }
    };

    // Expose cleanup for potential use
    (window as any).searchPopoverCleanup = cleanup;
  })();
</script>
