---
// ========== OPTIMIZED SEARCH POPOVER COMPONENT ==========
// Architect Optimization: Astro-native, performance-first approach
// Purpose: Minimalist search interface using Popover API with optimal performance
// File: src/components/tools/SearchPopover.astro

// ========== TYPE-SAFE PROPS INTERFACE ==========
export interface Props {
  placeholder?: string;
  searchAction?: string;
  className?: string;
  ariaLabel?: string;
  tooltip?: string;
}

// ========== PROPS DESTRUCTURING WITH VALIDATION ==========
const {
  placeholder = 'Search...',
  searchAction = '/search',
  className = '',
  ariaLabel = 'Open search interface',
  tooltip = 'Search',
} = Astro.props;

// ========== VALIDATION AND SANITIZATION ==========
const sanitizedSearchAction = searchAction.startsWith('/')
  ? searchAction
  : '/search';
const sanitizedPlaceholder = placeholder.trim() || 'Search...';
---

<!-- ========== OPTIMIZED SEARCH COMPONENT ========== -->
<div class={`search-popover-container ${className}`}>
  <!-- ========== SEARCH TOGGLE BUTTON ========== -->
  <button
    class='search-toggle-btn'
    popovertarget='search-popover'
    popovertargetaction='toggle'
    aria-label={ariaLabel}
    title={tooltip}
    type='button'
    aria-expanded='false'
    aria-controls='search-popover'
  >
    <svg
      class='search-icon'
      fill='none'
      stroke='currentColor'
      viewBox='0 0 24 24'
      aria-hidden='true'
      focusable='false'
    >
      <path
        stroke-linecap='round'
        stroke-linejoin='round'
        stroke-width='2'
        d='M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z'></path>
    </svg>
    <span class='sr-only'>{ariaLabel}</span>
  </button>

  <!-- ========== SEARCH POPOVER CONTENT ========== -->
  <div
    id='search-popover'
    class='search-popover'
    popover='auto'
    role='search'
    aria-label='Search interface'
    aria-modal='true'
  >
    <form
      class='search-form'
      action={sanitizedSearchAction}
      method='get'
      novalidate
    >
      <div class='search-input-wrapper'>
        <label for='search-query' class='sr-only'>Search query</label>
        <input
          id='search-query'
          type='search'
          name='q'
          class='search-input'
          placeholder={sanitizedPlaceholder}
          autocomplete='off'
          aria-label='Search query'
          aria-describedby='search-help'
          required
          minlength='1'
          maxlength='100'
        />
        <button
          type='submit'
          class='search-submit-btn'
          aria-label='Submit search query'
          title='Submit search'
        >
          <svg
            fill='none'
            stroke='currentColor'
            viewBox='0 0 24 24'
            aria-hidden='true'
            focusable='false'
          >
            <path
              stroke-linecap='round'
              stroke-linejoin='round'
              stroke-width='2'
              d='M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z'></path>
          </svg>
          <span class='sr-only'>Submit search</span>
        </button>
      </div>
      <div id='search-help' class='sr-only'>
        Enter your search terms and press Enter or click the search button
      </div>
    </form>
  </div>
</div>

<style>
  /* ========== OPTIMIZED CSS WITH CLAMP() AND CSS VARIABLES ========== */

  /* Screen Reader Only */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  /* Search Popover Container */
  .search-popover-container {
    position: relative;
    display: inline-block;
  }

  /* Search Toggle Button - Optimized with clamp() */
  .search-toggle-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: clamp(2.25rem, 4vw, 2.75rem);
    height: clamp(2.25rem, 4vw, 2.75rem);
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 50%;
    color: rgba(255, 255, 255, 0.9);
    cursor: pointer;
    transition: all 0.2s ease;
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
  }

  .search-toggle-btn:hover {
    background: rgba(255, 255, 255, 0.15);
    border-color: rgba(255, 255, 255, 0.3);
    transform: scale(1.05);
  }

  .search-toggle-btn:focus-visible {
    outline: 2px solid var(--clr-accent, #8b5dff);
    outline-offset: 2px;
  }

  .search-toggle-btn[aria-expanded='true'] {
    background: rgba(139, 93, 255, 0.2);
    border-color: var(--clr-accent, #8b5dff);
  }

  .search-icon {
    width: clamp(1rem, 2vw, 1.25rem);
    height: clamp(1rem, 2vw, 1.25rem);
  }

  /* Search Popover - Optimized with clamp() */
  .search-popover {
    background: rgba(0, 0, 0, 0.95);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: clamp(0.5rem, 1vw, 0.75rem);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    min-width: clamp(280px, 50vw, 400px);
    max-width: 90vw;
    z-index: 1000;
    padding: clamp(0.75rem, 2vw, 1rem);
  }

  .search-popover::backdrop {
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
    -webkit-backdrop-filter: blur(4px);
  }

  /* Search Form */
  .search-form {
    display: flex;
    flex-direction: column;
    gap: 0;
  }

  .search-input-wrapper {
    display: flex;
    gap: clamp(0.375rem, 1vw, 0.5rem);
    align-items: center;
  }

  .search-input {
    flex: 1;
    padding: clamp(0.625rem, 1.5vw, 0.75rem) clamp(0.75rem, 2vw, 1rem);
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: var(--border-radius-card, 0.75rem);
    color: #ffffff;
    font-size: clamp(0.875rem, 2vw, 1rem);
    transition: all 0.2s ease;
  }

  .search-input::placeholder {
    color: rgba(255, 255, 255, 0.5);
  }

  .search-input:focus {
    outline: none;
    border-color: var(--clr-accent, #8b5dff);
    background: rgba(255, 255, 255, 0.15);
    box-shadow: 0 0 0 3px rgba(139, 93, 255, 0.1);
  }

  .search-submit-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: clamp(2.25rem, 4vw, 2.75rem);
    height: clamp(2.25rem, 4vw, 2.75rem);
    background: var(--clr-accent, #8b5dff);
    border: none;
    border-radius: var(--border-radius-card, 0.75rem);
    color: #ffffff;
    cursor: pointer;
    transition: all 0.2s ease;
    flex-shrink: 0;
  }

  .search-submit-btn:hover {
    background: var(--clr-accent-dark, #7c3aed);
    transform: scale(1.05);
  }

  .search-submit-btn:focus-visible {
    outline: 2px solid #ffffff;
    outline-offset: 2px;
  }

  .search-submit-btn svg {
    width: clamp(1rem, 2vw, 1.25rem);
    height: clamp(1rem, 2vw, 1.25rem);
  }

  /* Responsive Design - Mobile First */
  @media (max-width: 640px) {
    .search-input-wrapper {
      flex-direction: column;
    }

    .search-submit-btn {
      width: 100%;
      height: clamp(2.5rem, 5vw, 2.75rem);
    }
  }

  /* High Contrast Mode */
  @media (prefers-contrast: high) {
    .search-toggle-btn {
      border: 2px solid #ffffff;
      background: rgba(0, 0, 0, 0.8);
    }

    .search-popover {
      border: 2px solid #ffffff;
      background: rgba(0, 0, 0, 0.95);
    }

    .search-input {
      border: 2px solid #ffffff;
      background: rgba(0, 0, 0, 0.8);
    }
  }

  /* Reduced Motion */
  @media (prefers-reduced-motion: reduce) {
    .search-toggle-btn,
    .search-submit-btn,
    .search-input {
      transition: none;
    }

    .search-toggle-btn:hover,
    .search-submit-btn:hover {
      transform: none;
    }
  }

  /* Dark Mode Support */
  @media (prefers-color-scheme: dark) {
    .search-popover {
      background: rgba(0, 0, 0, 0.95);
    }
  }

  /* Light Mode Support */
  @media (prefers-color-scheme: light) {
    .search-popover {
      background: rgba(255, 255, 255, 0.95);
      border-color: rgba(0, 0, 0, 0.2);
    }

    .search-input {
      background: rgba(0, 0, 0, 0.1);
      border-color: rgba(0, 0, 0, 0.2);
      color: #000000;
    }

    .search-input::placeholder {
      color: rgba(0, 0, 0, 0.5);
    }
  }
</style>

<script>
  // ========== OPTIMIZED SEARCH FUNCTIONALITY ==========
  // Architect Optimization: Performance-first, Astro-native approach
  // Purpose: Minimalist search functionality with Popover API and optimal performance

  (() => {
    'use strict';

    // ========== ELEMENT SELECTION WITH NULL CHECKS ==========
    const searchPopover = document.getElementById('search-popover');
    const searchInput = document.querySelector(
      '.search-input'
    ) as HTMLInputElement;
    const searchForm = document.querySelector(
      '.search-form'
    ) as HTMLFormElement;
    const toggleButton = document.querySelector(
      '.search-toggle-btn'
    ) as HTMLButtonElement;

    // Early return if essential elements not found
    if (!searchPopover || !searchInput || !searchForm || !toggleButton) {
      console.warn('SearchPopover: Essential elements not found');
      return;
    }

    // ========== PERFORMANCE OPTIMIZATION ==========
    let isPopoverOpen = false;
    let focusTimeout: number | null = null;

    // ========== POPOVER STATE MANAGEMENT ==========
    const updatePopoverState = (isOpen: boolean) => {
      isPopoverOpen = isOpen;
      toggleButton.setAttribute('aria-expanded', isOpen.toString());

      if (isOpen) {
        // Focus search input when popover opens (with delay for animation)
        focusTimeout = window.setTimeout(() => {
          searchInput.focus();
        }, 100);
      } else {
        // Clear focus timeout if popover closes
        if (focusTimeout) {
          clearTimeout(focusTimeout);
          focusTimeout = null;
        }
      }
    };

    // ========== EVENT HANDLERS ==========
    const handlePopoverToggle = (event: Event) => {
      const customEvent = event as CustomEvent & { newState: string };
      const isOpen = customEvent.newState === 'open';
      updatePopoverState(isOpen);
    };

    const handleEscapeKey = (event: KeyboardEvent) => {
      if (event.key === 'Escape' && isPopoverOpen) {
        event.preventDefault();
        (searchPopover as any).hidePopover();
      }
    };

    const handleFormSubmit = (event: Event) => {
      const query = searchInput.value.trim();
      if (!query || query.length < 1) {
        event.preventDefault();
        searchInput.focus();
        return;
      }

      // Optional: Add loading state or analytics here
      console.log('Search query submitted:', query);
    };

    const handleInputValidation = (event: Event) => {
      const input = event.target as HTMLInputElement;
      const isValid = input.value.trim().length >= 1;

      if (isValid) {
        input.setCustomValidity('');
      } else {
        input.setCustomValidity('Please enter at least 1 character');
      }
    };

    // ========== EVENT LISTENERS ==========
    // Popover events
    searchPopover.addEventListener('beforetoggle', handlePopoverToggle);

    // Keyboard events
    document.addEventListener('keydown', handleEscapeKey);

    // Form events
    searchForm.addEventListener('submit', handleFormSubmit);
    searchInput.addEventListener('input', handleInputValidation);

    // ========== CLEANUP ==========
    // Cleanup function for component unmount
    const cleanup = () => {
      if (focusTimeout) {
        clearTimeout(focusTimeout);
      }
      searchPopover.removeEventListener('beforetoggle', handlePopoverToggle);
      document.removeEventListener('keydown', handleEscapeKey);
      searchForm.removeEventListener('submit', handleFormSubmit);
      searchInput.removeEventListener('input', handleInputValidation);
    };

    // Expose cleanup for potential use
    (window as any).searchPopoverCleanup = cleanup;
  })();
</script>
