---
export interface Props {
  initialCategory?: string;
  initialQuery?: string;
}

const { initialCategory = '', initialQuery = '' } = Astro.props;
---

<section class='category-section'>
  <header class='section-header'>
    <h2 class='section-title'>Jelajahi berdasarkan Kategori</h2>
    <p class='section-description'>Klik pada kategori untuk memfilter konten</p>
  </header>

  <div class='category-grid' id='category-grid'>
    <div class='loading-indicator'>Memuat kategori...</div>
  </div>
</section>

<script is:inline define:vars={{ initialQuery, initialCategory }}>
  async function loadCategories() {
    try {
      const response = await fetch('/search/Search.json');
      const data = await response.json();
      const categoryGrid = document.getElementById('category-grid');
      if (!categoryGrid) return;
      const categories = data.metadata?.availableCategories || [];
      // カテゴリをアルファベット順（A-Z）にソート
      const sortedCategories = categories.sort((a, b) =>
        a.localeCompare(b, 'en', { sensitivity: 'base' })
      );
      categoryGrid.innerHTML = sortedCategories
        .map(
          category => `
         <a href="/search?category=${encodeURIComponent(category)}${initialQuery ? `&q=${encodeURIComponent(initialQuery)}` : ''}"
            class="category-item${initialCategory === category ? ' active' : ''}" data-category="${category}" ${initialCategory === category ? 'aria-current="page"' : ''}>
           <div class="category-name">${category}</div>
           <div class="category-count">Jelajahi konten</div>
         </a>
       `
        )
        .join('');

      // クリック時にURLを維持しつつ動的検索イベントを発火
      const links = categoryGrid.querySelectorAll('.category-item');
      links.forEach(link => {
        link.addEventListener('click', e => {
          e.preventDefault();
          const target = e.currentTarget;
          if (!(target instanceof HTMLAnchorElement)) return;

          // アクティブ表示を更新
          links.forEach(l => l.classList.remove('active'));
          target.classList.add('active');
          target.setAttribute('aria-current', 'page');

          // URLを更新
          const url = new URL(window.location.href);
          const category = target.getAttribute('data-category') || '';
          if (category) {
            url.searchParams.set('category', category);
          } else {
            url.searchParams.delete('category');
          }
          if (initialQuery) url.searchParams.set('q', initialQuery);
          window.history.pushState({}, '', url);

          // 検索セクションへイベント通知
          document.dispatchEvent(
            new CustomEvent('search:category-selected', {
              detail: { category },
            })
          );
        });
      });
    } catch (error) {
      console.error('Failed to load categories:', error);
      const el = document.getElementById('category-grid');
      if (el)
        el.innerHTML =
          '<div class="loading-indicator">Failed to load categories</div>';
    }
  }
  document.addEventListener('DOMContentLoaded', loadCategories);
</script>
