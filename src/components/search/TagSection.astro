---
export interface Props {
  initialTag?: string;
  initialQuery?: string;
}

const { initialTag = '', initialQuery = '' } = Astro.props;
---

<section class='tag-section'>
  <header class='section-header'>
    <h2 class='section-title'>Browse by Tags</h2>
    <p class='section-description'>Click on a tag to filter content</p>
  </header>

  <div class='tag-cloud' id='tag-cloud'>
    <div class='loading-indicator'>Loading tags...</div>
  </div>
</section>

<style>
  .tag-section {
    padding: 1.5rem 0;
  }

  .tag-cloud {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 0.5rem;
    max-width: 1200px;
    margin: 0 auto;
  }

  .tag-item {
    display: inline-block;
    padding: 0.5rem 1rem;
    border: 1px solid var(--clr-border);
    border-radius: 1.5rem;
    background: var(--clr-background-secondary);
    color: var(--clr-text-primary);
    font-size: 0.875rem;
    font-weight: 500;
    text-decoration: none;
    transition: all 0.2s ease;
  }

  .tag-item:hover {
    background: var(--clr-accent);
    color: white;
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgb(0 0 0 / 0.1);
  }

  .tag-item.active {
    background: var(--clr-accent);
    color: white;
  }

  .loading-indicator {
    width: 100%;
    padding: 2rem;
    color: var(--clr-text-secondary);
    text-align: center;
  }

  @media (max-width: 768px) {
    .tag-cloud {
      gap: 0.25rem;
    }

    .tag-item {
      padding: 0.375rem 0.75rem;
      font-size: 0.8rem;
    }
  }
</style>

<script is:inline define:vars={{ initialTag, initialQuery }}>
  async function loadTags() {
    try {
      const response = await fetch('/search/Search.json');
      const data = await response.json();
      const tagCloud = document.getElementById('tag-cloud');
      if (!tagCloud) return;
      const tags = data.metadata?.availableTags || [];
      tagCloud.innerHTML = tags
        .map(
          tag => `
        <a href="/search?tag=${encodeURIComponent(tag)}${initialQuery ? `&q=${encodeURIComponent(initialQuery)}` : ''}"
           class="tag-item${tag === initialTag ? ' active' : ''}" data-tag="${tag}" ${tag === initialTag ? 'aria-current="page"' : ''}>#${tag}</a>
       `
        )
        .join('');

      const links = tagCloud.querySelectorAll('.tag-item');
      links.forEach(link => {
        link.addEventListener('click', e => {
          e.preventDefault();
          const target = e.currentTarget;
          if (!(target instanceof HTMLAnchorElement)) return;

          // active更新
          links.forEach(l => l.classList.remove('active'));
          target.classList.add('active');
          target.setAttribute('aria-current', 'page');

          // URL更新
          const url = new URL(window.location.href);
          const tag = target.getAttribute('data-tag') || '';
          if (tag) url.searchParams.set('tag', tag);
          else url.searchParams.delete('tag');
          if (initialQuery) url.searchParams.set('q', initialQuery);
          window.history.pushState({}, '', url);

          // 検索セクションへイベント通知
          document.dispatchEvent(
            new CustomEvent('search:tag-selected', {
              detail: { tag },
            })
          );
        });
      });
    } catch (error) {
      console.error('Failed to load tags:', error);
      const el = document.getElementById('tag-cloud');
      if (el)
        el.innerHTML =
          '<div class="loading-indicator">Failed to load tags</div>';
    }
  }
  document.addEventListener('DOMContentLoaded', loadTags);
</script>
